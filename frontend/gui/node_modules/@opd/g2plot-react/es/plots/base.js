function _typeof(obj) { if (typeof Symbol === "function" && typeof Symbol.iterator === "symbol") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === "function" && obj.constructor === Symbol && obj !== Symbol.prototype ? "symbol" : typeof obj; }; } return _typeof(obj); }

function _objectWithoutProperties(source, excluded) { if (source == null) return {}; var target = _objectWithoutPropertiesLoose(source, excluded); var key, i; if (Object.getOwnPropertySymbols) { var sourceSymbolKeys = Object.getOwnPropertySymbols(source); for (i = 0; i < sourceSymbolKeys.length; i++) { key = sourceSymbolKeys[i]; if (excluded.indexOf(key) >= 0) continue; if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue; target[key] = source[key]; } } return target; }

function _objectWithoutPropertiesLoose(source, excluded) { if (source == null) return {}; var target = {}; var sourceKeys = Object.keys(source); var key, i; for (i = 0; i < sourceKeys.length; i++) { key = sourceKeys[i]; if (excluded.indexOf(key) >= 0) continue; target[key] = source[key]; } return target; }

function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError("Cannot call a class as a function"); } }

function _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if ("value" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }

function _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }

function _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === "object" || typeof call === "function")) { return call; } return _assertThisInitialized(self); }

function _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }

function _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); } return self; }

function _inherits(subClass, superClass) { if (typeof superClass !== "function" && superClass !== null) { throw new TypeError("Super expression must either be null or a function"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }

function _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import React from 'react';
import omit from 'lodash/omit';
import isEqual from 'lodash/isEqual';
import cloneDeep from 'lodash/cloneDeep';

var BaseChart =
/*#__PURE__*/
function (_React$Component) {
  _inherits(BaseChart, _React$Component);

  function BaseChart() {
    var _getPrototypeOf2;

    var _this;

    _classCallCheck(this, BaseChart);

    for (var _len = arguments.length, args = new Array(_len), _key = 0; _key < _len; _key++) {
      args[_key] = arguments[_key];
    }

    _this = _possibleConstructorReturn(this, (_getPrototypeOf2 = _getPrototypeOf(BaseChart)).call.apply(_getPrototypeOf2, [this].concat(args)));

    _defineProperty(_assertThisInitialized(_this), "el", null);

    _defineProperty(_assertThisInitialized(_this), "chart", void 0);

    _defineProperty(_assertThisInitialized(_this), "config", void 0);

    _defineProperty(_assertThisInitialized(_this), "getContainer", function (el) {
      _this.el = el;
    });

    _defineProperty(_assertThisInitialized(_this), "getConfig", function (props) {
      return omit(props, ['style', 'className', 'chart', 'onMount']);
    });

    return _this;
  }

  _createClass(BaseChart, [{
    key: "componentDidMount",
    value: function componentDidMount() {
      var _this$props = this.props,
          chart = _this$props.chart,
          onMount = _this$props.onMount;
      var config = this.getConfig(this.props);
      var Chart = chart;

      var _ref = config,
          data = _ref.data,
          restConfig = _objectWithoutProperties(_ref, ["data"]);

      this.config = cloneDeep(restConfig);

      if (this.el) {
        this.chart = new Chart(this.el, config);
        this.chart.render();

        if (typeof onMount === 'function') {
          onMount(this.chart);
        }
      }
    }
  }, {
    key: "componentDidUpdate",
    value: function componentDidUpdate() {
      var config = this.getConfig(this.props);

      var _ref2 = config,
          data = _ref2.data,
          restConfig = _objectWithoutProperties(_ref2, ["data"]);

      var isConfigChanged = !isEqual(this.config, restConfig);
      /* istanbul ignore else */

      if (this.chart) {
        if (isConfigChanged) {
          this.config = cloneDeep(restConfig);
          this.chart.updateConfig(config);
          this.chart.render();
        } else {
          this.chart.changeData(data);
        }
      }
    }
  }, {
    key: "componentWillUnmount",
    value: function componentWillUnmount() {
      /* istanbul ignore else */
      if (this.chart) {
        this.chart.destroy();
        this.chart = null;
      }
    }
  }, {
    key: "render",
    value: function render() {
      var _this$props2 = this.props,
          style = _this$props2.style,
          className = _this$props2.className;
      return React.createElement("div", {
        ref: this.getContainer,
        className: className,
        style: style
      });
    }
  }]);

  return BaseChart;
}(React.Component);

export { BaseChart as default };