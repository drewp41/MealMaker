function ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); if (enumerableOnly) symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; }); keys.push.apply(keys, symbols); } return keys; }

function _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = arguments[i] != null ? arguments[i] : {}; if (i % 2) { ownKeys(source, true).forEach(function (key) { _defineProperty(target, key, source[key]); }); } else if (Object.getOwnPropertyDescriptors) { Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)); } else { ownKeys(source).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } } return target; }

function _defineProperty(obj, key, value) { if (key in obj) { Object.defineProperty(obj, key, { value: value, enumerable: true, configurable: true, writable: true }); } else { obj[key] = value; } return obj; }

import { createBrowserHistory } from '/Users/kagawa/workspace/open-data-plan/g2plot-react/node_modules/@umijs/runtime/dist/index.js';
var options = {
  "basename": "/"
};

if (window.routerBase) {
  options.basename = window.routerBase;
}

var history = createBrowserHistory(options);
export var createHistory = function createHistory() {
  var hotReload = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : false;

  if (!hotReload) {
    history = createBrowserHistory(options);
  }

  return history;
}; // 通常仅微前端场景需要调用这个 API

export var setCreateHistoryOptions = function setCreateHistoryOptions() {
  var newOpts = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  options = _objectSpread({}, options, {
    newOpts: newOpts
  });
};
export { history };