var __extends = (this && this.__extends) || (function () {
    var extendStatics = function (d, b) {
        extendStatics = Object.setPrototypeOf ||
            ({ __proto__: [] } instanceof Array && function (d, b) { d.__proto__ = b; }) ||
            function (d, b) { for (var p in b) if (b.hasOwnProperty(p)) d[p] = b[p]; };
        return extendStatics(d, b);
    };
    return function (d, b) {
        extendStatics(d, b);
        function __() { this.constructor = d; }
        d.prototype = b === null ? Object.create(b) : (__.prototype = b.prototype, new __());
    };
})();
import React, { PureComponent } from 'react';
import { debounce, get, size } from './helper';
/**
 * 一个基本可用的 G2Plot React 组件
 */
var default_1 = /** @class */ (function (_super) {
    __extends(default_1, _super);
    function default_1() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        /**
         * 对 chart.render 加上 debounce
         */
        _this.batchRender = debounce(function () {
            if (_this.plot) {
                _this.plot.render();
            }
        });
        return _this;
    }
    /**
     * get G2Plot instance
     */
    default_1.prototype.getPlot = function () {
        return this.plot;
    };
    default_1.prototype.componentDidMount = function () {
        this.newPlot();
    };
    default_1.prototype.componentDidUpdate = function (prevProps) {
        var Ctor = prevProps.Ctor, config = prevProps.config;
        if (size(get(this.props, ['config', 'data'])) && JSON.stringify(this.props.config) !== JSON.stringify(config)) {
            // 只有有数据的时候才去渲染
            // 构造函数变化，则重新创建；或者 chart 不存在
            if (this.props.Ctor !== Ctor || !this.plot) {
                this.newPlot();
            }
            else {
                this.updatePlot();
            }
        }
    };
    /**
     * 创建 chart
     */
    default_1.prototype.newPlot = function () {
        var _a = this.props, Ctor = _a.Ctor, config = _a.config;
        if (this.plot) {
            this.plot.destroy();
            this.plot = undefined;
        }
        this.plot = new Ctor(this.$dom, config);
        this.batchRender();
    };
    /**
     * 更新 chart
     */
    default_1.prototype.updatePlot = function () {
        if (this.plot) {
            this.plot.updateConfig(this.props.config);
            this.batchRender();
        }
    };
    default_1.prototype.render = function () {
        var _this = this;
        var className = this.props.className;
        return React.createElement("div", { className: className, ref: function (e) { return (_this.$dom = e); } });
    };
    return default_1;
}(PureComponent));
export default default_1;
