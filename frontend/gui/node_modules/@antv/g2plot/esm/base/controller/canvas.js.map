{"version":3,"file":"canvas.js","sourceRoot":"","sources":["../../../src/base/controller/canvas.ts"],"names":[],"mappings":"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","sourcesContent":["import { modifyCSS } from '@antv/dom-util';\nimport { Canvas, SVG, ICanvas } from '../../dependents';\nimport { debounce, get } from '@antv/util';\nimport ResizeObserver from 'resize-observer-polyfill';\nimport { getGlobalTheme } from '../../theme/global';\nimport BasePlot from '../plot';\nimport ThemeController from './theme';\n\nexport interface CanvasControllerCfg {\n  readonly containerDOM: HTMLElement;\n  readonly plot: BasePlot;\n}\n\ntype ICanvasCtor = new (...cfg: any) => ICanvas;\n\n/**\n * Canvas controller\n * 1. create G.Canvas, destroy G.Canvas\n * 2. process auto fit container\n * 3. API for G.Canvas\n */\n\nexport default class CanvasController {\n  public width: number;\n  public height: number;\n  public canvas: ICanvas;\n\n  private containerDOM: HTMLElement;\n  private plot: BasePlot; // temp\n  private resizeObserver: any;\n\n  /**\n   * when the container size changed, trigger it after 300ms.\n   */\n  private onResize = debounce(() => {\n    if (this.plot.destroyed) {\n      return;\n    }\n    const { width, height } = this.getCanvasSize();\n    /** height measure不准导致重复 forceFit */\n    if (this.width === width && this.height === height) {\n      return;\n    }\n    // got new width, height, re-render the plot\n    this.width = width;\n    this.height = height;\n    this.plot.updateConfig({ width, height });\n    this.plot.render();\n  }, 300);\n\n  constructor(cfg: CanvasControllerCfg) {\n    const { containerDOM, plot } = cfg;\n    this.containerDOM = containerDOM;\n    this.plot = plot;\n    this.init();\n  }\n\n  /**\n   * get canvas size from props.\n   * @returns the width, height of canvas\n   */\n  public getCanvasSize() {\n    const theme = getGlobalTheme();\n    let width = this.plot.width ? this.plot.width : theme.width;\n    let height = this.plot.height ? this.plot.height : theme.height;\n\n    // if forceFit = true, then use the container's size as default.\n    if (this.plot.forceFit) {\n      width = this.containerDOM.offsetWidth ? this.containerDOM.offsetWidth : width;\n      height = this.containerDOM.offsetHeight ? this.containerDOM.offsetHeight : height;\n    }\n    return { width, height };\n  }\n\n  /**\n   * get the canvas dom\n   * @returns Canvas DOM\n   */\n  public getCanvasDOM() {\n    return this.canvas.get('container');\n  }\n\n  /**\n   * update the plot size\n   */\n  public updateCanvasSize() {\n    const { width, height } = this.getCanvasSize();\n\n    this.width = width;\n    this.height = height;\n    this.canvas.changeSize(width, height);\n    // this.plot.updateRange();\n  }\n\n  /**\n   * 根据主题调整canvas样式\n   */\n  public updateCanvasTheme() {\n    const { theme } = this.plot;\n    const globalTheme = ThemeController.getGlobalTheme(theme);\n    const fill: string = get(globalTheme, 'backgroundStyle.fill');\n    if (fill) {\n      this.updateCanvasStyle({\n        backgroundColor: fill,\n      });\n    }\n  }\n\n  /**\n   * update the canvas dom styles\n   * @param styles\n   */\n  private updateCanvasStyle(styles: Record<string, string | number>) {\n    // 修改容器的样式\n    modifyCSS(this.getCanvasDOM(), styles);\n\n    // 修改 canvas 的样式\n    modifyCSS(this.canvas.get('el'), {\n      display: 'inline-block',\n      verticalAlign: 'middle',\n    });\n  }\n\n  /**\n   * destroy the plot, remove resize event.\n   */\n  public destroy() {\n    // remove event\n    if (this.resizeObserver) {\n      this.resizeObserver.unobserve(this.containerDOM);\n      this.resizeObserver.disconnect();\n      this.containerDOM = null;\n    }\n    // remove G.Canvas\n    this.canvas.destroy();\n  }\n\n  /**\n   * when forceFit = true, then bind the event to listen the container size change\n   */\n  private bindForceFit() {\n    const { forceFit } = this.plot;\n\n    // use ResizeObserver to listen the container size change.\n    if (forceFit) {\n      this.resizeObserver = new ResizeObserver(this.onResize);\n      this.resizeObserver.observe(this.containerDOM);\n    }\n  }\n\n  /**\n   * init life circle\n   */\n  private init() {\n    this.initGCanvas();\n\n    this.bindForceFit();\n\n    // 追加容器的 css 样式，防止 tooltip 的位置参考点不正确\n    this.updateCanvasStyle({ position: 'relative' });\n  }\n\n  /**\n   * init G.Canvas instance\n   */\n  private initGCanvas() {\n    /** 创建canvas */\n    const { renderer = 'canvas', pixelRatio, localRefresh = false } = this.plot;\n    const { width, height } = this.getCanvasSize();\n\n    const G: ICanvasCtor = renderer === 'canvas' ? Canvas : SVG;\n\n    this.canvas = new G({\n      localRefresh,\n      container: this.containerDOM,\n      width,\n      height,\n      pixelRatio,\n    });\n    this.width = width;\n    this.height = height;\n    this.updateCanvasTheme();\n  }\n}\n"]}