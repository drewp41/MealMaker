{"version":3,"file":"state.js","sourceRoot":"","sources":["../../../src/base/controller/state.ts"],"names":[],"mappings":"AAIA,OAAO,EAAE,UAAU,EAAE,MAAM,EAAE,IAAI,EAAE,OAAO,EAAE,GAAG,EAAE,KAAK,EAAE,MAAM,YAAY,CAAC;AAC3E,OAAO,EAAE,uBAAuB,EAAE,MAAM,0BAA0B,CAAC;AACnE,OAAO,EAAE,OAAO,EAAE,MAAM,kBAAkB,CAAC;AAC3C,OAAO,YAAY,MAAM,0BAA0B,CAAC;AAEpD,MAAM,UAAU,OAAO,CAAC,MAAM,EAAE,SAAS;IACvC,IAAI,CAAC,UAAU,CAAC,SAAS,CAAC,EAAE;QAClB,IAAA,uBAAI,EAAE,mBAAG,CAAe;QAChC,IAAI,UAAU,CAAC,GAAG,CAAC,EAAE;YACnB,OAAO,GAAG,CAAC,MAAM,CAAC,MAAI,CAAC,CAAC,CAAC;SAC1B;QACD,OAAO,MAAM,CAAC,MAAI,CAAC,KAAK,GAAG,CAAC;KAC7B;IACD,OAAO,SAAS,CAAC,MAAM,CAAC,CAAC;AAC3B,CAAC;AAED;IAOE,yBAAY,GAAG;QAFP,oBAAe,GAAa,EAAE,CAAC;QAGrC,MAAM,CAAC,IAAI,EAAE,GAAG,CAAC,CAAC;IACpB,CAAC;IAEM,4CAAkB,GAAzB;QACE,IAAI,CAAC,YAAY,GAAG,IAAI,YAAY,EAAE,CAAC;IACzC,CAAC;IAEM,0CAAgB,GAAvB,UAAwB,OAAqB,EAAE,GAAG;QAChD,IAAI,CAAC,YAAY,GAAG,OAAO,CAAC;QAC5B,IAAI,GAAG,CAAC,QAAQ,EAAE;YAChB,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC;SACxC;QACD,IAAI,GAAG,CAAC,aAAa,EAAE;YACrB,IAAI,CAAC,mBAAmB,CAAC,GAAG,CAAC,aAAa,CAAC,CAAC;SAC7C;IACH,CAAC;IAEM,uCAAa,GAApB,UAAqB,MAAM;QAA3B,iBAKC;QAJC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAE,IAAI;YACf,IAAA,2BAAS,EAAE,uBAAO,CAAW;YACrC,KAAI,CAAC,QAAQ,CAAC,EAAE,IAAI,MAAA,EAAE,SAAS,WAAA,EAAE,OAAO,SAAA,EAAE,CAAC,CAAC;QAC9C,CAAC,CAAC,CAAC;IACL,CAAC;IAEM,kCAAQ,GAAf,UAAgB,GAAG;QAAnB,iBA4BC;QA3BS,IAAA,eAAI,EAAE,yBAAS,EAAE,qBAAO,CAAS;QACzC,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,UAAU,EAAE,CAAC;QAChC,IAAI,CAAC,WAAW,GAAG,IAAI,CAAC,eAAe,EAAE,CAAC;QAC1C,sBAAsB;QACtB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAE,KAAK;YAC7B,IAAM,WAAW,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,IAAI,CAAC;YAC7C,IAAM,MAAM,GAAG,OAAO,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC,CAAC,CAAC,CAAC,CAAC,CAAC,WAAW,CAAC;YACnE,IAAI,OAAO,CAAC,MAAM,EAAE,SAAS,CAAC,EAAE;gBAC9B,IAAM,UAAU,GAAG,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,GAAG,CAAC,KAAK,CAAC,CAAC,CAAC,KAAI,CAAC,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBACnF,IAAM,UAAU,GAAG,KAAI,CAAC,WAAW,CAAC,KAAK,CAAC,CAAC;gBAC3C,IAAI,KAAK,SAAA,CAAC;gBACV,IAAI,UAAU,CAAC,UAAU,CAAC,EAAE;oBAC1B,KAAK,GAAG,UAAU,CAAC,UAAU,CAAC,CAAC;iBAChC;qBAAM;oBACL,KAAK,GAAG,GAAG,CAAC,EAAE,EAAE,UAAU,EAAE,UAAU,CAAC,CAAC;iBACzC;gBACD,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;gBAClB,KAAI,CAAC,SAAS,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;gBAC5B,mCAAmC;gBACnC,iBAAiB;aAClB;QACH,CAAC,CAAC,CAAC;QACH,oBAAoB;QACpB,IAAI,OAAO,EAAE;YACX,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,OAAO,EAAE,SAAS,CAAC,CAAC;SAC/C;QACD,IAAI,CAAC,IAAI,CAAC,MAAM,CAAC,IAAI,EAAE,CAAC;IAC1B,CAAC;IAEO,6CAAmB,GAA3B,UAA4B,WAAW;QAAvC,iBAoBC;QAnBC,IAAI,CAAC,WAAW,EAAE,UAAC,GAAQ;YACzB,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC;YACxB,IAAI,OAAO,CAAC;YACZ,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;gBACrB,OAAO,GAAG,UAAC,CAAC;oBACV,IAAM,CAAC,GAAG,KAAK,CAAC,CAAC,CAAC,CAAC;oBACnB,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,CAAC,CAAC,IAAI,EAAE,CAAC,CAAC,GAAG,CAAC,CAAC;gBAC5C,CAAC,CAAC;aACH;iBAAM;gBACL,OAAO,GAAG;oBACR,KAAI,CAAC,YAAY,CAAC,QAAQ,CAAC,KAAK,CAAC,IAAI,EAAE,KAAK,CAAC,GAAG,CAAC,CAAC;gBACpD,CAAC,CAAC;aACH;YACD,IAAI,GAAG,CAAC,KAAK,EAAE;gBACb,OAAO,CAAC,KAAI,CAAC,IAAI,EAAE,KAAI,CAAC,YAAY,CAAC,GAAG,CAAC,KAAK,CAAC,EAAE,OAAO,CAAC,CAAC;aAC3D;iBAAM;gBACL,OAAO,EAAE,CAAC;aACX;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,6CAAmB,GAA3B,UAA4B,WAAW;QAAvC,iBAMC;QALC,IAAI,CAAC,WAAW,EAAE,UAAC,GAAQ;YACzB,KAAI,CAAC,YAAY,CAAC,EAAE,CAAI,GAAG,CAAC,IAAI,YAAS,EAAE,UAAC,KAAK;gBAC/C,GAAG,CAAC,QAAQ,CAAC,KAAK,EAAE,KAAI,CAAC,IAAI,CAAC,CAAC;YACjC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IAEO,oCAAU,GAAlB;QAAA,iBAWC;QAVC,IAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,IAAI,CAAC,UAAU,CAAC;QACxC,IAAI,CAAC,KAAK,EAAE,UAAC,IAAS;YACpB,IAAM,cAAc,GAAG,IAAI,CAAC,SAAS,CAAC;YACtC,KAAI,CAAC,eAAe,CAAC,IAAI,CAAC,cAAc,CAAC,CAAC;YAC1C,IAAI,CAAC,IAAI,CAAC,SAAS,EAAE;gBACnB,MAAM,CAAC,IAAI,OAAX,MAAM,EAAS,IAAI,CAAC,SAAS,EAAE,EAAE;aAClC;QACH,CAAC,CAAC,CAAC;QACH,OAAO,MAAM,CAAC;IAChB,CAAC;IAEO,yCAAe,GAAvB;QACE,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK;YACtB,KAAK,CAAC,IAAI,CAAC,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC,CAAC;QAClC,CAAC,CAAC,CAAC;QACH,OAAO,KAAK,CAAC;IACf,CAAC;IAED,6BAA6B;IACrB,sCAAY,GAApB,UAAqB,KAAK;QACxB,IAAM,QAAQ,GAAG,KAAK,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;QAClC,IAAM,WAAW,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,IAAI,EAAE,QAAQ,CAAC,CAAC,CAAC,CAAC,CAAC;QAChE,IAAM,SAAS,GAAG,QAAQ,CAAC,CAAC,CAAC,CAAC;QAC9B,OAAU,WAAW,SAAI,SAAW,CAAC;IACvC,CAAC;IAEO,+CAAqB,GAA7B,UAA8B,IAAI,EAAE,KAAK;QACvC,IAAM,KAAK,GAAG,IAAI,CAAC,IAAI,CAAC,KAAK,CAAC;QAC9B,IAAM,YAAY,GAAG,IAAI,CAAC,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE,KAAK,CAAC,IAAI,CAAC,CAAC;QAClE,IAAM,UAAU,GAAM,YAAY,UAAO,CAAC;QAC1C,IAAI,KAAK,CAAC,UAAU,CAAC,EAAE;YACrB,IAAI,KAAK,GAAG,KAAK,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,CAAC;YACpC,IAAI,UAAU,CAAC,KAAK,CAAC,EAAE;gBACrB,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC,IAAI,EAAE,CAAC,CAAC;aAC7B;YACD,OAAO,KAAK,CAAC;SACd;QACD,OAAO,EAAE,CAAC;IACZ,CAAC;IAEO,wCAAc,GAAtB,UAAuB,IAAI,EAAE,OAAO,EAAE,SAAS;QAA/C,iBASC;QARC,IAAI,CAAC,OAAO,EAAE,UAAC,CAAC;YACd,IAAI,KAAI,CAAC,IAAI,CAAC,CAAC,CAAC,EAAE;gBAChB,eAAe;gBACf,0CAA0C;gBAC1C,IAAM,MAAM,GAAG,uBAAuB,CAAC,CAAC,EAAE,IAAI,CAAC,CAAC;gBAChD,MAAM,CAAC,KAAI,CAAC,IAAI,EAAE,SAAS,CAAC,CAAC;aAC9B;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IAED,cAAc;IACN,mCAAS,GAAjB,UAAkB,SAAiB,EAAE,KAAmB;QACtD,IAAI,SAAS,KAAK,QAAQ,IAAI,SAAS,KAAK,UAAU,EAAE;YACtD,sBAAsB;YACtB,IAAM,QAAQ,GAAG,KAAK,CAAC,GAAG,CAAC,QAAQ,CAAC,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YACrD,QAAQ,CAAC,QAAQ,CAAC,MAAM,GAAG,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;YAC3C,KAAK,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC;SACpB;IACH,CAAC;IAEO,qCAAW,GAAnB;QACE,IAAI,CAAC,IAAI,CAAC,eAAe,EAAE,UAAC,SAAS;YACnC,IAAM,QAAQ,GAAG,SAAS,CAAC,GAAG,CAAC,UAAU,CAAC,CAAC;YAC3C,QAAQ,CAAC,IAAI,CAAC,UAAC,IAAI,EAAE,IAAI;gBACvB,OAAO,IAAI,CAAC,MAAM,GAAG,IAAI,CAAC,MAAM,CAAC;YACnC,CAAC,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;IACL,CAAC;IACH,sBAAC;AAAD,CAAC,AApKD,IAoKC","sourcesContent":["/**\n * stateManager负责stateManager的创建/绑定，对状态量更新的响应\n */\nimport { IGroup, IShape } from '../../dependents';\nimport { isFunction, assign, each, isArray, mix, clone } from '@antv/util';\nimport { getComponentStateMethod } from '../../components/factory';\nimport { onEvent } from '../../util/event';\nimport StateManager from '../../util/state-manager';\n\nexport function compare(origin, condition) {\n  if (!isFunction(condition)) {\n    const { name, exp } = condition;\n    if (isFunction(exp)) {\n      return exp(origin[name]);\n    }\n    return origin[name] === exp;\n  }\n  return condition(origin);\n}\n\nexport default class StateController {\n  private plot: any;\n  private stateManager: StateManager;\n  private shapes: IShape[];\n  private originAttrs: any[]; // 缓存图形的原始属性\n  private shapeContainers: IGroup[] = [];\n\n  constructor(cfg) {\n    assign(this, cfg);\n  }\n\n  public createStateManager() {\n    this.stateManager = new StateManager();\n  }\n\n  public bindStateManager(manager: StateManager, cfg) {\n    this.stateManager = manager;\n    if (cfg.setState) {\n      this._updateStateProcess(cfg.setState);\n    }\n    if (cfg.onStateChange) {\n      this._stateChangeProcess(cfg.onStateChange);\n    }\n  }\n\n  public defaultStates(states) {\n    each(states, (state, type) => {\n      const { condition, related } = state;\n      this.setState({ type, condition, related });\n    });\n  }\n\n  public setState(cfg) {\n    const { type, condition, related } = cfg;\n    this.shapes = this._getShapes();\n    this.originAttrs = this._getOriginAttrs();\n    // this.resetZIndex();\n    each(this.shapes, (shape, index) => {\n      const shapeOrigin = shape.get('origin').data;\n      const origin = isArray(shapeOrigin) ? shapeOrigin[0] : shapeOrigin;\n      if (compare(origin, condition)) {\n        const stateStyle = cfg.style ? cfg.style : this._getDefaultStateStyle(type, shape);\n        const originAttr = this.originAttrs[index];\n        let attrs;\n        if (isFunction(stateStyle)) {\n          attrs = stateStyle(originAttr);\n        } else {\n          attrs = mix({}, originAttr, stateStyle);\n        }\n        shape.attr(attrs);\n        this.setZIndex(type, shape);\n        // const canvas = this.plot.canvas;\n        // canvas.draw();\n      }\n    });\n    // 组件与图形对状态量的响应不一定同步\n    if (related) {\n      this._parserRelated(type, related, condition);\n    }\n    this.plot.canvas.draw();\n  }\n\n  private _updateStateProcess(setStateCfg) {\n    each(setStateCfg, (cfg: any) => {\n      const state = cfg.state;\n      let handler;\n      if (isFunction(state)) {\n        handler = (e) => {\n          const s = state(e);\n          this.stateManager.setState(s.name, s.exp);\n        };\n      } else {\n        handler = () => {\n          this.stateManager.setState(state.name, state.exp);\n        };\n      }\n      if (cfg.event) {\n        onEvent(this.plot, this._eventParser(cfg.event), handler);\n      } else {\n        handler();\n      }\n    });\n  }\n\n  private _stateChangeProcess(onChangeCfg) {\n    each(onChangeCfg, (cfg: any) => {\n      this.stateManager.on(`${cfg.name}:change`, (props) => {\n        cfg.callback(props, this.plot);\n      });\n    });\n  }\n\n  private _getShapes() {\n    const shapes = [];\n    const geoms = this.plot.view.geometries;\n    each(geoms, (geom: any) => {\n      const shapeContainer = geom.container;\n      this.shapeContainers.push(shapeContainer);\n      if (!geom.destroyed) {\n        shapes.push(...geom.getShapes());\n      }\n    });\n    return shapes;\n  }\n\n  private _getOriginAttrs() {\n    const attrs = [];\n    each(this.shapes, (shape) => {\n      attrs.push(clone(shape.attr()));\n    });\n    return attrs;\n  }\n\n  // 将g2 geomtry转为plot层geometry\n  private _eventParser(event) {\n    const eventCfg = event.split(':');\n    const eventTarget = this.plot.geometryParser('g2', eventCfg[0]);\n    const eventName = eventCfg[1];\n    return `${eventTarget}:${eventName}`;\n  }\n\n  private _getDefaultStateStyle(type, shape) {\n    const theme = this.plot.theme;\n    const plotGeomType = this.plot.geometryParser('plot', shape.name);\n    const styleField = `${plotGeomType}Style`;\n    if (theme[styleField]) {\n      let style = theme[styleField][type];\n      if (isFunction(style)) {\n        style = style(shape.attr());\n      }\n      return style;\n    }\n    return {};\n  }\n\n  private _parserRelated(type, related, condition) {\n    each(related, (r) => {\n      if (this.plot[r]) {\n        // fixme: 自定义组件\n        // this.plot[r].setState(type, condition);\n        const method = getComponentStateMethod(r, type);\n        method(this.plot, condition);\n      }\n    });\n  }\n\n  // private set\n  private setZIndex(stateType: string, shape: IShape | any) {\n    if (stateType === 'active' || stateType === 'selected') {\n      // shape.setZIndex(1);\n      const children = shape.get('parent').get('children');\n      children[children.length - 1].setZIndex(0);\n      shape.setZIndex(1);\n    }\n  }\n\n  private resetZIndex() {\n    each(this.shapeContainers, (container) => {\n      const children = container.get('children');\n      children.sort((obj1, obj2) => {\n        return obj1._INDEX - obj2._INDEX;\n      });\n    });\n  }\n}\n"]}