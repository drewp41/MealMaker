import { Legend } from '../../dependents';
import BBox from '../../util/bbox';
import * as _ from '@antv/util';
import { getGlobalTheme } from '../../theme/global';
export function getLegendData(viewLayer, props) {
    var legendItems = [];
    var view = viewLayer.view;
    var geometry = view.geometries[0];
    var colorAttr = geometry.attributes.color; // color和shape决定cat legend的生成，暂时先不考虑shape
    var markerCfg = {
        isInCircle: false,
        color: colorAttr.values[0],
    };
    var marker = {
        symbol: 'circle',
        style: {
            r: 4,
            fill: markerCfg.fill,
        },
    };
    // @ts-ignore
    if (geometry.shapeFactory) {
        // @ts-ignore
        marker = geometry.shapeFactory.getMarker(geometry.type, markerCfg);
    }
    /** 处理default不生成图例的场景 */
    if (colorAttr.scales.length === 1 && colorAttr.scales[0].type == 'identity') {
        legendItems.push({
            value: props.name,
            checked: true,
            marker: marker,
            isSingle: true,
            layer: viewLayer,
            name: props.name || geometry.type,
        });
    }
    else {
        /** 正常生成图例 */
        var values = colorAttr.scales[0].values;
        _.each(values, function (v, index) {
            var markerColor = colorAttr.values[index];
            var markerValue = v;
            var cfg = {
                isInCircle: false,
                color: markerColor,
            };
            var marker = {
                symbol: 'circle',
                style: {
                    r: 4,
                    fill: markerCfg.color,
                },
            };
            // @ts-ignore
            if (geometry.shapeFactory) {
                // @ts-ignore
                marker = geometry.shapeFactory.getMarker(geometry.type, cfg);
            }
            legendItems.push({
                field: colorAttr.scales[0].field,
                value: markerValue,
                checked: true,
                marker: marker,
                isSingle: false,
                layer: viewLayer,
                name: markerValue,
            });
        });
    }
    return legendItems;
}
export function mergeLegendData(items) {
    return items;
}
export function createLegend(items, width, height, canvas, position) {
    var legendTheme = getGlobalTheme().legend;
    var positions = position.split('-');
    var layout = 'horizontal';
    if (positions[0] === 'left' || positions[0] === 'right') {
        layout = 'vertical';
    }
    var container = canvas.addGroup();
    var legendCfg = {
        type: 'category-legend',
        items: items,
        maxSize: width,
        container: container,
        group: container,
        layout: layout,
        textStyle: {
            fill: '#8C8C8C',
            fontSize: 12,
            textAlign: 'start',
            textBaseline: 'middle',
            lineHeight: 20,
        },
        titleDistance: 10,
        autoWrap: true,
        itemMarginBottom: 4,
        backgroundPadding: 0,
        maxLength: width,
    };
    var legend = new Legend.Category(legendCfg);
    legendLayout(width, height, legend, position);
    addLegendInteraction(legend);
    /** return legend as a padding component */
    var bbox = legend.get('container').getBBox();
    var paddingBbox;
    // merge legend inner padding
    var innerPadding = legendTheme.innerPadding;
    if (positions[0] === 'left') {
        paddingBbox = new BBox(legend.get('x') + innerPadding[3], legend.get('y'), bbox.width, bbox.height);
    }
    else if (positions[0] === 'right') {
        paddingBbox = new BBox(legend.get('x') - innerPadding[1], legend.get('y'), bbox.width, bbox.height);
    }
    else if (positions[0] === 'top') {
        paddingBbox = new BBox(legend.get('x'), legend.get('y') + innerPadding[0], bbox.width, bbox.height);
    }
    else if (positions[0] === 'bottom') {
        paddingBbox = new BBox(legend.get('x'), legend.get('y') - innerPadding[2], bbox.width, bbox.height);
    }
    return {
        position: positions[0],
        component: legend,
        getBBox: function () {
            return paddingBbox;
        },
    };
}
function addLegendInteraction(legend) {
    var filteredValue = [];
    legend.get('group').on('click', function (ev) {
        var item = ev.target.get('delegateObject').item;
        // 如果是单图例模式
        if (item.isSingle) {
            if (item.checked) {
                ev.target.get('parent').attr('opacity', 0.3);
                item.layer.hide();
                item.checked = false;
            }
            else {
                ev.target.get('parent').attr('opacity', 1);
                item.layer.show();
                item.checked = true;
            }
        }
        else {
            // 正常的图例筛选数据逻辑
            var view = item.layer.view;
            if (item.checked) {
                ev.target.get('parent').attr('opacity', 0.3);
                filteredValue.push(item.value);
                view.filter(item.field, function (f) {
                    return !_.contains(filteredValue, f);
                });
                view.render();
                var filteredData = view.filteredData;
                if (filteredData.length === 0) {
                    item.layer.hide();
                }
                else if (!item.layer.visibility) {
                    item.layer.show();
                }
                item.checked = false;
            }
            else {
                ev.target.get('parent').attr('opacity', 1);
                _.pull(filteredValue, item.value);
                view.filter(item.value, function (f) {
                    return !_.contains(filteredValue, f);
                });
                view.render();
                if (!item.layer.visibility) {
                    item.layer.show();
                }
                item.checked = true;
            }
        }
    });
}
function legendLayout(width, height, legend, position) {
    var bleeding = getGlobalTheme().bleeding;
    if (_.isArray(bleeding)) {
        _.each(bleeding, function (it, index) {
            if (typeof bleeding[index] === 'function') {
                bleeding[index] = bleeding[index]({});
            }
        });
    }
    var bbox = legend.get('container').getBBox();
    var x = 0;
    var y = 0;
    var positions = position.split('-');
    // 先确定x
    if (positions[0] === 'left') {
        x = bleeding[3];
    }
    else if (positions[0] === 'right') {
        x = width - bleeding[1] - bbox.width;
    }
    else if (positions[1] === 'center') {
        x = (width - bbox.width) / 2;
    }
    else if (positions[1] === 'left') {
        x = bleeding[3];
    }
    else if (positions[1] === 'right') {
        x = width - bleeding[1] - bbox.width;
    }
    // 再确定y
    if (positions[0] === 'bottom') {
        y = height - bleeding[2] - bbox.height;
    }
    else if (positions[0] === 'top') {
        y = bleeding[0];
    }
    else if (positions[1] === 'center') {
        y = (height - bbox.height) / 2;
    }
    else if (positions[1] === 'top') {
        y = bleeding[0];
    }
    else if (positions[1] === 'bottom') {
        y = height - bleeding[2] - bbox.height;
    }
    //legend.moveTo(x, y);
    legend.setLocation({ x: x, y: y });
    legend.render();
    //legend.draw();
}
//# sourceMappingURL=globalLegend.js.map