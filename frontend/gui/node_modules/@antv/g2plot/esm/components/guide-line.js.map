{"version":3,"file":"guide-line.js","sourceRoot":"","sources":["../../src/components/guide-line.ts"],"names":[],"mappings":"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","sourcesContent":["import { getScale } from '@antv/scale';\nimport { assign, deepMix, mix, each, isArray, isString, isNumber, contains, toArray, clone } from '@antv/util';\nimport { getMean, getMedian } from '../util/math';\n\nexport default class GuideLine {\n  public config: any;\n  private plot: any;\n  private cfg: any;\n  private values: number[];\n\n  constructor(cfg) {\n    assign(this, cfg);\n    this._init();\n  }\n\n  private _init() {\n    const { yField, data } = this.plot.options;\n    const plotData = this.plot.processData(data);\n    if (!isNumber(plotData[yField])) {\n      return;\n    }\n    const defaultStyle = this.getDefaultStyle();\n    const baseConfig: any = {\n      type: 'line',\n      top: true,\n      start: this.cfg.start,\n      end: this.cfg.end,\n    };\n\n    baseConfig.style = deepMix({}, defaultStyle.line.style, this.cfg.lineStyle);\n    baseConfig.text = deepMix({}, defaultStyle.text, this.cfg.text);\n    if (this.cfg.type) {\n      const stateValue = this._getState(this.cfg.type);\n      const scale = this.getYScale();\n      const percent = `${(1.0 - scale.scale(stateValue)) * 100}%`;\n      const start = ['0%', percent];\n      const end = ['100%', percent];\n      this.config = mix(\n        {\n          start,\n          end,\n        },\n        baseConfig\n      );\n    } else {\n      const { start, end } = this.cfg;\n      this.config = clone(baseConfig);\n      const xScale = this.getXScale();\n      const yScale = this.getYScale();\n      const startData = clone(start);\n      const endData = clone(end);\n      each(start, (value, index) => {\n        if (!contains(toArray(start[index]), '%') || isNumber(start[index])) {\n          if (index === 0) {\n            startData[index] = `${xScale.scale(start[0]) * 100}%`;\n          } else {\n            startData[index] = `${(1.0 - yScale.scale(start[1])) * 100}%`;\n          }\n        }\n      });\n      each(end, (value, index) => {\n        if (!contains(toArray(end[index]), '%') || isNumber(end[index])) {\n          if (index === 0) {\n            endData[index] = `${xScale.scale(end[0]) * 100}%`;\n          } else {\n            endData[index] = `${(1.0 - yScale.scale(end[1])) * 100}%`;\n          }\n        }\n      });\n      this.config.start = startData;\n      this.config.end = endData;\n    }\n  }\n\n  private getYScale() {\n    const minValue = this._getState('min');\n    const maxValue = this._getState('max');\n    const Scale = getScale('linear');\n    // 重新组织scale并使用scale的min和max来计算guide point的百分比位置，以避免受nice的影响\n    const scale = new Scale(\n      mix(\n        {},\n        {\n          min: this.plot.type === 'column' ? 0 : minValue,\n          max: maxValue,\n          nice: true,\n          values: this.values,\n        },\n        this.plot.config.scales[this.plot.options.yField]\n      )\n    );\n    return scale;\n  }\n\n  private getXScale() {\n    const values = this.extractXValue();\n    if (isString(values[0])) {\n      const Scale = getScale('cat');\n      const scale = new Scale(\n        mix(\n          {},\n          {\n            values: values,\n          },\n          this.plot.config.scales[this.plot.options.xField]\n        )\n      );\n      return scale;\n    } else {\n      const min = Math.min(...values);\n      const max = Math.max(...values);\n      const Scale = getScale('linear');\n      const scale = new Scale(\n        mix(\n          {},\n          {\n            min: min,\n            max: max,\n            nice: true,\n            values: values,\n          },\n          this.plot.config.scales[this.plot.options.xField]\n        )\n      );\n      return scale;\n    }\n  }\n\n  private _getState(type) {\n    this.values = this._extractValues();\n    if (type === 'median') {\n      return getMedian(this.values);\n    }\n    if (type === 'mean') {\n      return getMean(this.values);\n    }\n    if (type === 'max') {\n      return Math.max(...this.values);\n    }\n    if (type === 'min') {\n      return Math.min(...this.values);\n    }\n  }\n\n  private _extractValues() {\n    const props = this.plot.options;\n    const field = props.yField;\n    const values = [];\n    const data = this.plot.processData(props.data);\n    each(data, (d) => {\n      if (isArray(d[field])) {\n        values.push(...d[field]);\n      } else {\n        values.push(d[field]);\n      }\n    });\n    return values;\n  }\n\n  private extractXValue() {\n    const props = this.plot.options;\n    const field = props.xField;\n    const values = [];\n    const data = this.plot.processData(props.data);\n    each(data, (d) => {\n      if (isArray(d[field])) {\n        values.push(...d[field]);\n      } else {\n        values.push(d[field]);\n      }\n    });\n    return values;\n  }\n\n  private getDefaultStyle() {\n    this.getDefaultTextAlign();\n    return {\n      line: {\n        style: {\n          lineWidth: 2,\n          stroke: '#333333',\n          opacity: 0.7,\n          lineDash: [0, 0],\n        },\n      },\n      text: {\n        offsetY: -5,\n        style: {\n          fontSize: 14,\n          stroke: 'white',\n          lineWidth: 2,\n          textAlign: this.getDefaultTextAlign(),\n        },\n      },\n    };\n  }\n\n  private getDefaultTextAlign() {\n    const textConfig = this.cfg.text;\n    if (textConfig) {\n      if (!textConfig.position || textConfig.position === 'start') {\n        return 'left';\n      }\n      if (textConfig.position === 'center') {\n        return 'center';\n      }\n      if (textConfig.position === 'end') {\n        return 'right';\n      }\n    }\n  }\n}\n"]}