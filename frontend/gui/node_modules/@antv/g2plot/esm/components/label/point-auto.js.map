{"version":3,"file":"point-auto.js","sourceRoot":"","sources":["../../../src/components/label/point-auto.ts"],"names":[],"mappings":"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","sourcesContent":["import { groupBy, each, keys } from '@antv/util';\nimport { registerLabelComponent } from './base';\nimport PointLabel from './point';\nimport { Geometry, IShape, MappingDatum, FIELD_ORIGIN, ORIGIN } from '../../dependents';\nimport { Label } from '../../interface/config';\nimport { checkOriginEqual, moveInPanel, checkShapeOverlap } from '../../util/view';\nimport BBox from '../../util/bbox';\n\nexport default class PointAutoLabel<L extends Label = Label> extends PointLabel<L> {\n  protected layoutLabels(geometry: Geometry, labels: IShape[]): void {\n    const dones: IShape[] = [];\n    const panel = BBox.fromBBoxObject(this.getCoordinateBBox());\n    const [xField, yField] = geometry.getXYFields();\n    const groupedMap: Record<string, IShape[]> = groupBy(labels, (label) => label.get(ORIGIN)[FIELD_ORIGIN][xField]);\n    const offset = labels[0]?.get('offset');\n\n    each(keys(groupedMap).reverse(), (xValue: string) => {\n      const group = this.sortLabels(geometry, groupedMap[xValue]);\n      while (group.length) {\n        const label = group.shift();\n        if (\n          checkOriginEqual(\n            label,\n            dones,\n            (datumLeft: MappingDatum, datumRight: MappingDatum) =>\n              datumLeft._origin[xField] === datumRight._origin[xField] &&\n              datumLeft._origin[yField] === datumRight._origin[yField]\n          )\n        ) {\n          label.set('visible', false);\n          continue;\n        }\n        moveInPanel(label, panel);\n        const upFail = checkShapeOverlap(label, dones);\n        let downFail: boolean;\n        if (upFail) {\n          label.attr('y', label.attr('y') + 2 * offset);\n          moveInPanel(label, panel);\n          downFail = checkShapeOverlap(label, dones);\n        }\n        if (downFail) {\n          label.set('visible', false);\n          continue;\n        }\n        dones.push(label);\n      }\n    });\n  }\n\n  /** 对 Labels 排序，排序顺序决定自动布局优先级 */\n  protected sortLabels(geometry: Geometry, labels: IShape[]): IShape[] {\n    const yField = geometry.getXYFields()[1];\n    const sorted: IShape[] = [];\n\n    // 顺序：第一个、最后一个、再其他\n    labels.sort((a, b) => {\n      return b.get(ORIGIN)[FIELD_ORIGIN][yField] - a.get(ORIGIN)[FIELD_ORIGIN][yField];\n    });\n    if (labels.length > 0) {\n      sorted.push(labels.shift());\n    }\n    if (labels.length > 0) {\n      sorted.push(labels.pop());\n    }\n    sorted.push(...labels);\n\n    return sorted;\n  }\n}\n\nregisterLabelComponent('point-auto', PointAutoLabel);\n"]}