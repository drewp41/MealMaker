{"version":3,"file":"parser.js","sourceRoot":"","sources":["../../../src/components/label/parser.ts"],"names":[],"mappings":"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","sourcesContent":["import { assign, isFunction, deepMix, get, each, has } from '@antv/util';\nimport { Label } from '../../interface/config';\nimport { combineFormatter, getNoopFormatter, getPrecisionFormatter, getSuffixFormatter } from '../../util/formatter';\nimport { LooseMap } from '../../interface/types';\n\nexport default class LabelParser {\n  public config: LooseMap = {};\n  protected plot: any;\n  protected originConfig: Label;\n\n  constructor(cfg) {\n    const { plot, ...rest } = cfg;\n    this.plot = plot;\n    this.originConfig = rest;\n    this.init(cfg);\n  }\n\n  public getConfig() {\n    return this.config;\n  }\n\n  protected init(cfg) {\n    assign(this.config, cfg);\n    this.config.callback = (val) => {\n      return this.parseCallBack(val);\n    };\n  }\n\n  protected parseCallBack(val) {\n    const labelProps = this.originConfig;\n    const theme = this.plot.getPlotTheme();\n    const config: LooseMap = { ...labelProps };\n    this.parseOffset(labelProps, config);\n    if (labelProps.position) {\n      if (isFunction(labelProps.position)) {\n        config.position = labelProps.position(val);\n      } else {\n        config.position = labelProps.position;\n      }\n    }\n    this.parseFormatter(config);\n    if (labelProps.style) {\n      if (isFunction(labelProps.style)) {\n        config.textStyle = labelProps.style(val);\n      } else {\n        config.textStyle = labelProps.style;\n      }\n    }\n    config.textStyle = deepMix({}, get(theme, 'label.style'), config.textStyle);\n    if (labelProps.autoRotate) {\n      config.autoRotate = labelProps.autoRotate;\n    }\n\n    return config;\n  }\n\n  protected parseOffset(props, config) {\n    const mapper = ['offset', 'offsetX', 'offsetY'];\n    let count = 0;\n    each(mapper, (m) => {\n      if (has(props, m)) {\n        config[m] = props[m];\n        count++;\n      }\n    });\n    // 如用户没有设置offset，而label position又为middle时，则默认设置offset为0\n    if (count === 0 && get(props, 'position') === 'middle') {\n      config.offset = 0;\n    }\n  }\n\n  protected parseFormatter(config: LooseMap) {\n    const labelProps = this.originConfig;\n    config.content = (data, index) => {\n      // @ts-ignore\n      const text = data[labelProps.fields[0]];\n      return combineFormatter(\n        getNoopFormatter(),\n        getPrecisionFormatter(labelProps.precision),\n        getSuffixFormatter(labelProps.suffix),\n        (labelProps.formatter as (text: string, item: any, idx: number) => string)\n          ? labelProps.formatter\n          : getNoopFormatter()\n      )(text, data, index);\n    };\n  }\n}\n"]}