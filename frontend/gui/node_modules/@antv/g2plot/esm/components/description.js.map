{"version":3,"file":"description.js","sourceRoot":"","sources":["../../src/components/description.ts"],"names":[],"mappings":"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","sourcesContent":["import { IGroup, IShape } from '../dependents';\nimport { assign, isArray, each, mix } from '@antv/util';\nimport { breakText } from '../util/common';\nimport ViewLayer from '../base/view-layer';\nimport BBox from '../util/bbox';\n\ninterface TextConfig {\n  leftMargin: number;\n  topMargin: number;\n  rightMargin: number;\n  text: string;\n  style: any;\n  wrapperWidth: number;\n  container: IGroup;\n  theme: any;\n  index: number;\n  plot: ViewLayer;\n  name: string;\n  alignTo?: 'left' | 'right' | 'middle';\n}\n\n/**\n * 图表的文字描述，一般用于生成图表的标题和副标题\n */\n\nexport default class TextDescription {\n  public shape: IShape;\n  public position: string = 'top';\n  public name: string;\n  public destroyed: boolean = false;\n  private container: IGroup;\n  private topMargin: number;\n  private leftMargin: number;\n  private rightMargin: number;\n  private wrapperWidth: number;\n  private alignTo: string;\n  private text: string;\n  private style: any;\n  private index: number;\n  private plot: ViewLayer | any;\n\n  constructor(cfg: TextConfig) {\n    assign(this as any, cfg);\n    this.init();\n  }\n\n  public getBBox(): BBox | null {\n    if (this.shape) {\n      // @ts-ignore\n      const bbox = this.shape.getBBox();\n      if (this.index === 0) {\n        return BBox.fromBBoxObject(bbox);\n      }\n      const padding = this.plot.theme.description.padding;\n      if (isArray(padding)) {\n        each(padding, (it, index) => {\n          if (typeof padding[index] === 'function') {\n            padding[index] = padding[index](this.plot.options.legend.position);\n          }\n        });\n      }\n      return new BBox(bbox.maxX, bbox.minY, bbox.width, bbox.height);\n    }\n    return null;\n  }\n\n  public clear() {\n    if (this.shape) {\n      // @ts-ignore\n      this.shape.attr('text', '');\n    }\n  }\n\n  public destroy() {\n    if (this.shape) {\n      this.shape.remove();\n    }\n    this.destroyed = true;\n  }\n\n  private init() {\n    const content = this.textWrapper();\n    const { x, y } = this.getPosition();\n    this.shape = this.container.addShape('text', {\n      attrs: mix(\n        {\n          x,\n          y,\n          text: content,\n        },\n        this.style,\n        {\n          textAlign: this.getTextAlign(),\n        }\n      ),\n    }) as IShape;\n    // @ts-ignore\n    this.shape.name = this.name;\n  }\n\n  protected getPosition() {\n    if (this.alignTo === 'left') {\n      return { x: this.leftMargin, y: this.topMargin };\n    } else if (this.alignTo === 'middle') {\n      return { x: this.leftMargin + this.wrapperWidth / 2, y: this.topMargin };\n    } else {\n      return { x: this.rightMargin, y: this.topMargin };\n    }\n  }\n\n  protected getTextAlign() {\n    if (this.alignTo === 'left') {\n      return 'left';\n    } else if (this.alignTo === 'middle') {\n      return 'center';\n    } else {\n      return 'right';\n    }\n  }\n\n  /**\n   * 当text过长时，默认换行\n   * 1. 注意初始text带换行符的场景\n   */\n  private textWrapper() {\n    const width = this.wrapperWidth;\n    const style = this.style;\n    const textContent: string = this.text;\n    const tShape = this.container.addShape('text', {\n      attrs: {\n        text: '',\n        x: 0,\n        y: 0,\n        ...style,\n      },\n    });\n    const textArr = textContent.split('\\n');\n    const wrappedTextArr = textArr.map((wrappedText) => {\n      let text = '';\n      const chars = wrappedText.split('');\n      const breakIndex: number[] = [];\n      for (let i = 0; i < chars.length; i++) {\n        const item = chars[i];\n        tShape.attr('text', (text += item));\n        const currentWidth = tShape.getBBox().width - 1;\n        if (currentWidth > width) {\n          // 如果是第一个字符就大于宽度不做任何换行处理\n          if (i === 0) {\n            break;\n          }\n          breakIndex.push(i);\n          text = '';\n        }\n      }\n\n      return breakText(chars, breakIndex);\n    });\n\n    tShape.remove();\n    return wrappedTextArr.join('\\n');\n  }\n}\n"]}