import { LayerConfig } from '../../base/layer';
import ViewLayer, { ViewConfig } from '../../base/view-layer';
import { ElementOption, ICatAxis, ITimeAxis, IValueAxis } from '../../interface/config';
import './theme';
import { PointStyle, LineStyle } from '../line/layer';
interface AreaStyle {
    opacity?: number;
    lineDash?: number[];
    strokeStyle?: string;
    lineWidth?: number;
    stroke?: string;
}
export interface AreaViewConfig extends ViewConfig {
    areaStyle?: AreaStyle | ((...args: any) => AreaStyle);
    seriesField?: string;
    xAxis?: ICatAxis | ITimeAxis;
    yAxis?: IValueAxis;
    line?: {
        visible?: boolean;
        color?: string;
        size?: number;
        style?: LineStyle;
    };
    point?: {
        visible?: boolean;
        color?: string;
        size?: number;
        shape?: string;
        style?: PointStyle;
    };
    smooth?: boolean;
}
export interface AreaLayerConfig extends AreaViewConfig, LayerConfig {
}
export default class AreaLayer<T extends AreaLayerConfig = AreaLayerConfig> extends ViewLayer<T> {
    static getDefaultOptions(): any;
    line: any;
    point: any;
    area: any;
    type: string;
    beforeInit(): void;
    afterRender(): void;
    protected geometryParser(dim: any, type: any): any;
    protected scale(): void;
    protected coord(): void;
    protected addGeometry(): void;
    protected adjustArea(area: ElementOption): void;
    protected adjustLine(line: ElementOption): void;
    protected adjustPoint(point: ElementOption): void;
    protected addLine(): void;
    protected addPoint(): void;
    protected animation(): void;
    protected label(): void;
    protected geometryTooltip(): void;
    protected parseEvents(eventParser: any): void;
    private applyResponsive;
}
export {};
