{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/calendar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, isNil, map, get } from '@antv/util';\nimport fecha from 'fecha';\nimport { DataItem, LayerConfig, ViewConfig } from '../..';\nimport ViewLayer from '../../base/view-layer';\nimport { DAY_FIELD, FORMATTER, MONTHS, WEEK_FIELD, WEEKS } from './constant';\nimport { generateCalendarData, getMonthCenterWeek } from './util';\nimport { registerPlotType } from '../../base/global';\nimport { getDateRange } from '../../util/date';\nimport { getComponent } from '../../components/factory';\nimport * as EventParser from './event';\n\n/** 日历图配置定义 */\nexport interface CalendarViewConfig extends ViewConfig {\n  /** 字段信息 */\n  readonly dateField: string; // YYYY-MM-DD\n  /** 映射的颜色值字段 */\n  readonly valueField: string;\n  /** 日历图的起止时间：[2019-10, 2020-03] */\n  readonly dateRange?: string[];\n  // 映射的颜色色板\n  readonly colors?: string[] | string;\n  // 对应的月份枚举\n  readonly months?: string[];\n  // 对应的星期枚举值\n  readonly weeks?: string[];\n}\n\ninterface CalendarLayerConfig extends CalendarViewConfig, LayerConfig {}\n\n/**\n * 日历图\n */\nexport default class CalendarLayer extends ViewLayer<CalendarLayerConfig> {\n  public type: string = 'calendar';\n\n  public static getDefaultOptions(): Partial<CalendarLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        line: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: false,\n        },\n      },\n      yAxis: {\n        line: {\n          visible: false,\n        },\n        grid: {\n          visible: false,\n        },\n        tickLine: {\n          visible: false,\n        },\n        label: {\n          visible: true,\n          autoRotate: false,\n          autoHide: false,\n        },\n      },\n      legend: { visible: false },\n      meta: {\n        [DAY_FIELD]: {\n          type: 'cat',\n          alias: 'Day',\n          values: [0, 1, 2, 3, 4, 5, 6],\n        },\n        [WEEK_FIELD]: {\n          type: 'cat',\n          alias: 'Month',\n        },\n      },\n      tooltip: {\n        visible: true,\n        showTitle: true,\n        showCrosshairs: false,\n        showMarkers: false,\n        title: 'date',\n      },\n    });\n  }\n\n  /**\n   * 复写父类的数据处理类，主要完成：\n   * 1. 生成 polygon 的 x y field（虚拟的，无需用户传入）\n   *\n   * @param data\n   */\n  protected processData(data?: DataItem[]): DataItem[] | undefined {\n    const { dateField } = this.options;\n    let { dateRange } = this.options;\n\n    // 给与默认值是当前这一年\n    if (isNil(dateRange)) {\n      const dates = map(data, (datum: DataItem) => fecha.parse(`${datum[dateField]}`, FORMATTER));\n      dateRange = getDateRange(dates);\n    }\n\n    return generateCalendarData(data, dateRange, dateField);\n  }\n\n  protected addGeometry(): void {\n    const { valueField, colors, tooltip } = this.options;\n    const polygonConfig: any = {\n      type: 'polygon',\n      position: {\n        fields: [WEEK_FIELD, DAY_FIELD],\n      },\n      shape: {\n        values: ['calendar-polygon'],\n      },\n      color: {\n        fields: [valueField],\n        values: colors,\n      },\n      label: this.extractLabel(),\n    };\n\n    if (tooltip && (tooltip.fields || tooltip.formatter)) {\n      this.geometryTooltip(polygonConfig);\n    }\n\n    this.setConfig('geometry', polygonConfig);\n  }\n\n  protected geometryTooltip(geomConfig) {\n    geomConfig.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      geomConfig.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      geomConfig.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        geomConfig.tooltip.fields = [WEEK_FIELD, DAY_FIELD];\n      }\n    }\n  }\n\n  private extractLabel() {\n    const props = this.options;\n    const label = props.label;\n    if (label && label.visible === false) {\n      return false;\n    }\n    const { valueField } = this.options;\n\n    return getComponent('label', {\n      plot: this,\n      fields: [valueField],\n      position: 'top',\n      offset: 0,\n      ...label,\n    });\n  }\n\n  /**\n   * 写入坐标系配置，默认增加镜像\n   */\n  protected coord(): void {\n    // 默认做镜像处理\n    const coordinateConfig = {\n      type: 'rect',\n      cfg: {},\n      actions: [['reflect', 'y']],\n    } as any;\n    this.setConfig('coordinate', coordinateConfig);\n  }\n\n  /**\n   * 无需 geometry parser，直接使用 polygon 即可\n   */\n  protected geometryParser(): string {\n    return '';\n  }\n\n  protected axis(): void {\n    const xAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'x',\n    });\n    const yAxis_parser = getComponent('axis', {\n      plot: this,\n      dim: 'y',\n    });\n    const axesConfig = {};\n    axesConfig[WEEK_FIELD] = xAxis_parser;\n    axesConfig[DAY_FIELD] = yAxis_parser;\n    /** 存储坐标轴配置项到config */\n    this.setConfig('axes', axesConfig);\n  }\n\n  protected scale(): void {\n    super.scale();\n\n    const monthWeek = getMonthCenterWeek(this.options.dateRange);\n\n    // 拿出 scale 二次加工，主要是配置 x y 中的标题显示\n    const scales = this.config.scales;\n    const { weeks = WEEKS, months = MONTHS } = this.options;\n\n    const x = scales[WEEK_FIELD];\n    const y = scales[DAY_FIELD];\n    // 1. 设置 formatter\n    x.formatter = (v) => {\n      const m = monthWeek[v];\n      return m !== undefined ? months[m] : '';\n    };\n\n    y.formatter = (v) => weeks[v] || '';\n\n    // 2. 设置 alias\n    const { xAxis, yAxis } = this.options;\n    x.alias = get(xAxis, ['title', 'text'], x.alias);\n    y.alias = get(yAxis, ['title', 'text'], y.alias);\n\n    this.setConfig('scales', scales);\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n}\n\n// 注册到池子中\nregisterPlotType('calendar', CalendarLayer);\n"]}