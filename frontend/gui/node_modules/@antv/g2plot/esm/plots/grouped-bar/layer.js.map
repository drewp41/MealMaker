{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/grouped-bar/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, valuesOfKey, clone } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { ElementOption } from '../../interface/config';\nimport BaseBarLayer from '../bar/layer';\nimport { BarViewConfig } from '../bar/interface';\nimport './theme';\n\nexport interface GroupedBarViewConfig extends BarViewConfig {\n  groupField: string;\n}\n\nexport interface GroupedBarLayerConfig extends GroupedBarViewConfig, LayerConfig {}\n\nexport default class GroupedBarLayer extends BaseBarLayer<GroupedBarLayerConfig> {\n  public static getDefaultOptions(): Partial<GroupedBarViewConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        grid: {\n          visible: true,\n        },\n      },\n      yAxis: {\n        visible: true,\n        title: {\n          visible: false,\n        },\n      },\n      label: {\n        visible: true,\n        position: 'right',\n        adjustColor: true,\n      },\n      legend: {\n        visible: true,\n        position: 'right-top',\n        offsetY: 0,\n      },\n    });\n  }\n\n  public type: string = 'groupedBar';\n\n  public afterRender() {\n    super.afterRender();\n    const names = valuesOfKey(this.options.data, this.options.groupField);\n    this.view.on('tooltip:change', (e) => {\n      const { items } = e;\n      const origin_items = clone(items);\n      for (let i = 0; i < names.length; i++) {\n        const name = names[i];\n        for (let j = 0; j < origin_items.length; j++) {\n          const item = origin_items[j];\n          if (item.name === name) {\n            e.items[i] = item;\n          }\n        }\n      }\n    });\n  }\n\n  protected scale() {\n    const defaultMeta = {};\n    defaultMeta[this.options.groupField] = {\n      values: valuesOfKey(this.options.data, this.options.groupField),\n    };\n    if (!this.options.meta) {\n      this.options.meta = defaultMeta;\n    } else {\n      this.options.meta = deepMix({}, this.options.meta, defaultMeta);\n    }\n    super.scale();\n  }\n\n  protected adjustBar(bar: ElementOption) {\n    bar.adjust = [\n      {\n        type: 'dodge',\n        marginRatio: 0.1,\n      },\n    ];\n  }\n\n  protected geometryTooltip() {\n    this.bar.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.bar.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.bar.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.bar.tooltip.fields = [this.options.xField, this.options.yField, this.options.groupField];\n      }\n    }\n  }\n}\n\nregisterPlotType('groupedBar', GroupedBarLayer);\n"]}