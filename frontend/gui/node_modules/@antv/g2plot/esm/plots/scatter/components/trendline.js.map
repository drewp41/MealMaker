{"version":3,"file":"trendline.js","sourceRoot":"","sources":["../../../../src/plots/scatter/components/trendline.ts"],"names":[],"mappings":"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","sourcesContent":["import { each, deepMix, minBy, maxBy } from '@antv/util';\nimport { View, IGroup, IShape } from '../../../dependents';\nimport { getScale } from '@antv/scale';\nimport {\n  regressionLinear,\n  regressionExp,\n  regressionLoess,\n  regressionLog,\n  regressionPoly,\n  regressionPow,\n  regressionQuad,\n} from 'd3-regression';\n\nimport { getSplinePath } from '../../../util/path';\n\nconst REGRESSION_MAP = {\n  exp: regressionExp,\n  linear: regressionLinear,\n  loess: regressionLoess,\n  log: regressionLog,\n  poly: regressionPoly,\n  pow: regressionPow,\n  quad: regressionQuad,\n};\n\nexport interface TrendlineConfig {\n  visible?: boolean;\n  type?: string;\n  style?: any;\n  showConfidence?: boolean;\n  confidenceStyle?: any;\n}\n\nexport interface ITrendline extends TrendlineConfig {\n  view: View;\n  plotOptions: any;\n}\n\nfunction se95(p, n) {\n  return Math.sqrt((p * (1 - p)) / n) * 1.96;\n}\n\nexport default class TrendLine {\n  public data: { trendlineData: any[]; confidenceData: any[] };\n  protected options: any;\n  protected view: View;\n  protected container: IGroup;\n  protected shape: IShape;\n\n  constructor(cfg: ITrendline) {\n    const defaultOptions = {\n      type: 'linear',\n      style: {\n        stroke: '#9ba29a',\n        lineWidth: 2,\n        opacity: 0.5,\n        lineJoin: 'round',\n        lineCap: 'round',\n      },\n      showConfidence: false,\n      confidenceStyle: {\n        fill: '#ccc',\n        opacity: 0.1,\n      },\n    };\n    this.options = deepMix({}, defaultOptions, cfg);\n    this.view = this.options.view;\n    this.init();\n  }\n\n  public init() {\n    // 处理数据\n    const { xField, yField, data } = this.options.plotOptions;\n    const reg = REGRESSION_MAP[this.options.type]()\n      .x((d) => d[xField])\n      .y((d) => d[yField]);\n    this.data = this.processData(reg(data));\n    // 创建container\n    this.container = this.view.backgroundGroup.addGroup();\n  }\n\n  public render() {\n    const xscale_view = this.view.getScaleByField(this.options.plotOptions.xField);\n    const yscale_view = this.view.getScaleByField(this.options.plotOptions.yField);\n    const coord = this.view.getCoordinate();\n    const { trendlineData } = this.data;\n    // 创建图形绘制的scale\n    const LinearScale = getScale('linear');\n    const xRange = this.adjustScale(xscale_view, trendlineData, 'x');\n    const xScale = new LinearScale({\n      min: xRange.min,\n      max: xRange.max,\n      // nice: xscale_view.nice,\n    });\n    const yRange = this.adjustScale(yscale_view, trendlineData, 'y');\n    const yScale = new LinearScale({\n      min: yRange.min,\n      max: yRange.max,\n      // nice: yscale_view.nice,\n    });\n    // 绘制置信区间曲线\n    if (this.options.showConfidence) {\n      const confidencePath = this.getConfidencePath(xScale, yScale, coord);\n      this.container.addShape('path', {\n        attrs: {\n          path: confidencePath,\n          ...this.options.confidenceStyle,\n        },\n        name: 'confidence',\n      });\n    }\n    // 绘制trendline\n    const points = this.getTrendlinePoints(xScale, yScale, coord);\n    const constraint = [\n      [0, 0],\n      [1, 1],\n    ];\n    const path = getSplinePath(points, false, constraint);\n    this.shape = this.container.addShape('path', {\n      attrs: {\n        path,\n        ...this.options.style,\n      },\n      name: 'trendline',\n    });\n  }\n\n  public clear() {\n    if (this.container) {\n      this.container.clear();\n    }\n  }\n\n  public destroy() {\n    if (this.container) {\n      this.container.destroy();\n    }\n  }\n\n  private processData(data) {\n    const trendline = [];\n    const confidence = [];\n    each(data, (d) => {\n      trendline.push({ x: d[0], y: d[1] });\n      const conf = se95(data.rSquared, d[1]);\n      confidence.push({ x: d[0], y0: d[1] - conf, y1: d[1] + conf });\n    });\n    return { trendlineData: trendline, confidenceData: confidence };\n  }\n\n  private getTrendlinePoints(xScale, yScale, coord) {\n    const points = [];\n    each(this.data.trendlineData, (d) => {\n      const xRatio = xScale.scale(d.x);\n      const yRatio = yScale.scale(d.y);\n      const x = coord.start.x + coord.width * xRatio;\n      const y = coord.start.y - coord.height * yRatio;\n      points.push({ x, y });\n    });\n    return points;\n  }\n\n  private getConfidencePath(xScale, yScale, coord) {\n    const upperPoints = [];\n    const lowerPoints = [];\n    const path = [];\n    each(this.data.confidenceData, (d) => {\n      const xRatio = xScale.scale(d.x);\n      const y0Ratio = yScale.scale(d.y0);\n      const y1Ratio = yScale.scale(d.y1);\n      const x = coord.start.x + coord.width * xRatio;\n      const y0 = coord.start.y - coord.height * y0Ratio;\n      const y1 = coord.start.y - coord.height * y1Ratio;\n      upperPoints.push({ x, y: y0 });\n      lowerPoints.push({ x, y: y1 });\n    });\n    for (let i = 0; i < upperPoints.length; i++) {\n      const flag = i === 0 ? 'M' : 'L';\n      const p = upperPoints[i];\n      if (!isNaN(p.x) && !isNaN(p.y)) {\n        path.push([flag, p.x, p.y]);\n      }\n    }\n    for (let j = lowerPoints.length - 1; j > 0; j--) {\n      const p = lowerPoints[j];\n      if (!isNaN(p.x) && !isNaN(p.y)) {\n        path.push(['L', p.x, p.y]);\n      }\n    }\n    return path;\n  }\n\n  private adjustScale(viewScale, trendlineData, dim) {\n    // 处理用户自行配置min max的情况\n    const { min, max } = viewScale;\n    const { data, xField, yField } = this.options.plotOptions;\n    const field = dim === 'x' ? xField : yField;\n    const dataMin = minBy(data, field)[field];\n    const dataMax = maxBy(data, field)[field];\n    const minRatio = (min - dataMin) / (dataMax - dataMin);\n    const maxRatio = (max - dataMax) / (dataMax - dataMin);\n    const trendMin = minBy(trendlineData, dim)[dim];\n    const trendMax = maxBy(trendlineData, dim)[dim];\n    return {\n      min: trendMin + minRatio * (trendMax - trendMin),\n      max: trendMax + maxRatio * (trendMax - trendMin),\n    };\n  }\n}\n"]}