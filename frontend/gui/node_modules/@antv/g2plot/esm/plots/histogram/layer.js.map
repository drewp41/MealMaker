{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/histogram/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { clone, sortBy, valuesOfKey, getRange, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { sturges } from '../../util/math';\nimport Column from '../column/layer';\nimport { ColumnViewConfig } from '../column/interface';\nimport { DataItem } from '../../interface/config';\n\nexport interface HistogramViewConfig extends ColumnViewConfig {\n  binField: string;\n  binWidth?: number;\n  binNumber?: number;\n}\n\nexport interface HistogramLayerConfig extends HistogramViewConfig, LayerConfig {}\n\nexport default class HistogramLayer extends Column<HistogramLayerConfig> {\n  public type: string = 'histogram';\n\n  public init() {\n    this.options.xField = 'range';\n    this.options.yField = 'count';\n    super.init();\n  }\n\n  protected processData(originData?: DataItem[]) {\n    const { binField, binWidth, binNumber } = this.options;\n    const originData_copy = clone(originData);\n    // 根据binField value对源数据进行排序\n    sortBy(originData_copy, binField);\n    // 获取源数据binField values的range\n    const values = valuesOfKey(originData_copy, binField);\n    const range = getRange(values);\n    const rangeWidth = range.max - range.min;\n    // 计算分箱，直方图分箱的计算基于binWidth，如配置了binNumber则将其转为binWidth进行计算\n    let _binWidth = binWidth;\n    if (!binWidth && binNumber) {\n      _binWidth = rangeWidth / binNumber;\n    }\n    // 当binWidth和binNumber都没有指定的情况，采用Sturges formula自动生成binWidth\n    if (!binWidth && !binNumber) {\n      const _defaultBinNumber = sturges(values);\n      _binWidth = rangeWidth / _defaultBinNumber;\n    }\n    const bins = {};\n    each(originData_copy, (data) => {\n      const value = data[binField];\n      const bin = this.getBin(value, _binWidth);\n      const binName = `${bin[0]}-${bin[1]}`;\n      if (!hasKey(bins, binName)) {\n        bins[binName] = { name: binName, range: bin, count: 0, data: [] };\n      }\n      bins[binName].data.push(data);\n      bins[binName].count += 1;\n    });\n    // 将分箱数据转换为plotData\n    const plotData = [];\n    each(bins, (bin) => {\n      plotData.push(bin);\n    });\n    return plotData;\n  }\n\n  protected scale() {\n    super.scale();\n    // fixme: 类型定义\n    const range = this.config.scales.range as any;\n    range.nice = false;\n    range.type = 'linear';\n  }\n\n  private getBin(value, binWidth) {\n    const index = Math.floor(value / binWidth);\n    return [binWidth * index, binWidth * (index + 1)];\n  }\n}\n\nregisterPlotType('histogram', HistogramLayer);\n"]}