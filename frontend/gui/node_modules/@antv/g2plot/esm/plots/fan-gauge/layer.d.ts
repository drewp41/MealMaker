import { LayerConfig } from '../../base/layer';
import GaugeLayer from '../gauge/layer';
import { GaugeViewConfig } from '../gauge/options';
export interface FanGaugeViewConfig extends GaugeViewConfig {
    stackField: string;
    connectedArea?: any;
}
export interface FanGaugeLayerConfig extends FanGaugeViewConfig, LayerConfig {
}
export default class FanGaugeLayer<T extends FanGaugeLayerConfig = FanGaugeLayerConfig> extends GaugeLayer<T> {
    static getDefaultOptions(): any;
    type: string;
    protected getCustomStyle(): {
        ringStyle: {
            background: string;
            axis: {
                amount: number;
                offset: number;
                length: number;
                thickness: number;
                color: string;
            };
            color: any;
            thickness: number;
            radius: number;
            angle: number;
            textPosition: string;
            bottomRatio?: undefined;
        };
        pointerStyle: {
            radius: number;
            color: string;
            circleColorTop: string;
            circleColorBottom: string;
            thickness: number;
        };
    } | {
        ringStyle: {
            color: any;
            background: string;
            thickness: number;
            radius: number;
            angle: number;
            textPosition: string;
            bottomRatio: number;
            axis: {
                amount: number;
                offset: number;
                length: number;
                thickness: number;
                color: string;
            };
        };
        pointerStyle: {
            radius: number;
            color: string;
            circleColorTop: string;
            circleColorBottom: string;
            thickness: number;
        };
    };
    protected axis(): void;
    protected annotation(): void;
    protected renderSideText(): {
        type: string;
        top: boolean;
        position: string[];
        content: any;
        style: {
            fill: any;
            fontSize: any;
            textAlign: string;
        };
        offsetX: number;
        offsetY: number;
    }[];
}
