import { __extends } from "tslib";
import { deepMix } from '@antv/util';
import { registerPlotType } from '../../base/global';
import GaugeLayer from '../gauge/layer';
import { getOptions } from '../gauge/geometry/shape/options';
import { getGlobalTheme } from '../../theme';
var FanGaugeLayer = /** @class */ (function (_super) {
    __extends(FanGaugeLayer, _super);
    function FanGaugeLayer() {
        var _this = _super !== null && _super.apply(this, arguments) || this;
        _this.type = 'fanGauge';
        return _this;
    }
    FanGaugeLayer.getDefaultOptions = function () {
        return deepMix({}, _super.getDefaultOptions.call(this), {
            legend: {
                visible: true,
                position: 'right-top',
            },
            label: {
                visible: false,
                position: 'middle',
                offset: 0,
                adjustColor: true,
            },
            connectedArea: {
                visible: false,
                triggerOn: 'mouseenter',
            },
        });
    };
    FanGaugeLayer.prototype.getCustomStyle = function () {
        var _a = this.options, theme = _a.theme, styleMix = _a.styleMix;
        var colors = styleMix.colors || getGlobalTheme().colors;
        return getOptions('fan', theme, colors);
    };
    FanGaugeLayer.prototype.axis = function () {
        var axesConfig = {
            value: false,
            1: false,
        };
        this.setConfig('axes', axesConfig);
    };
    FanGaugeLayer.prototype.annotation = function () {
        var _a = this.options, statistic = _a.statistic, style = _a.style;
        var annotationConfigs = [];
        // @ts-ignore
        if (statistic && statistic.visible) {
            var statistics = this.renderStatistic();
            annotationConfigs.push(statistics);
        }
        var siderTexts = this.renderSideText();
        var allAnnotations = annotationConfigs.concat(siderTexts);
        this.setConfig('annotations', allAnnotations);
    };
    FanGaugeLayer.prototype.renderSideText = function () {
        var _a = this.options, max = _a.max, min = _a.min, styleMix = _a.styleMix, format = _a.format, style = _a.style;
        var ringStyle = this.getCustomStyle().ringStyle;
        var OFFSET_Y = 12;
        return [min, max].map(function (value, index) {
            return {
                type: 'text',
                top: true,
                position: ['50%', '50%'],
                content: format(value),
                style: {
                    fill: styleMix.labelColor,
                    fontSize: styleMix.tickLabelSize,
                    textAlign: 'center',
                },
                offsetX: !index ? -ringStyle.thickness : ringStyle.thickness,
                offsetY: OFFSET_Y,
            };
        });
    };
    return FanGaugeLayer;
}(GaugeLayer));
export default FanGaugeLayer;
registerPlotType('fanGauge', FanGaugeLayer);
//# sourceMappingURL=layer.js.map