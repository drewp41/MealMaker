{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/density/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { getScale } from '@antv/scale';\nimport { clone, deepMix, sortBy, valuesOfKey, getRange, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { sturges } from '../../util/math';\nimport Area from '../area/layer';\nimport { AreaViewConfig } from '../area/interface';\nimport { DataItem } from '../../interface/config';\nimport { LooseMap } from '../../interface/types';\n\nexport interface DensityViewConfig extends AreaViewConfig {\n  binField: string;\n  binWidth?: number;\n  binNumber?: number;\n  kernel?: 'uniform' | 'triangle' | 'epanechnikov' | 'quartic' | 'triweight' | 'gaussian' | 'cosinus';\n}\n\nexport interface DensityLayerConfig extends DensityViewConfig, LayerConfig {}\n\nconst kernels = {\n  epanechnikov: (dist: number) => {\n    return Math.abs(dist) <= 1 ? 0.75 * (1 - dist * dist) : 0;\n  },\n  gaussian: (dist: number) => {\n    return (1 / Math.sqrt(Math.PI * 2)) * Math.exp(-0.5 * Math.pow(dist, 2));\n  },\n  uniform: (dist: number) => {\n    return Math.abs(dist) <= 1 ? 0.5 : 0;\n  },\n  triangle: (dist: number) => {\n    return Math.abs(dist) <= 1 ? 1 - Math.abs(dist) : 0;\n  },\n  quartic: (dist: number) => {\n    const v = 1 - dist * dist;\n    return Math.abs(dist) <= 1 ? (15 / 16) * v * v : 0;\n  },\n  triweight: (dist: number) => {\n    const v = 1 - dist * dist;\n    return Math.abs(dist) <= 1 ? (15 / 16) * Math.pow(v, 3) : 0;\n  },\n  cosinus: (dist: number) => {\n    const v = (Math.PI / 4) * Math.cos(0.5 * Math.PI * dist);\n    return Math.abs(dist) <= 1 ? v : 0;\n  },\n};\n\nexport default class DensityLayer<T extends DensityLayerConfig = DensityLayerConfig> extends Area<T> {\n  public type: string = 'density';\n\n  public init() {\n    const originXAxisConfig = this.options.xAxis ? clone(this.options.xAxis) : {};\n    this.options.xField = 'value';\n    this.options.yField = 'density';\n    this.options.xAxis = deepMix({}, originXAxisConfig, { type: 'linear' });\n    this.options.smooth = true;\n    super.init();\n  }\n\n  protected processData(originData?: DataItem[]) {\n    const { binField, binWidth, binNumber, kernel } = this.options;\n    const _kernel = kernel ? kernel : 'epanechnikov';\n    const kernelFunc = kernels[_kernel];\n    const originDataCopy = clone(originData);\n    sortBy(originDataCopy, binField);\n    // 计算分箱，直方图分箱的计算基于binWidth，如配置了binNumber则将其转为binWidth进行计算\n    const values = valuesOfKey(originDataCopy, binField);\n    const range = getRange(values);\n    const rangeWidth = range.max - range.min;\n    let _binNumber = binNumber;\n    let _binWidth = binWidth;\n    if (!binNumber && binWidth) {\n      _binNumber = Math.floor(rangeWidth / binWidth);\n    }\n    if (!binWidth && binNumber) {\n      _binWidth = rangeWidth / binNumber;\n    }\n    // 当binWidth和binNumber都没有指定的情况，采用Sturges formula自动生成binWidth\n    if (!binNumber && !binWidth) {\n      _binNumber = sturges(values);\n      _binWidth = rangeWidth / binNumber;\n    }\n    // 根据binNumber获取samples\n    const LinearScale = getScale('linear');\n    const scale = new LinearScale({\n      min: range.min,\n      max: range.max,\n      tickCount: _binNumber,\n      nice: false,\n    });\n    const samples = scale.getTicks();\n    // 计算KDE\n    const densities = [];\n    each(samples, (s) => {\n      const density = this.kernelDensityEstimator(_binWidth, kernelFunc, s, values);\n      densities.push({ value: s.text, density });\n    });\n\n    return densities;\n  }\n\n  private kernelDensityEstimator(\n    binWidth: number,\n    kernelFunc: (dist: number) => number,\n    x: LooseMap,\n    values: number[]\n  ) {\n    let sum = 0;\n    each(values, (v) => {\n      const dist = (x.tickValue - v) / binWidth;\n      sum += kernelFunc(dist);\n    });\n    return values.length === 0 ? 0 : sum / values.length;\n  }\n}\n\nregisterPlotType('density', DensityLayer);\n"]}