{"version":3,"file":"squarify.js","sourceRoot":"","sources":["../../../../src/plots/treemap/layout/squarify.ts"],"names":[],"mappings":"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","sourcesContent":["import { dice } from './dice';\nimport { slice } from './slice';\n\n//reference: https://github.com/d3/d3-hierarchy/blob/master/src/treemap/squarify.js\n\n// 黄金分割\nconst ratio = (1 + Math.sqrt(5)) / 2;\n\nexport default function squarify(root, x0, y0, x1, y1) {\n  const { children } = root;\n  let value = root.value;\n  children.sort((a, b) => {\n    return b.value - a.value;\n  });\n  const rows = [];\n  let sumValue, maxValue, minValue;\n  let alpha, beta;\n  let newRatio, minRatio;\n  let nodeValue;\n  let i = 0,\n    j = 0;\n\n  // todo: 剔除empty node\n  while (i < children.length) {\n    const width = x1 - x0;\n    const height = y1 - y0;\n    sumValue = children[j++].value;\n    maxValue = sumValue;\n    minValue = sumValue;\n    alpha = Math.max(height / width, width / height) / (value * ratio);\n    beta = sumValue * sumValue * alpha;\n    minRatio = Math.max(maxValue / beta, beta / minValue);\n    for (; j < children.length; j++) {\n      nodeValue = children[j].value;\n      sumValue += nodeValue;\n      if (nodeValue < minValue) minValue = nodeValue;\n      if (nodeValue > maxValue) maxValue = nodeValue;\n      beta = sumValue * sumValue * alpha;\n      newRatio = Math.max(maxValue / beta, beta / minValue);\n      if (newRatio > minRatio) {\n        sumValue -= nodeValue;\n        break;\n      }\n      minRatio = newRatio;\n    }\n    const row = { value: sumValue, dice: width < height, children: children.slice(i, j) };\n    rows.push(row);\n    if (row.dice) {\n      const h = value ? (height * sumValue) / value : height;\n      dice(row, x0, y0, x1, y0 + h);\n      if (value) {\n        y0 += h;\n      }\n    } else {\n      const w = value ? (width * sumValue) / value : width;\n      slice(row, x0, y0, x0 + w, y1);\n      if (value) {\n        x0 += w;\n      }\n    }\n    value -= sumValue;\n    i = j;\n  }\n  return rows;\n}\n"]}