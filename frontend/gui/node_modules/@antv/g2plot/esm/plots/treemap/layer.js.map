{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/treemap/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix, each, hasKey } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport squarify from './layout/squarify';\nimport { INTERACTION_MAP } from './interaction';\nimport * as EventParser from './event';\nimport TreemapLabel, { TreemapLabelConfig } from './components/label';\nimport { GraphicStyle, IInteractions } from '../../interface/config';\nimport { IDrillDown } from './interaction/drillDown';\n\nconst PARENT_NODE_OFFSET = 4;\nconst BLOCK_MARGIN = 4;\n\ntype TreemapInteraction = { type: 'drilldown'; cfg: IDrillDown } | IInteractions;\n\nexport interface TreemapViewConfig extends ViewConfig {\n  data: any;\n  maxLevel?: number;\n  colorField: string;\n  colors?: string[];\n  rectStyle?: GraphicStyle;\n  label: TreemapLabelConfig;\n  interactions?: TreemapInteraction[];\n}\n\nexport interface TreemapLayerConfig extends TreemapViewConfig, LayerConfig {}\n\nexport default class TreemapLayer<T extends TreemapLayerConfig = TreemapLayerConfig> extends ViewLayer<T> {\n  public static getDefaultOptions(): Partial<TreemapLayerConfig> {\n    return deepMix({}, super.getDefaultOptions(), {\n      maxLevel: 2,\n      padding: [0, 0, 0, 0],\n      tooltip: {\n        visible: false,\n        showTitle: false,\n        showCrosshairs: false,\n        showMarkers: false,\n        shared: false,\n      },\n      legend: {\n        visible: false,\n      },\n      xAxis: {\n        visible: false,\n      },\n      yAxis: {\n        visible: false,\n      },\n      xField: 'x',\n      yField: 'y',\n      label: {\n        visible: true,\n        adjustPosition: true,\n        style: {\n          stroke: 'rgba(0,0,0,0)',\n          lineWidth: 0,\n          fontSize: 12,\n        },\n      },\n      meta: {\n        x: {\n          nice: false,\n        },\n        y: {\n          nice: false,\n        },\n      },\n      interactions: [{ type: 'tooltip' }],\n    });\n  }\n  public type: string = 'treemap';\n  public rootData: any;\n  public rect: any;\n  private isDrilldown: boolean;\n\n  public beforeInit() {\n    super.beforeInit();\n    const { interactions } = this.options;\n    if (interactions) {\n      each(interactions, (interaction) => {\n        if (interaction.type === 'drilldown') {\n          this.isDrilldown = true;\n          this.options.maxLevel = 1;\n        }\n      });\n    }\n    const { data } = this.options;\n    const treemapData = this.getTreemapData(data);\n    this.rootData = treemapData;\n  }\n\n  public afterRender() {\n    super.afterRender();\n    if (this.options.label && this.options.label.visible) {\n      const label = new TreemapLabel({\n        view: this.view,\n        plot: this,\n        ...this.options.label,\n      });\n      label.render();\n    }\n  }\n\n  protected geometryParser() {\n    return 'polygon';\n  }\n\n  public getTreemapData(data, level?) {\n    const viewRange = this.getViewRange();\n    const root = squarify(data, viewRange.x, viewRange.y, viewRange.width, viewRange.height);\n    this.recursive(root, 1);\n    const treemapData = [];\n    this.getAllNodes(root, treemapData, level);\n    treemapData.sort((a, b) => {\n      return a.depth - b.depth;\n    });\n    this.options.xField = 'x';\n    this.options.yField = 'y';\n    return treemapData;\n  }\n\n  protected processData() {\n    return this.rootData;\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected addGeometry() {\n    const { data, colorField, color } = this.options;\n    const treemapData = this.getTreemapData(data);\n    this.rootData = treemapData;\n    const isNested = this.isNested(treemapData);\n    this.rect = {\n      type: 'polygon',\n      position: {\n        fields: ['x', 'y'],\n      },\n      color: {\n        fields: [colorField],\n        values: color,\n      },\n      style: {\n        fields: ['depth'],\n        callback: (d) => {\n          const defaultStyle = this.adjustStyleByDepth(d, isNested);\n          return deepMix({}, defaultStyle, this.options.rectStyle);\n        },\n      },\n      tooltip: {\n        fields: ['name', 'value'],\n      },\n    };\n    if (this.options.tooltip && this.options.tooltip.formatter) {\n      this.rect.tooltip.callback = this.options.tooltip.formatter;\n    }\n    this.setConfig('geometry', this.rect);\n  }\n\n  protected applyInteractions() {\n    const interactionCfg = this.options.interactions;\n    const interactions = this.view.interactions;\n    each(interactionCfg, (inter) => {\n      const Ctr = INTERACTION_MAP[inter.type];\n      if (Ctr) {\n        const interaction = new Ctr(\n          deepMix(\n            {},\n            {\n              view: this.view,\n              plot: this,\n              startEvent: 'polygon:click',\n            },\n            inter.cfg,\n            Ctr.getInteractionRange(this.layerBBox, inter.cfg)\n          )\n        );\n        interactions[inter.type] = interaction;\n      }\n    });\n  }\n\n  protected animation() {\n    super.animation();\n    if (this.isDrilldown) {\n      this.rect.animate = false;\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private recursive(rows, depth?) {\n    const { colorField } = this.options;\n    each(rows, (r) => {\n      each(r.children, (c) => {\n        c.depth = depth;\n        if (depth > 1) c.parent = r;\n        if (!hasKey(c, colorField)) {\n          c[colorField] = r[colorField];\n        }\n        c.showLabel = true;\n        const leaf = this.isLeaf(c);\n        if (!leaf) {\n          const cliperHeight = Math.abs(c.y1 - c.y0);\n          const labelHeight = this.getLabelHeight();\n          const parentLabelOffset = cliperHeight / 2 > labelHeight ? labelHeight : BLOCK_MARGIN;\n          c.showLabel = parentLabelOffset === BLOCK_MARGIN ? false : true;\n          const c_rows = squarify(\n            c,\n            c.x0 + BLOCK_MARGIN,\n            c.y0 + parentLabelOffset,\n            c.x1 - BLOCK_MARGIN,\n            c.y1 - BLOCK_MARGIN\n          );\n          this.fillColorField(c_rows, colorField, c[colorField]);\n          this.recursive(c_rows, c.depth + 1);\n        }\n      });\n    });\n  }\n\n  private getAllNodes(data, nodes, level?) {\n    const max = level ? level : this.options.maxLevel;\n    const viewRange = this.getViewRange();\n    each(data, (d) => {\n      if (hasKey(d, 'x0') && d.depth <= max) {\n        nodes.push({\n          ...d,\n          x: [d.x0, d.x1, d.x1, d.x0],\n          y: [viewRange.height - d.y1, viewRange.height - d.y1, viewRange.height - d.y0, viewRange.height - d.y0],\n        });\n      }\n      if (hasKey(d, 'children')) {\n        this.getAllNodes(d.children, nodes);\n      }\n    });\n  }\n\n  private fillColorField(rows, fieldName, value) {\n    each(rows, (r) => {\n      if (!hasKey(r, fieldName)) {\n        r[fieldName] = value;\n      }\n    });\n  }\n\n  private getLabelHeight() {\n    const { label } = this.options;\n    const { fontSize } = this.getPlotTheme().label.style;\n    let size = 0;\n    if (label && label.visible) {\n      const labelStyle: any = label.style;\n      size = labelStyle && labelStyle.fontSize ? labelStyle.fontSize : fontSize;\n    }\n    return size + PARENT_NODE_OFFSET * 2;\n  }\n\n  private isLeaf(data) {\n    return !data.children || data.children.length === 0;\n  }\n\n  private isNested(data) {\n    const { maxLevel } = this.options;\n    if (maxLevel === 1) {\n      return false;\n    }\n    let nested = false;\n    for (let i = 0; i < data.length; i++) {\n      if (data[i].children) {\n        nested = true;\n        break;\n      }\n    }\n    return nested;\n  }\n\n  private adjustStyleByDepth(depth, isNested) {\n    const { maxLevel } = this.options;\n    if (!isNested) {\n      return {\n        lineWidth: 1,\n        stroke: 'rgba(0,0,0,0.9)',\n        opacity: 0.9,\n      };\n    } else if (depth === 1) {\n      return {\n        lineWidth: 1,\n        stroke: 'black',\n        opacity: depth / maxLevel,\n      };\n    } else {\n      return {\n        lineWidth: 1,\n        stroke: 'rgba(0,0,0,0.3)',\n        opacity: depth / maxLevel,\n      };\n    }\n  }\n}\n\nregisterPlotType('treemap', TreemapLayer);\n"]}