{"version":3,"file":"ring-statistic.js","sourceRoot":"","sources":["../../../../src/plots/donut/component/ring-statistic.ts"],"names":[],"mappings":"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","sourcesContent":["import { View } from '../../../dependents';\nimport StatisticHtml, { IStaticticHtml } from './statistic';\nimport * as statisticTemplate from './statistic-template';\nimport { debounce, each, isString, isObject, isFunction, keys } from '@antv/util';\nimport { LooseMap } from '../../../interface/types';\nimport Ring, { DonutViewConfig } from '../layer';\n\ninterface IRingStatictic extends IStaticticHtml {\n  view: View;\n  plot: any;\n}\n\nexport default class RingStatistic extends StatisticHtml {\n  protected view: View;\n  protected plot: Ring;\n  protected statisticClass: string;\n  protected options: DonutViewConfig['statistic'];\n\n  constructor(cfg: IRingStatictic) {\n    super(cfg);\n    this.view = cfg.view;\n    this.plot = cfg.plot;\n    this.statisticClass = cfg.statisticClass;\n    this.adjustOptions();\n  }\n\n  public triggerOn() {\n    const triggerOnEvent = this.options.triggerOn;\n    this.view.on(\n      `interval:${triggerOnEvent}`,\n      debounce((e) => {\n        const displayData = this.parseStatisticData(e.data.data);\n        const htmlString = this.getStatisticHtmlString(displayData);\n        this.updateHtml(htmlString);\n      }, 150)\n    );\n    const triggerOffEvent = this.options.triggerOff ? this.options.triggerOff : 'mouseleave';\n    this.view.on(\n      `interval:${triggerOffEvent}`,\n      debounce(() => {\n        const totalValue = this.getTotalValue();\n        const displayData = this.parseStatisticData(totalValue);\n        const htmlString = this.getStatisticHtmlString(displayData);\n        this.updateHtml(htmlString);\n      }, 150)\n    );\n  }\n\n  protected adjustOptions() {\n    let displayData;\n    if (this.options.content) {\n      displayData = this.options.content;\n    } else {\n      /** 用户没有指定文本内容时，默认显示总计 */\n      const data = this.getTotalValue();\n      displayData = this.parseStatisticData(data);\n    }\n    /** 中心文本显示 */\n    let htmlString;\n    if (this.options.htmlContent) {\n      htmlString = this.options.htmlContent(displayData);\n    } else {\n      htmlString = this.getStatisticTemplate(displayData);\n    }\n\n    this.html = htmlString;\n\n    const { minX, minY, width, height } = this.view.coordinateBBox;\n    this.x = minX + width / 2;\n    this.y = minY + height / 2;\n  }\n\n  private getTotalValue() {\n    let total = 0;\n    const { angleField, colorField } = this.plot.options;\n    const { totalLabel } = this.options;\n    each(this.plot.options.data, (item) => {\n      if (typeof item[angleField] === 'number') {\n        total += item[angleField];\n      }\n    });\n    const data = {\n      [angleField]: total,\n      [colorField]: totalLabel,\n    };\n    return data;\n  }\n\n  private parseStatisticData(data) {\n    const { angleField, colorField } = this.plot.options;\n    return colorField ? { name: data[colorField], value: data[angleField] } : data[angleField];\n  }\n\n  private getStatisticTemplate(data) {\n    const size = this.getStatisticSize();\n    let htmlString;\n    /** 如果文本内容为string或单条数据 */\n    if (isString(data)) {\n      htmlString = statisticTemplate.getSingleDataTemplate(data, this.statisticClass, size);\n    } else if (isObject(data) && keys(data).length === 2) {\n      /** 如果文本内容为两条数据 */\n      const content = data as LooseMap;\n      htmlString = statisticTemplate.getTwoDataTemplate(content.name, content.value, this.statisticClass, size);\n    }\n    /** 更为复杂的文本要求用户自行制定html模板 */\n    return htmlString;\n  }\n\n  private getStatisticSize() {\n    const viewRange = this.plot.view.coordinateBBox;\n    const { radius, innerRadius } = this.plot.options;\n    const minContainerSize = Math.min(viewRange.width, viewRange.height);\n    const size = minContainerSize * radius * innerRadius;\n    return size;\n  }\n\n  private getStatisticHtmlString(data): string {\n    const triggerOnConfig = this.options.triggerOn;\n    let htmlString: string;\n    if (isString(triggerOnConfig)) {\n      htmlString = this.getStatisticTemplate(data);\n    }\n    if (isFunction(triggerOnConfig)) {\n      htmlString = triggerOnConfig(data);\n      htmlString = `<div class=\"ring-guide-html ${this.statisticClass}\">${htmlString}</div>`;\n    }\n    return htmlString;\n  }\n}\n"]}