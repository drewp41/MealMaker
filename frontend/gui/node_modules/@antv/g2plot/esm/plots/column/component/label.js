import { clone, deepMix, each } from '@antv/util';
import { mappingColor, rgb2arr } from '../../../util/color';
import BBox from '../../../util/bbox';
var ColumnLabel = /** @class */ (function () {
    function ColumnLabel(cfg) {
        this.destroyed = false;
        this.view = cfg.view;
        this.plot = cfg.plot;
        var defaultOptions = this.getDefaultOptions();
        this.options = deepMix(defaultOptions, cfg, {});
        this.init();
    }
    ColumnLabel.prototype.init = function () {
        var _this = this;
        this.container = this.getGeometry().labelsContainer;
        this.view.on('beforerender', function () {
            _this.clear();
            _this.plot.canvas.draw();
        });
    };
    ColumnLabel.prototype.render = function () {
        var _this = this;
        var _a = this.getGeometry(), elements = _a.elements, coordinate = _a.coordinate;
        this.coord = coordinate;
        each(elements, function (ele) {
            var shape = ele.shape;
            var style = clone(_this.options.style);
            var value = _this.getValue(shape);
            var position = _this.getPosition(shape, value);
            var textAlign = _this.getTextAlign(value);
            var textBaseline = _this.getTextBaseLine(value);
            var color = _this.getTextColor(shape);
            if (_this.options.position !== 'top' && _this.options.adjustColor && color !== 'black') {
                style.stroke = null;
            }
            var formatter = _this.options.formatter;
            var content = formatter ? formatter(value) : value;
            var label = _this.container.addShape('text', {
                attrs: deepMix({}, style, {
                    x: position.x,
                    y: position.y,
                    text: content,
                    fill: color,
                    textAlign: textAlign,
                    textBaseline: textBaseline,
                }),
                name: 'label',
            });
            _this.adjustLabel(label, shape);
        });
    };
    ColumnLabel.prototype.clear = function () {
        if (this.container) {
            this.container.clear();
        }
    };
    ColumnLabel.prototype.hide = function () {
        this.container.set('visible', false);
        this.plot.canvas.draw();
    };
    ColumnLabel.prototype.show = function () {
        this.container.set('visible', true);
        this.plot.canvas.draw();
    };
    ColumnLabel.prototype.destroy = function () {
        if (this.container) {
            this.container.remove();
        }
        this.destroyed = true;
    };
    ColumnLabel.prototype.getBBox = function () { };
    ColumnLabel.prototype.getPosition = function (shape, value) {
        var bbox = this.getShapeBbox(shape);
        var minX = bbox.minX, maxX = bbox.maxX, minY = bbox.minY, maxY = bbox.maxY, height = bbox.height, width = bbox.width;
        var _a = this.options, offsetX = _a.offsetX, offsetY = _a.offsetY, position = _a.position;
        var x = minX + width / 2 + offsetX;
        var dir = value > 0 ? -1 : 1;
        var y;
        if (position === 'top') {
            var root = value > 0 ? minY : maxY;
            y = root + (offsetY + 8) * dir;
        }
        else if (position === 'bottom') {
            y = maxY + (offsetY + 8) * dir;
        }
        else {
            y = minY + height / 2 + offsetY;
        }
        return { x: x, y: y };
    };
    ColumnLabel.prototype.getTextColor = function (shape) {
        if (this.options.adjustColor && this.options.position !== 'top') {
            var shapeColor = shape.attr('fill');
            var shapeOpacity = shape.attr('opacity') ? shape.attr('opacity') : 1;
            var rgb = rgb2arr(shapeColor);
            var gray = Math.round(rgb[0] * 0.299 + rgb[1] * 0.587 + rgb[2] * 0.114) / shapeOpacity;
            var colorBand = [
                { from: 0, to: 85, color: 'white' },
                { from: 85, to: 170, color: '#F6F6F6' },
                { from: 170, to: 255, color: 'black' },
            ];
            var reflect = mappingColor(colorBand, gray);
            return reflect;
        }
        var defaultColor = this.options.style.fill;
        return defaultColor;
    };
    ColumnLabel.prototype.getTextAlign = function (value) {
        return 'center';
    };
    ColumnLabel.prototype.getTextBaseLine = function (value) {
        var position = this.options.position;
        return position === 'middle' ? 'middle' : 'bottom';
    };
    ColumnLabel.prototype.getValue = function (shape) {
        var data = shape.get('origin').data;
        return data[this.plot.options.yField];
    };
    ColumnLabel.prototype.adjustLabel = function (label, shape) {
        if (this.options.adjustPosition && this.options.position !== 'top') {
            var labelRange = label.getBBox();
            var shapeRange = shape.getBBox();
            if (shapeRange.height <= labelRange.height) {
                var yPosition = shapeRange.minY + this.options.offsetY - 8;
                label.attr('y', yPosition);
                label.attr('textBaseline', 'bottom');
                label.attr('fill', this.options.style.fill);
            }
        }
    };
    ColumnLabel.prototype.getDefaultOptions = function () {
        var theme = this.plot.theme;
        var labelStyle = theme.label.style;
        return {
            offsetX: 0,
            offsetY: 0,
            style: clone(labelStyle),
            adjustPosition: true,
        };
    };
    ColumnLabel.prototype.getShapeBbox = function (shape) {
        var _this = this;
        var points = [];
        each(shape.get('origin').points, function (p) {
            points.push(_this.coord.convertPoint(p));
        });
        var bbox = new BBox(points[0].x, points[1].y, Math.abs(points[2].x - points[0].x), Math.abs(points[0].y - points[1].y));
        return bbox;
    };
    ColumnLabel.prototype.getGeometry = function () {
        var geometries = this.view.geometries;
        var lineGeom;
        each(geometries, function (geom) {
            if (geom.type === 'interval') {
                lineGeom = geom;
            }
        });
        return lineGeom;
    };
    return ColumnLabel;
}());
export default ColumnLabel;
//# sourceMappingURL=label.js.map