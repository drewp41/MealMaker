{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/density-heatmap/layer.ts"],"names":[],"mappings":";AAAA,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,MAAM,YAAY,CAAC;AAChD,OAAO,EAAE,gBAAgB,EAAE,MAAM,mBAAmB,CAAC;AAErD,OAAO,SAAyB,MAAM,uBAAuB,CAAC;AAC9D,OAAO,EAAE,YAAY,EAAE,MAAM,0BAA0B,CAAC;AACxD,OAAO,EAAE,OAAO,EAAE,MAAM,qBAAqB,CAAC;AAC9C,OAAO,EAAE,YAAY,EAAE,MAAM,kBAAkB,CAAC;AAChD,OAAO,4BAA4B,CAAC;AAGpC,OAAO,EAAE,iBAAiB,EAAE,MAAM,cAAc,CAAC;AACjD,OAAO,KAAK,WAAW,MAAM,SAAS,CAAC;AAoBvC;IAEU,uCAAY;IAFtB;QAAA,qEAuOC;QApOQ,UAAI,GAAW,gBAAgB,CAAC;QAC7B,oBAAc,GAAU,EAAE,CAAC;;IAmOvC,CAAC;IAjOe,qCAAiB,GAA/B;QACE,OAAO,OAAO,CAAC,EAAE,EAAE,OAAM,iBAAiB,WAAE,EAAE;YAC5C,KAAK,EAAE;gBACL,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,KAAK;gBACtB,IAAI,EAAE;oBACJ,OAAO,EAAE,KAAK;iBACf;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE,IAAI;iBACd;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,IAAI;iBACd;gBACD,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,IAAI;iBACjB;gBACD,KAAK,EAAE;oBACL,OAAO,EAAE,KAAK;oBACd,MAAM,EAAE,EAAE;iBACX;aACF;YACD,KAAK,EAAE;gBACL,OAAO,EAAE,IAAI;gBACb,eAAe,EAAE,IAAI;gBACrB,IAAI,EAAE;oBACJ,OAAO,EAAE,KAAK;iBACf;gBACD,IAAI,EAAE;oBACJ,OAAO,EAAE,IAAI;iBACd;gBACD,QAAQ,EAAE;oBACR,OAAO,EAAE,IAAI;iBACd;gBACD,KAAK,EAAE;oBACL,OAAO,EAAE,IAAI;oBACb,QAAQ,EAAE,IAAI;oBACd,UAAU,EAAE,KAAK;iBAClB;gBACD,KAAK,EAAE;oBACL,OAAO,EAAE,KAAK;oBACd,MAAM,EAAE,EAAE;iBACX;aACF;YACD,OAAO,EAAE;gBACP,OAAO,EAAE,IAAI;gBACb,cAAc,EAAE,IAAI;gBACpB,UAAU,EAAE;oBACV,IAAI,EAAE,IAAI;oBACV,IAAI,EAAE;wBACJ,KAAK,EAAE;4BACL,MAAM,EAAE,SAAS;4BACjB,SAAS,EAAE,CAAC;4BACZ,OAAO,EAAE,GAAG;yBACb;qBACF;iBACF;gBACD,WAAW,EAAE,KAAK;aACnB;YACD,MAAM,EAAE;gBACN,OAAO,EAAE,IAAI;gBACb,QAAQ,EAAE,eAAe;aAC1B;YACD,KAAK,EAAE;gBACL,oBAAoB;gBACpB,kBAAkB;gBAClB,kBAAkB;gBAClB,kBAAkB;gBAClB,iBAAiB;gBACjB,gBAAgB;aACjB;YACD,YAAY,EAAE,CAAC,EAAE,IAAI,EAAE,SAAS,EAAE,CAAC;SACpC,CAAC,CAAC;IACL,CAAC;IAEM,yCAAW,GAAlB;QACE,IAAI,CAAC,oBAAoB,EAAE,CAAC;QAC5B,iBAAM,WAAW,WAAE,CAAC;IACtB,CAAC;IAEM,qCAAO,GAAd;QACE,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,UAAC,SAAS;YAClC,SAAS,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,iBAAM,OAAO,WAAE,CAAC;IAClB,CAAC;IAES,mCAAK,GAAf;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,IAAM,MAAM,GAAG,EAAE,CAAC;QAClB,gBAAgB;QAChB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAC1B,IAAI,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;YACvB,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SACjD;QACD,gBAAgB;QAChB,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,GAAG,EAAE,CAAC;QAC1B,IAAI,GAAG,CAAC,KAAK,EAAE,OAAO,CAAC,EAAE;YACvB,YAAY,CAAC,MAAM,CAAC,KAAK,CAAC,MAAM,CAAC,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SACjD;QACD,IAAI,CAAC,SAAS,CAAC,QAAQ,EAAE,MAAM,CAAC,CAAC;QACjC,iBAAM,KAAK,WAAE,CAAC;IAChB,CAAC;IAES,mCAAK,GAAf;QACE,OAAO;IACT,CAAC;IAES,4CAAc,GAAxB;QACE,OAAO,SAAS,CAAC;IACnB,CAAC;IAES,yCAAW,GAArB;QACE,IAAI,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,MAAM,GAAG,CAAC,EAAE;YAChC,IAAM,MAAM,GAAG;gBACb,IAAI,EAAE,eAAe;gBACrB,QAAQ,EAAE;oBACR,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;iBACnD;gBACD,KAAK,EAAE;oBACL,MAAM,EAAE,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC;oBACjC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,KAAK;iBAC3B;gBACD,GAAG,EAAE;oBACH,SAAS,EAAE,IAAI,CAAC,OAAO,CAAC,SAAS;oBACjC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM;iBAC5B;aACK,CAAC;YAET,IAAI,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE;gBACvB,MAAM,CAAC,MAAM,GAAG,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC;aACrC;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,SAAS,EAAE;gBAC1B,MAAM,CAAC,SAAS,GAAG,IAAI,CAAC,OAAO,CAAC,SAAS,CAAC;aAC3C;YAED,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,MAAM,IAAI,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC,SAAS,CAAC,EAAE;gBAC3F,IAAI,CAAC,eAAe,CAAC,MAAM,CAAC,CAAC;aAC9B;YAED,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,MAAM,CAAC,CAAC;YAEnC,IAAI,CAAC,QAAQ,EAAE,CAAC;SACjB;IACH,CAAC;IAES,sCAAQ,GAAlB;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,IAAM,aAAa,GAAG,EAAE,OAAO,EAAE,KAAK,EAAE,IAAI,EAAE,CAAC,EAAE,CAAC;QAClD,IAAI,KAAK,CAAC,KAAK,IAAI,KAAK,CAAC,KAAK,CAAC,OAAO,EAAE;YACtC,KAAK,CAAC,KAAK,GAAG,OAAO,CAAC,aAAa,EAAE,KAAK,CAAC,KAAK,CAAC,CAAC;SACnD;aAAM;YACL,KAAK,CAAC,KAAK,GAAG,aAAa,CAAC;SAC7B;QACD,IAAM,KAAK,GAAG,OAAO,CAAC,OAAO,EAAE,OAAO,EAAE;YACtC,IAAI,EAAE,IAAI;SACX,CAAC,CAAC;QACH,KAAK,CAAC,MAAM,GAAG,KAAK,CAAC;QACrB,qCAAqC;QACrC,IAAI,CAAC,SAAS,CAAC,UAAU,EAAE,KAAK,CAAC,CAAC;IACpC,CAAC;IAES,0CAAY,GAAtB;QACE,IAAM,KAAK,GAAG,IAAI,CAAC,OAAO,CAAC;QAC3B,IAAM,KAAK,GAAG,KAAK,CAAC,KAAK,CAAC;QAC1B,IAAI,KAAK,IAAI,KAAK,CAAC,OAAO,KAAK,KAAK,EAAE;YACpC,OAAO,KAAK,CAAC;SACd;QACD,IAAM,WAAW,GAAG,YAAY,CAAC,OAAO,aACtC,IAAI,EAAE,IAAI,EACV,SAAS,EAAE,cAAc,EACzB,MAAM,EAAE,CAAC,KAAK,CAAC,MAAM,EAAE,KAAK,CAAC,MAAM,CAAC,EACpC,QAAQ,EAAE,QAAQ,EAClB,MAAM,EAAE,CAAC,IACN,KAAK,EACR,CAAC;QACH,OAAO,WAAW,CAAC;IACrB,CAAC;IAES,oCAAM,GAAhB;QACE,IAAI,CAAC,SAAS,CAAC,SAAS,EAAE,KAAK,CAAC,CAAC;IACnC,CAAC;IAES,6CAAe,GAAzB,UAA0B,MAAM;QAC9B,MAAM,CAAC,OAAO,GAAG,EAAE,CAAC;QACpB,IAAM,cAAc,GAAQ,IAAI,CAAC,OAAO,CAAC,OAAO,CAAC;QACjD,IAAI,cAAc,CAAC,MAAM,EAAE;YACzB,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,cAAc,CAAC,MAAM,CAAC;SAC/C;QACD,IAAI,cAAc,CAAC,SAAS,EAAE;YAC5B,MAAM,CAAC,OAAO,CAAC,QAAQ,GAAG,cAAc,CAAC,SAAS,CAAC;YACnD,IAAI,CAAC,cAAc,CAAC,MAAM,EAAE;gBAC1B,MAAM,CAAC,OAAO,CAAC,MAAM,GAAG,CAAC,IAAI,CAAC,OAAO,CAAC,MAAM,EAAE,IAAI,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;gBACnE,IAAI,IAAI,CAAC,OAAO,CAAC,UAAU,EAAE;oBAC3B,MAAM,CAAC,OAAO,CAAC,MAAM,CAAC,IAAI,CAAC,IAAI,CAAC,OAAO,CAAC,UAAU,CAAC,CAAC;iBACrD;aACF;SACF;IACH,CAAC;IAES,yCAAW,GAArB;QACE,iBAAM,WAAW,YAAC,WAAW,CAAC,CAAC;IACjC,CAAC;IAES,kDAAoB,GAA9B;QAAA,iBAiBC;QAhBC,IAAI,CAAC,IAAI,CAAC,cAAc,EAAE,UAAC,SAAS;YAClC,SAAS,CAAC,OAAO,EAAE,CAAC;QACtB,CAAC,CAAC,CAAC;QACH,IAAM,cAAc,GAAG,CAAC,QAAQ,EAAE,YAAY,CAAC,CAAC;QAChD,IAAI,CAAC,cAAc,EAAE,UAAC,CAAC;YACrB,IAAM,GAAG,cACP,IAAI,EAAE,KAAI,CAAC,IAAI,EACf,IAAI,EAAE,KAAI,IACP,KAAI,CAAC,OAAO,CAAC,CAAC,CAAC,CACnB,CAAC;YACF,IAAM,SAAS,GAAG,iBAAiB,CAAC,KAAI,EAAE,CAAC,EAAE,GAAG,CAAC,CAAC;YAClD,IAAI,SAAS,EAAE;gBACb,SAAS,CAAC,MAAM,EAAE,CAAC;gBACnB,KAAI,CAAC,cAAc,CAAC,IAAI,CAAC,SAAS,CAAC,CAAC;aACrC;QACH,CAAC,CAAC,CAAC;IACL,CAAC;IACH,0BAAC;AAAD,CAAC,AAvOD,CAEU,SAAS,GAqOlB;;AAED,gBAAgB,CAAC,gBAAgB,EAAE,mBAAmB,CAAC,CAAC","sourcesContent":["import { deepMix, each, has } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ViewLayer, { ViewConfig } from '../../base/view-layer';\nimport { getComponent } from '../../components/factory';\nimport { getGeom } from '../../geoms/factory';\nimport { extractScale } from '../../util/scale';\nimport '../../geoms/heatmap/linear';\nimport { HeatmapLegendConfig } from './components/legend';\nimport { HeatmapBackgroundConfig } from './components/background';\nimport { getPlotComponents } from './components';\nimport * as EventParser from './event';\nimport { GraphicStyle } from '../../interface/config';\n\nexport interface DensityHeatmapViewConfig extends ViewConfig {\n  colorField: string;\n  radius?: number;\n  intensity?: number;\n  point?: {\n    visible?: boolean;\n    shape?: string;\n    size?: number;\n    color?: string;\n    style?: GraphicStyle;\n  };\n  legend?: HeatmapLegendConfig;\n  background?: HeatmapBackgroundConfig;\n}\n\nexport interface DensityHeatmapLayerConfig extends DensityHeatmapViewConfig, LayerConfig {}\n\nexport default class DensityHeatmapLayer<\n  T extends DensityHeatmapLayerConfig = DensityHeatmapLayerConfig\n> extends ViewLayer<T> {\n  public type: string = 'densityHeatmap';\n  protected plotComponents: any[] = [];\n\n  public static getDefaultOptions(): any {\n    return deepMix({}, super.getDefaultOptions(), {\n      xAxis: {\n        visible: true,\n        autoRotateTitle: false,\n        grid: {\n          visible: false,\n        },\n        line: {\n          visible: true,\n        },\n        tickLine: {\n          visible: true,\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: true,\n        },\n        title: {\n          visible: false,\n          offset: 12,\n        },\n      },\n      yAxis: {\n        visible: true,\n        autoRotateTitle: true,\n        grid: {\n          visible: false,\n        },\n        line: {\n          visible: true,\n        },\n        tickLine: {\n          visible: true,\n        },\n        label: {\n          visible: true,\n          autoHide: true,\n          autoRotate: false,\n        },\n        title: {\n          visible: false,\n          offset: 12,\n        },\n      },\n      tooltip: {\n        visible: true,\n        showCrosshairs: true,\n        crosshairs: {\n          type: 'xy',\n          line: {\n            style: {\n              stroke: '#000000',\n              lineWidth: 1,\n              opacity: 0.5,\n            },\n          },\n        },\n        showMarkers: false,\n      },\n      legend: {\n        visible: true,\n        position: 'bottom-center',\n      },\n      color: [\n        'rgba(33,102,172,0)',\n        'rgb(103,169,207)',\n        'rgb(209,229,240)',\n        'rgb(253,219,199)',\n        'rgb(239,138,98)',\n        'rgb(178,24,43)',\n      ],\n      interactions: [{ type: 'tooltip' }],\n    });\n  }\n\n  public afterRender() {\n    this.renderPlotComponents();\n    super.afterRender();\n  }\n\n  public destroy() {\n    each(this.plotComponents, (component) => {\n      component.destroy();\n    });\n    super.destroy();\n  }\n\n  protected scale() {\n    const props = this.options;\n    const scales = {};\n    /** 配置x-scale */\n    scales[props.xField] = {};\n    if (has(props, 'xAxis')) {\n      extractScale(scales[props.xField], props.xAxis);\n    }\n    /** 配置y-scale */\n    scales[props.yField] = {};\n    if (has(props, 'yAxis')) {\n      extractScale(scales[props.yField], props.yAxis);\n    }\n    this.setConfig('scales', scales);\n    super.scale();\n  }\n\n  protected coord() {\n    return;\n  }\n\n  protected geometryParser() {\n    return 'heatmap';\n  }\n\n  protected addGeometry() {\n    if (this.options.data.length > 1) {\n      const config = {\n        type: 'linearheatmap',\n        position: {\n          fields: [this.options.xField, this.options.yField],\n        },\n        color: {\n          fields: [this.options.colorField],\n          values: this.options.color,\n        },\n        cfg: {\n          intensity: this.options.intensity,\n          radius: this.options.radius,\n        },\n      } as any;\n\n      if (this.options.radius) {\n        config.radius = this.options.radius;\n      }\n\n      if (this.options.intensity) {\n        config.intensity = this.options.intensity;\n      }\n\n      if (this.options.tooltip && (this.options.tooltip.fields || this.options.tooltip.formatter)) {\n        this.geometryTooltip(config);\n      }\n\n      this.setConfig('geometry', config);\n\n      this.addPoint();\n    }\n  }\n\n  protected addPoint() {\n    const props = this.options;\n    const defaultConfig = { visible: false, size: 0 };\n    if (props.point && props.point.visible) {\n      props.point = deepMix(defaultConfig, props.point);\n    } else {\n      props.point = defaultConfig;\n    }\n    const point = getGeom('point', 'guide', {\n      plot: this,\n    });\n    point.active = false;\n    // point.label = this.extractLabel();\n    this.setConfig('geometry', point);\n  }\n\n  protected extractLabel() {\n    const props = this.options;\n    const label = props.label;\n    if (label && label.visible === false) {\n      return false;\n    }\n    const labelConfig = getComponent('label', {\n      plot: this,\n      labelType: 'scatterLabel',\n      fields: [props.xField, props.yField],\n      position: 'middle',\n      offset: 0,\n      ...label,\n    });\n    return labelConfig;\n  }\n\n  protected legend() {\n    this.setConfig('legends', false);\n  }\n\n  protected geometryTooltip(config) {\n    config.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      config.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      config.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        config.tooltip.fields = [this.options.xField, this.options.yField];\n        if (this.options.colorField) {\n          config.tooltip.fields.push(this.options.colorField);\n        }\n      }\n    }\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  protected renderPlotComponents() {\n    each(this.plotComponents, (component) => {\n      component.destroy();\n    });\n    const componentsType = ['legend', 'background'];\n    each(componentsType, (t) => {\n      const cfg = {\n        view: this.view,\n        plot: this,\n        ...this.options[t],\n      };\n      const component = getPlotComponents(this, t, cfg);\n      if (component) {\n        component.render();\n        this.plotComponents.push(component);\n      }\n    });\n  }\n}\n\nregisterPlotType('densityHeatmap', DensityHeatmapLayer);\n"]}