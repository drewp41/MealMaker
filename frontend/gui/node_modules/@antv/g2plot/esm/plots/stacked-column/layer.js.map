{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/stacked-column/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { deepMix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport ConnectedArea from '../../components/connected-area';\nimport { ElementOption } from '../../interface/config';\nimport BaseColumnLayer from '../column/layer';\nimport { ColumnViewConfig } from '../column/interface';\nimport './theme';\nimport './component/label';\nimport './component/label-auto';\nimport { getGeometryByType } from '../../util/view';\nimport { Maybe } from '../../interface/types';\n\nexport interface StackedColumnViewConfig extends ColumnViewConfig {\n  stackField: string;\n  connectedArea?: any;\n}\n\nexport interface StackedColumnLayerConfig extends StackedColumnViewConfig, LayerConfig {}\n\nexport default class StackedColumnLayer<\n  T extends StackedColumnLayerConfig = StackedColumnLayerConfig\n> extends BaseColumnLayer<T> {\n  public static getDefaultOptions() {\n    return deepMix({}, super.getDefaultOptions(), {\n      legend: {\n        visible: true,\n        position: 'right-top',\n      },\n      label: {\n        visible: false,\n        position: 'middle',\n        offset: 0,\n        adjustColor: true,\n      },\n      connectedArea: {\n        visible: false,\n        triggerOn: 'mouseenter',\n      },\n    });\n  }\n\n  public type: string = 'stackedColumn';\n  public connectedArea: any;\n\n  public init() {\n    if (this.options.connectedArea.visible) {\n      this.options.tooltip.crosshairs = null;\n    }\n    super.init();\n  }\n\n  public afterRender() {\n    const props = this.options;\n    // 绘制区域连接组件\n    if (props.connectedArea.visible) {\n      this.connectedArea = new ConnectedArea({\n        view: this.view,\n        field: props.stackField,\n        animation: props.animation === false ? false : true,\n        ...props.connectedArea,\n      });\n    }\n    super.afterRender();\n  }\n\n  protected adjustColumn(column: ElementOption) {\n    column.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n  }\n\n  protected renderLabel() {\n    const { scales } = this.config;\n    const { label, yField } = this.options;\n    const scale = scales[yField];\n    if (label && label.visible) {\n      const geometry = getGeometryByType(this.view, 'interval');\n      this.doRenderLabel(geometry, {\n        type: 'stacked-column',\n        formatter: scale.formatter && ((value: Maybe<string | number>) => scale.formatter(value)),\n        ...this.options.label,\n      });\n    }\n  }\n\n  protected geometryTooltip() {\n    this.column.tooltip = {};\n    const tooltipOptions: any = this.options.tooltip;\n    if (tooltipOptions.fields) {\n      this.column.tooltip.fields = tooltipOptions.fields;\n    }\n    if (tooltipOptions.formatter) {\n      this.column.tooltip.callback = tooltipOptions.formatter;\n      if (!tooltipOptions.fields) {\n        this.column.tooltip.fields = [this.options.xField, this.options.yField, this.options.stackField];\n      }\n    }\n  }\n}\n\nregisterPlotType('stackedColumn', StackedColumnLayer);\n"]}