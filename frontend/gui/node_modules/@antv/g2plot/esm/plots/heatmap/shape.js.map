{"version":3,"file":"shape.js","sourceRoot":"","sources":["../../../src/plots/heatmap/shape.ts"],"names":[],"mappings":"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","sourcesContent":["import { registerShape } from '../../dependents';\nimport { deepMix } from '@antv/util';\n\nexport function getRectPath(cx, cy, width, height, size) {\n  const w = width * size;\n  const h = height * size;\n  const path = [\n    ['M', cx - w / 2, cy + h / 2],\n    ['Q', cx - w / 2, cy, cx - w / 2, cy - h / 2],\n    ['Q', cx, cy - h / 2, cx + w / 2, cy - h / 2],\n    ['Q', cx + w / 2, cy, cx + w / 2, cy + h / 2],\n    ['Q', cx, cy + h / 2, cx - w / 2, cy + h / 2],\n    ['Z'],\n  ];\n  return path;\n}\n\nexport function getCirclePath(x, y, size) {\n  const path = [\n    ['M', x, y],\n    ['l', -size, 0],\n    ['a', size, size, 0, 1, 0, size * 2, 0],\n    ['a', size, size, 0, 1, 0, -(size * 2), 0],\n    ['Z'],\n  ];\n  return path;\n}\n\nexport function getCircleCurve(x, y, size) {\n  // 计算四个角和中点\n  const path = [\n    ['M', x - size, y],\n    ['Q', x - size, y - size, x, y - size],\n    ['Q', x + size, y - size, x + size, y],\n    ['Q', x + size, y + size, x, y + size],\n    ['Q', x - size, y + size, x - size, y],\n    ['Z'],\n  ];\n  return path;\n}\n\nregisterShape('polygon', 'rect', {\n  draw(cfg, container) {\n    const points = this.parsePoints(cfg.points);\n    const width = points[2].x - points[0].x;\n    const height = points[0].y - points[1].y;\n    const centerX = points[0].x + width / 2;\n    const centerY = points[1].y + height / 2;\n    /*\n        const path = [\n          ['M', centerX - w / 2, centerY + h / 2],\n          ['L', centerX - w / 2, centerY - h / 2],\n          ['L', centerX + w / 2, centerY - h / 2],\n          ['L', centerX + w / 2, centerY + h / 2],\n          ['Z'],\n        ];\n        */\n    const path = getRectPath(centerX, centerY, width, height, cfg.size);\n    return container.addShape('path', {\n      attrs: deepMix(\n        {},\n        {\n          path,\n          fill: cfg.color,\n          opacity: 1,\n        },\n        cfg.style\n      ),\n    });\n  },\n});\n\nregisterShape('point', 'curvePoint', {\n  draw(cfg, container) {\n    const path = getCirclePath(cfg.x, cfg.y, cfg.size);\n    return container.addShape('path', {\n      attrs: deepMix(\n        {},\n        {\n          path,\n          fill: cfg.color,\n          opacity: 1,\n        },\n        cfg.style\n      ),\n    });\n  },\n});\n"]}