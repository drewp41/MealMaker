import { __extends } from "tslib";
/**
 * @author linhuiw
 * @description 仪表盘 layer
 */
import { deepMix, uniqueId } from '@antv/util';
import { registerPlotType } from '../../base/global';
import ViewLayer from '../../base/view-layer';
import { extractScale } from '../../util/scale';
import './theme';
import { DEFAULT_GAUGE_CONFIG } from './options';
import { GaugeShape } from './geometry/shape/gauge-shape';
import { getOptions } from './geometry/shape/options';
import { getGlobalTheme } from '../../theme';
import * as EventParser from './event';
var GaugeLayer = /** @class */ (function (_super) {
    __extends(GaugeLayer, _super);
    function GaugeLayer(props) {
        var _this = _super.call(this, props) || this;
        _this.type = 'gauge';
        return _this;
    }
    GaugeLayer.getDefaultOptions = function () {
        return deepMix({}, _super.getDefaultOptions.call(this), DEFAULT_GAUGE_CONFIG);
    };
    GaugeLayer.prototype.init = function () {
        var _a = this.options, value = _a.value, range = _a.range;
        var rangeSorted = (range || []).map(function (d) { return +d; }).sort(function (a, b) { return a - b; });
        var _b = this.options, _c = _b.min, min = _c === void 0 ? rangeSorted[0] : _c, _d = _b.max, max = _d === void 0 ? rangeSorted[rangeSorted.length - 1] : _d, _e = _b.format, format = _e === void 0 ? function (d) { return "" + d; } : _e;
        var valueText = format(value);
        var styleMix = this.getStyleMix();
        this.options.styleMix = styleMix;
        this.options.data = [{ value: value || 0 }];
        this.options.valueText = valueText;
        this.options.min = min;
        this.options.max = max;
        this.options.format = format;
        this.initG2Shape();
        _super.prototype.init.call(this);
    };
    GaugeLayer.prototype.getStyleMix = function () {
        var _a = this.options, _b = _a.gaugeStyle, gaugeStyle = _b === void 0 ? {} : _b, _c = _a.statistic, statistic = _c === void 0 ? {} : _c;
        var _d = this, width = _d.width, height = _d.height;
        var size = Math.max(width, height) / 20;
        var defaultStyle = Object.assign({}, this.theme, {
            stripWidth: size,
            tickLabelSize: size / 2,
        });
        if (!statistic.size) {
            statistic.size = size * 1.2;
        }
        var style = deepMix({}, defaultStyle, gaugeStyle, { statistic: statistic });
        return style;
    };
    /**
     * 绘制指针
     */
    GaugeLayer.prototype.initG2Shape = function () {
        this.gaugeShape = new GaugeShape(uniqueId());
        this.gaugeShape.setOption(this.type, this.options, this.getCustomStyle().pointerStyle, this.getCustomStyle().ringStyle);
        this.gaugeShape.render();
    };
    GaugeLayer.prototype.getCustomStyle = function () {
        var _a = this.options, color = _a.color, theme = _a.theme;
        var globalTheme = getGlobalTheme();
        var colors = color || globalTheme.colors;
        return getOptions('standard', theme, colors);
    };
    GaugeLayer.prototype.geometryParser = function (dim, type) {
        throw new Error('Method not implemented.');
    };
    GaugeLayer.prototype.scale = function () {
        var _a = this.options, min = _a.min, max = _a.max, format = _a.format, styleMix = _a.styleMix;
        var scales = {
            value: {},
        };
        extractScale(scales.value, {
            min: min,
            max: max,
            minLimit: min,
            maxLimit: max,
            nice: true,
            formatter: format,
            // 自定义 tick step
            tickInterval: styleMix.tickInterval,
        });
        // @ts-ignore
        this.setConfig('scales', scales);
        _super.prototype.scale.call(this);
    };
    GaugeLayer.prototype.coord = function () {
        var coordConfig = {
            type: 'polar',
            cfg: {
                radius: 1,
                startAngle: this.options.startAngle * Math.PI,
                endAngle: this.options.endAngle * Math.PI,
            },
        };
        this.setConfig('coordinate', coordConfig);
    };
    GaugeLayer.prototype.axis = function () {
        var _a = this.options, styleMix = _a.styleMix, style = _a.style;
        var thickness = this.getCustomStyle().ringStyle.thickness;
        var offset = typeof styleMix.tickLabelPos === 'number'
            ? -styleMix.tickLabelPos
            : styleMix.tickLabelPos === 'outer'
                ? 0.8
                : -0.8;
        var axesConfig = {};
        axesConfig.value = {
            line: null,
            grid: null,
            label: {
                offset: offset * (styleMix.stripWidth + styleMix.tickLabelSize + thickness),
                textStyle: {
                    fontSize: styleMix.tickLabelSize,
                    fill: styleMix.tickLabelColor,
                    textAlign: 'center',
                    textBaseline: 'middle',
                },
            },
            tickLine: null,
            subTickCount: styleMix.subTickCount,
            subTickLine: {
                length: offset * (styleMix.stripWidth + 1),
                stroke: styleMix.tickLineColor,
                lineWidth: 1,
                lineDash: [0, styleMix.stripWidth / 2, Math.abs(offset * (styleMix.stripWidth + 1))],
            },
            labelAutoRotate: true,
        };
        axesConfig['1'] = false;
        this.setConfig('axes', axesConfig);
    };
    GaugeLayer.prototype.addGeometry = function () {
        var styleMix = this.options.styleMix;
        var pointerColor = styleMix.pointerColor || this.theme.defaultColor;
        var pointer = {
            type: 'point',
            position: {
                fields: ['value', '1'],
            },
            shape: {
                values: ['gauge'],
            },
            color: {
                values: [pointerColor],
            },
        };
        this.setConfig('geometry', pointer);
    };
    GaugeLayer.prototype.annotation = function () {
        var _a = this.options, statistic = _a.statistic, style = _a.style;
        var annotationConfigs = [];
        // @ts-ignore
        if (statistic && statistic.visible) {
            var statistics = this.renderStatistic();
            annotationConfigs.push(statistics);
        }
        this.setConfig('annotations', annotationConfigs);
    };
    GaugeLayer.prototype.renderStatistic = function () {
        var _a = this.options, statistic = _a.statistic, styleMix = _a.styleMix;
        var text = {
            type: 'text',
            content: statistic.text,
            top: true,
            position: styleMix.statistic.position,
            style: {
                fill: styleMix.statistic.color,
                fontSize: styleMix.statistic.size,
                textAlign: 'center',
                textBaseline: 'middle',
            },
        };
        return text;
    };
    GaugeLayer.prototype.parseEvents = function (eventParser) {
        _super.prototype.parseEvents.call(this, EventParser);
    };
    return GaugeLayer;
}(ViewLayer));
export default GaugeLayer;
registerPlotType('gauge', GaugeLayer);
//# sourceMappingURL=layer.js.map