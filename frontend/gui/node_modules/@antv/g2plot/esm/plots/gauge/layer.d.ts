import { LayerConfig } from '../../base/layer';
import ViewLayer from '../../base/view-layer';
import './theme';
import { GaugeViewConfig } from './options';
export interface GaugeLayerConfig extends GaugeViewConfig, LayerConfig {
}
export default class GaugeLayer<T extends GaugeLayerConfig = GaugeLayerConfig> extends ViewLayer<T> {
    data: [];
    gaugeShape: any;
    options: any;
    constructor(props: any);
    static getDefaultOptions(): any;
    type: string;
    init(): void;
    protected getStyleMix(): any;
    /**
     * 绘制指针
     */
    protected initG2Shape(): void;
    protected getCustomStyle(): {
        ringStyle: {
            background: string;
            axis: {
                amount: number;
                offset: number;
                length: number;
                thickness: number;
                color: string;
            };
            color: any;
            thickness: number;
            radius: number;
            angle: number;
            textPosition: string;
            bottomRatio?: undefined;
        };
        pointerStyle: {
            radius: number;
            color: string;
            circleColorTop: string;
            circleColorBottom: string;
            thickness: number;
        };
    } | {
        ringStyle: {
            color: any;
            background: string;
            thickness: number;
            radius: number;
            angle: number;
            textPosition: string;
            bottomRatio: number;
            axis: {
                amount: number;
                offset: number;
                length: number;
                thickness: number;
                color: string;
            };
        };
        pointerStyle: {
            radius: number;
            color: string;
            circleColorTop: string;
            circleColorBottom: string;
            thickness: number;
        };
    };
    protected geometryParser(dim: string, type: string): string;
    protected scale(): void;
    protected coord(): void;
    protected axis(): void;
    protected addGeometry(): void;
    protected annotation(): void;
    protected renderStatistic(): {
        type: string;
        content: any;
        top: boolean;
        position: any;
        style: {
            fill: any;
            fontSize: any;
            textAlign: string;
            textBaseline: string;
        };
    };
    protected parseEvents(eventParser: any): void;
}
