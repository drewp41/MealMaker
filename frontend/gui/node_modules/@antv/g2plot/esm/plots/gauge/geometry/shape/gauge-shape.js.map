{"version":3,"file":"gauge-shape.js","sourceRoot":"","sources":["../../../../../src/plots/gauge/geometry/shape/gauge-shape.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * @author linhuiw\n * @description 仪表盘形状\n */\nimport { clone, deepMix } from '@antv/util';\nimport { registerShape } from '@antv/g2';\nimport { IGroup } from '@antv/g-base';\nimport { GaugeViewConfig, GaugeAxis, GaugePivot } from '../../interface';\nimport { getGlobalTheme } from '../../../../theme';\nimport { sortedLastIndex } from '../../../../util/common';\n\n/**\n * 仪表盘指针图形\n * 指针主体由梯形和一大一小圆形组成，\n * 中心处由灰色圆底和小白圆加以装饰\n */\nexport class GaugeShape {\n  uid: any;\n\n  ringRadius: number;\n\n  center: any;\n\n  group: any;\n\n  options: GaugeViewConfig;\n\n  axis: GaugeAxis;\n\n  pivot: GaugePivot;\n\n  type: string;\n\n  constructor(uid: any) {\n    this.uid = uid;\n  }\n\n  setOption(type, options: any) {\n    this.type = type;\n    this.options = options;\n    this.axis = options.axis;\n    this.pivot = options.pivot;\n  }\n\n  render() {\n    const Gauge = this; // eslint-disable-line @typescript-eslint/no-this-alias\n    registerShape('point', 'gauge', {\n      draw(cfg: any, group: IGroup) {\n        this.gauge = {} as any;\n        this.gauge.options = Gauge.options;\n        this.gauge.axis = Gauge.axis;\n        this.gauge.pivot = Gauge.pivot;\n        this.gauge.type = Gauge.type;\n        const gauge = this.gauge;\n        const type = this.gauge.type;\n        const point = cfg.points[0];\n        const center = this.parsePoint({\n          x: 0,\n          y: 0,\n        });\n\n        const target = this.parsePoint({\n          x: point.x || 0,\n          y: 1,\n        });\n\n        gauge.center = center;\n        gauge.group = group;\n\n        const r = { x: center.x - target.x, y: center.y - target.y };\n\n        this.gauge.ringRadius = Math.sqrt(r.x * r.x + r.y * r.y);\n\n        const { starAngle, endAngle } = this.getAngleRange();\n        const currentAngle = point.x * (endAngle - starAngle) + starAngle;\n\n        switch (type) {\n          case 'meterGauge':\n            this.drawBarGauge(currentAngle);\n            if (this.gauge.axis.visible) {\n              this.drawInSideAxis();\n            }\n            break;\n          case 'fanGauge':\n            this.drawGauge(currentAngle);\n            if (this.gauge.axis.visible) {\n              this.drawOutSideAxis();\n            }\n            break;\n          case 'standardGauge':\n          default:\n            this.drawGauge(currentAngle);\n            if (this.gauge.axis.visible) {\n              this.drawAxis();\n            }\n            break;\n        }\n\n        // 绘制指针\n        if (this.gauge.pivot.visible) {\n          this.drawPivot(cfg, group);\n        }\n      },\n\n      drawGauge(currentAngle: number) {\n        const { range } = this.gauge.options;\n        this.drawBottomRing(); // 绘制灰底色\n\n        if (range && range.length) {\n          this.drawRangeColor();\n        } else {\n          this.drawCurrentRing(currentAngle);\n        }\n      },\n\n      drawRangeColor() {\n        const { min, max, range, color, rangeStyle } = this.gauge.options;\n        const colors = color || getGlobalTheme().colors;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        for (let i = 0; i < range.length; i++) {\n          const start = this.valueToAngle(range[i], config);\n          const end = this.valueToAngle(range[i + 1], config);\n\n          if (end >= start) {\n            const path2 = this.getPath(start, end);\n            const style = deepMix({ fill: colors[i] }, rangeStyle);\n            this.drawRing(path2, style);\n          }\n        }\n      },\n\n      drawBottomRing() {\n        const { starAngle, endAngle } = this.getAngleRange();\n        const backgroundStyle = this.gauge.options.rangeBackgroundStyle;\n        const path = this.getPath(starAngle, endAngle);\n        this.drawRing(path, backgroundStyle);\n      },\n\n      drawCurrentRing(current: number) {\n        const { starAngle } = this.getAngleRange();\n        const { color } = this.gauge.ringStyle;\n        const path3 = this.getPath(starAngle, current);\n        this.drawRing(path3, color);\n      },\n\n      drawInSideAxis() {\n        const { min, max, axis } = this.gauge.options;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (max - min) / axis.tickCount;\n        for (let i = 0; i < axis.tickCount; i++) {\n          const startValue = min + i * interval;\n          const angle = this.valueToAngle(startValue + interval / 2, config);\n          this.drawRect(angle, {\n            length: axis.tickLine.length,\n            style: axis.tickLine.style,\n          });\n        }\n      },\n\n      drawAxis() {\n        const axis = this.gauge.axis;\n        const { min, max } = this.gauge.options;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (max - min) / (axis.tickCount - 1);\n        for (let i = 0; i < axis.tickCount; i++) {\n          const startValue = min + i * interval;\n          const angle = this.valueToAngle(startValue, config);\n          const tickLineStyle = clone(axis.tickLine.style);\n          if (i % 5 !== 0) {\n            tickLineStyle.lineWidth = tickLineStyle.lineWidth / 2;\n          }\n          this.drawRect(angle, {\n            length: i % 5 === 0 ? axis.tickLine.length : axis.tickLine.length / 2,\n            style: tickLineStyle,\n          });\n        }\n      },\n\n      drawOutSideAxis() {\n        const { axis } = this.gauge;\n        const { min, max } = this.gauge.options;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (max - min) / (axis.tickCount - 1);\n        for (let i = 0; i < axis.tickCount; i++) {\n          const startValue = min + i * interval;\n          const angle = this.valueToAngle(startValue, config);\n          this.drawRect(angle, {\n            length: axis.tickLine.length,\n            style: axis.tickLine.style,\n          });\n        }\n      },\n\n      drawBarGauge(current: number) {\n        const { min, max, range, color, rangeStyle, rangeBackgroundStyle } = this.gauge.options;\n        const colors = color || getGlobalTheme().colors;\n        const { starAngle, endAngle } = this.getAngleRange();\n        const config = {\n          min,\n          max,\n          starAngle,\n          endAngle,\n        };\n        const interval = (endAngle - starAngle) / (50 - 1);\n        const offset = interval / 3;\n\n        // 由50个柱子组成\n        for (let i = 0; i < 50; i++) {\n          const start = starAngle + i * interval;\n          const path2 = this.getPath(start - offset / 2, start + offset - offset / 2);\n\n          let style = rangeBackgroundStyle;\n          if (range && range.length) {\n            const result1 = range.map((item: any) => {\n              return this.valueToAngle(item, config);\n            });\n\n            const index = sortedLastIndex(result1, start);\n            /** 最后一个值也在最后一个区间内 */\n            const colorIndex = Math.min(index, range.length - 1);\n            style = deepMix({}, { fill: colors[colorIndex - 1] }, rangeStyle) || rangeBackgroundStyle;\n          } else {\n            style = current >= start ? deepMix({}, { fill: color }, rangeStyle) : rangeBackgroundStyle;\n          }\n\n          this.drawRing(path2, style);\n        }\n      },\n\n      getAngleRange() {\n        const { angle } = this.gauge.options;\n        const angleValue = 90 - (360 - angle) * 0.5;\n        const starAngle = ((270 - 90 - angleValue) * Math.PI) / 180;\n        const endAngle = ((270 + 90 + angleValue) * Math.PI) / 180;\n\n        return { starAngle, endAngle };\n      },\n\n      valueToAngle(value: number, config: any) {\n        const { min, max, starAngle, endAngle } = config;\n        if (value === max) {\n          return endAngle;\n        }\n        if (value === min) {\n          return starAngle;\n        }\n        let ratio = (value - min) / (max - min);\n        if (max === min) {\n          ratio = 1;\n        }\n        let angle = ratio * (endAngle - starAngle) + starAngle;\n        angle = Math.max(angle, starAngle);\n        angle = Math.min(angle, endAngle);\n\n        return angle;\n      },\n\n      drawRing(path: string, style: any) {\n        this.gauge.group.addShape('path', {\n          attrs: deepMix(\n            {},\n            {\n              path,\n            },\n            style\n          ),\n        });\n      },\n\n      drawRect(angle: number, param?: any) {\n        const { axis } = this.gauge;\n        const config = { ...axis, ...param };\n        const { offset, length } = config;\n        const center = this.gauge.center;\n\n        let radius;\n        if (offset < 0) {\n          radius = this.gauge.ringRadius - this.gauge.options.rangeSize + offset;\n        } else {\n          radius = this.gauge.ringRadius + offset;\n        }\n\n        const xA1 = radius * Math.cos(angle) + center.x;\n        const yA1 = radius * Math.sin(angle) + center.y;\n\n        const xB1 = (radius + length) * Math.cos(angle) + center.x;\n        const yB1 = (radius + length) * Math.sin(angle) + center.y;\n\n        this.gauge.group.addShape('line', {\n          attrs: deepMix(\n            {},\n            {\n              x1: xA1,\n              y1: yA1,\n              x2: xB1,\n              y2: yB1,\n            },\n            param.style\n          ),\n        });\n      },\n\n      getPath(starAngle: number, endAngle: number) {\n        /* const type = this.gauge.type;\n        const height = get(gauge, 'options.height');\n        const width = get(gauge, 'options.width');*/\n        const center = this.gauge.center;\n        const length = this.gauge.ringRadius;\n        /*let thick;\n         const { minThickness, minThickCanvsSize } = this.gauge.ringStyle;\n        const size = Math.min(width, height);\n        if (type === 'fan' && size < minThickCanvsSize) {\n          thick = length - minThickness;\n        } else {*/\n        const thick = this.gauge.options.rangeSize;\n        //}\n\n        const xA1 = length * Math.cos(starAngle) + center.x;\n        const yA1 = length * Math.sin(starAngle) + center.y;\n        const xA2 = (length - thick) * Math.cos(starAngle) + center.x;\n        const yA2 = (length - thick) * Math.sin(starAngle) + center.y;\n        const xB1 = length * Math.cos(endAngle) + center.x;\n        const yB1 = length * Math.sin(endAngle) + center.y;\n        const xB2 = (length - thick) * Math.cos(endAngle) + center.x;\n        const yB2 = (length - thick) * Math.sin(endAngle) + center.y;\n\n        const largeArcFlag = Math.abs(starAngle - endAngle) > Math.PI ? 1 : 0;\n        return [\n          ['M', xA1, yA1],\n          ['A', length, length, 0, largeArcFlag, 1, xB1, yB1],\n          ['L', xB2, yB2],\n          ['A', length - thick, length - thick, 0, largeArcFlag, 0, xA2, yA2],\n          ['Z'],\n        ];\n      },\n\n      drawPivot(cfg: any) {\n        const { starAngle, endAngle } = this.getAngleRange();\n        const { radius, rangeSize } = this.gauge.options;\n        const pivotConfig = this.gauge.pivot;\n        const bigCircle = pivotConfig.thickness;\n        const smCircle = pivotConfig.thickness / 2.5;\n        const group = this.gauge.group;\n        const point = cfg.points[0];\n        const center = this.parsePoint({\n          x: 0,\n          y: 0,\n        });\n\n        // radius\n        const current = point.x * (endAngle - starAngle) + starAngle;\n        const x = (this.gauge.ringRadius - rangeSize) * radius * Math.cos(current) + this.gauge.center.x;\n        const y = (this.gauge.ringRadius - rangeSize) * radius * Math.sin(current) + this.gauge.center.y;\n\n        const target = {\n          x,\n          y,\n        };\n\n        // 外底色灰圆\n        if (pivotConfig.base.visible) {\n          group.addShape('circle', {\n            attrs: deepMix(\n              {},\n              {\n                x: center.x,\n                y: center.y,\n                r: pivotConfig.base.size ? pivotConfig.base.size / 2 : bigCircle * 2.2,\n              },\n              pivotConfig.base.style\n            ),\n          });\n        }\n        // 指针\n        if (pivotConfig.pointer.visible) {\n          const dirVec = { x: center.x - target.x, y: center.y - target.y };\n\n          const length = Math.sqrt(dirVec.x * dirVec.x + dirVec.y * dirVec.y);\n          dirVec.x *= 1 / length;\n          dirVec.y *= 1 / length;\n\n          const angle1 = -Math.PI / 2;\n          const x1 = Math.cos(angle1) * dirVec.x - Math.sin(angle1) * dirVec.y;\n          const y1 = Math.sin(angle1) * dirVec.x + Math.cos(angle1) * dirVec.y;\n\n          const angle2 = Math.PI / 2;\n          const x2 = Math.cos(angle2) * dirVec.x - Math.sin(angle2) * dirVec.y;\n          const y2 = Math.sin(angle2) * dirVec.x + Math.cos(angle2) * dirVec.y;\n          const path = [\n            ['M', target.x + x1 * smCircle, target.y + y1 * smCircle],\n            ['L', center.x + x1 * bigCircle, center.y + y1 * bigCircle],\n            ['L', center.x + x2 * bigCircle, center.y + y2 * bigCircle],\n            ['L', target.x + x2 * smCircle, target.y + y2 * smCircle],\n            ['Z'],\n          ];\n\n          group.addShape('path', {\n            attrs: deepMix(\n              {},\n              {\n                path,\n              },\n              pivotConfig.pointer.style\n            ),\n          });\n\n          group.addShape('circle', {\n            attrs: {\n              x: target.x,\n              y: target.y,\n              r: smCircle,\n              fill: pivotConfig.pointer.style.fill,\n            },\n          });\n          group.addShape('circle', {\n            attrs: {\n              x: center.x,\n              y: center.y,\n              r: bigCircle,\n              fill: pivotConfig.pointer.style.fill,\n            },\n          });\n        }\n\n        if (pivotConfig.pin.visible) {\n          // 内部白色小圆\n          group.addShape('circle', {\n            attrs: deepMix(\n              {},\n              {\n                x: center.x,\n                y: center.y,\n                r: smCircle / 1.2,\n              },\n              pivotConfig.pin.style\n            ),\n          });\n        }\n      },\n    } as any);\n  }\n}\n"]}