import { __assign, __extends } from "tslib";
import PieBaseLabel from './base-label';
import { getOverlapArea, near } from './utils';
// 默认label和element的偏移 16px
export var DEFAULT_OFFSET = 16;
var PieOuterCenterLabel = /** @class */ (function (_super) {
    __extends(PieOuterCenterLabel, _super);
    function PieOuterCenterLabel() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /** @override 不能大于0 */
    PieOuterCenterLabel.prototype.adjustOption = function (options) {
        _super.prototype.adjustOption.call(this, options);
        if (options.offset < 0) {
            options.offset = 0;
        }
    };
    PieOuterCenterLabel.prototype.getDefaultOptions = function () {
        var theme = this.plot.theme;
        var labelStyle = theme.label.style;
        return {
            offsetX: 0,
            offsetY: 0,
            offset: 12,
            style: __assign(__assign({}, labelStyle), { textBaseline: 'middle' }),
        };
    };
    PieOuterCenterLabel.prototype.adjustItem = function (item) {
        var offset = this.options.offset;
        if (item.textAlign === 'left') {
            item.x += offset > 4 ? 4 : offset / 2;
        }
        else if (item.textAlign === 'right') {
            item.x -= offset > 4 ? 4 : offset / 2;
        }
    };
    /** label 碰撞调整 */
    PieOuterCenterLabel.prototype.layout = function (labels, items, panel) {
        this.adjustOverlap(labels, panel);
    };
    /** 处理标签遮挡问题 */
    PieOuterCenterLabel.prototype.adjustOverlap = function (labels, panel) {
        var _this = this;
        if (this.options.allowOverlap) {
            return;
        }
        // clearOverlap;
        for (var i = 1; i < labels.length; i++) {
            var label = labels[i];
            var overlapArea = 0;
            for (var j = i - 1; j >= 0; j--) {
                var prev = labels[j];
                // fix: start draw point.x is error when textAlign is right
                var prevBox = prev.getBBox();
                var currBox = label.getBBox();
                // if the previous one is invisible, skip
                if (prev.get('parent').get('visible')) {
                    overlapArea = getOverlapArea(prevBox, currBox);
                    if (!near(overlapArea, 0)) {
                        label.get('parent').set('visible', false);
                        break;
                    }
                }
            }
        }
        labels.forEach(function (label) { return _this.checkInPanel(label, panel); });
    };
    /**
     * 超出panel边界的标签默认隐藏
     */
    PieOuterCenterLabel.prototype.checkInPanel = function (label, panel) {
        var box = label.getBBox();
        //  横向溢出 暂不隐藏
        if (!(panel.y <= box.y && panel.y + panel.height >= box.y + box.height)) {
            label.get('parent').set('visible', false);
        }
    };
    return PieOuterCenterLabel;
}(PieBaseLabel));
export default PieOuterCenterLabel;
//# sourceMappingURL=outer-center-label.js.map