{"version":3,"file":"text.js","sourceRoot":"","sources":["../../../../../../src/plots/pie/component/label/utils/text.ts"],"names":[],"mappings":"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","sourcesContent":["import { memoize, isString, values, toString } from '@antv/util';\nconst canvas = document.createElement('canvas');\nconst ctx = canvas.getContext('2d');\n\ninterface Font {\n  fontFamily?: string;\n  fontWeight?: string;\n  fontStyle?: string;\n  fontVariant?: string;\n  fontSize?: number;\n}\n\n/**\n * 计算文本在画布中的宽度\n */\nexport const measureTextWidth = memoize(\n  (text: any, font: Font = {}): number => {\n    const { fontSize, fontFamily, fontWeight, fontStyle, fontVariant } = font;\n    ctx.font = [fontStyle, fontVariant, fontWeight, `${fontSize}px`, fontFamily].join(' ');\n    return ctx.measureText(isString(text) ? text : '').width;\n  },\n  (text: any, font: Font) => (font ? [text, ...values(font)].join('') : text)\n);\n\n/**\n * 获取文本的 ... 文本。\n * 算法（减少每次 measureText 的长度，measureText 的性能跟字符串时间相关）：\n * 1. 先通过 STEP 逐步计算，找到最后一个小于 maxWidth 的字符串\n * 2. 然后对最后这个字符串二分计算\n * @param text 需要计算的文本, 由于历史原因 除了支持string，还支持空值,number和数组等\n * @param maxWidth\n * @param font\n * TODO 后续更新省略算法\n */\nexport const getEllipsisText = (text: any, maxWidth: number, font: Font) => {\n  const STEP = 16; // 每次 16，调参工程师\n  const DOT_WIDTH = measureTextWidth('...', font);\n\n  let leftText;\n\n  if (!isString(text)) {\n    leftText = toString(text);\n  } else {\n    leftText = text;\n  }\n\n  let leftWidth = maxWidth;\n\n  const r = []; // 最终的分段字符串\n  let currentText;\n  let currentWidth;\n\n  if (measureTextWidth(text, font) <= maxWidth) {\n    return text;\n  }\n\n  // 首先通过 step 计算，找出最大的未超出长度的\n  // eslint-disable-next-line no-constant-condition\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, STEP);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      if (currentWidth > leftWidth) {\n        break;\n      }\n    }\n\n    r.push(currentText);\n\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(STEP);\n\n    // 字符串整体没有超出\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  // 最下的最后一个 STEP，使用 1 递增（用二分效果更高）\n  //eslint-disable-next-line no-constant-condition\n  while (true) {\n    // 更新字符串\n    currentText = leftText.substr(0, 1);\n\n    // 计算宽度\n    currentWidth = measureTextWidth(currentText, font);\n\n    // 超出剩余宽度，则停止\n    if (currentWidth + DOT_WIDTH > leftWidth) {\n      break;\n    }\n\n    r.push(currentText);\n    // 没有超出，则计算剩余宽度\n    leftWidth -= currentWidth;\n    leftText = leftText.substr(1);\n\n    if (!leftText) {\n      return r.join('');\n    }\n  }\n\n  return `${r.join('')}...`;\n};\n"]}