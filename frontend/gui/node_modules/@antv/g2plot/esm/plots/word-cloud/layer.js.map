{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/plots/word-cloud/layer.ts"],"names":[],"mappings":"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","sourcesContent":["/**\n * Create By Bruce Too\n * On 2020-02-14\n */\nimport { LayerConfig } from '../..';\nimport { get, deepMix } from '@antv/util';\nimport Layer from '../../base/layer';\nimport WordCloudTooltips from './word-cloud-tooltips';\n\nimport WordCloud from './wordcloud2';\nimport { WordCloudPlotConfig } from './index';\n\nexport type CloudShape =\n  | 'circle'\n  | 'square'\n  | 'cardioid'\n  | 'diamond'\n  | 'triangle'\n  | 'triangle-forward'\n  | 'triangle-backward'\n  | 'triangle-up'\n  | 'triangle-down'\n  | 'pentagon'\n  | 'star';\nexport type Dimension = {\n  x: number;\n  y: number;\n  w: number;\n  h: number;\n};\n\ntype MaskImage = {\n  maskImageCanvas: HTMLCanvasElement;\n  maskImageContext: CanvasRenderingContext2D;\n};\n\nexport type WordCloudData = {\n  word: string;\n  weight: number;\n  id: number; // index in data array. treat as unique id\n  color?: string; // cloud's color\n};\n\n/**\n * Inner start function, refresh canvas immediately(no any delay draw all 'cloud'\n * nearly at same time) with specific id\n */\nexport type InnerStartFunction = (selected: number) => void;\n\nexport type Active = {\n  shadowColor?: string;\n  shadowBlur?: number;\n};\n\nexport type WordStyle = {\n  fontFamily?: string;\n  // normal, lighter, bold, bolder, 100~900\n  fontWeight?: string | ((word: string, weight: number) => string);\n  color?: string | ((word: string, weight: number) => string);\n\n  active?: Active;\n  animatable?: boolean;\n\n  // [min, max] ->  random by steps(each step (max - min) / steps))\n  rotation?: [number, number];\n  rotationSteps?: number;\n  // the ratio of rotate\n  rotateRatio?: number;\n\n  // font's max and min size(determine by cloud's weight)\n  fontSize?: [number, number];\n\n  gridSize?: number;\n  drawOutOfBound?: boolean;\n\n  // scale 1/4 font weight each time till fit in\n  // shrinkToFit?: boolean;\n  // reset cloud's [x,y]\n  // origin?: [number, number];\n};\n\nexport interface WordCloudViewConfig extends WordCloudPlotConfig {\n  data: Array<WordCloudData> | Function;\n  // mask image, black-white pixel image will be better\n  maskImage?: string;\n  backgroundColor?: string;\n  wordStyle?: WordStyle;\n  shuffle?: boolean;\n  selected?: number;\n  tooltip?: {\n    visible: boolean;\n  };\n  shape?: CloudShape | Function;\n\n  onWordCloudHover?: (item: WordCloudData, dimension: Dimension, evt: MouseEvent, start: InnerStartFunction) => {};\n  onWordCloudClick?: (item: WordCloudData, dimension: Dimension, evt: MouseEvent) => {};\n\n  // clear before start\n  // clearCanvas?: boolean;\n  // wait milliseconds before next item show\n  // wait?: number;\n  // If the call with in the loop takes more than x milliseconds (and blocks the browser), abort immediately.\n  // abortThreshold?: number;\n  // abort callback\n  // abort?: () => {};\n  // shape's ellipticity [0,1]\n  // ellipticity?: number;\n  // ONLY FOR DEBUG, DON'T USE US\n  // drawMask?: boolean;\n  // maskColor?: string;\n  // maskGapWidth?: number;\n  // hide for now\n  // classes?: (word: string, weight: number) => string;\n}\n\ninterface WordCloudLayerConfig extends WordCloudViewConfig, LayerConfig {}\n\nexport default class WordCloudLayer extends Layer<WordCloudLayerConfig> {\n  private _targetCanvas: HTMLCanvasElement;\n  private _toolTips: WordCloudTooltips;\n  private readonly _configHoverAction: Function;\n  private readonly _enableToolTips: boolean;\n\n  constructor(props: WordCloudLayerConfig) {\n    super(props);\n    this._configHoverAction = props.onWordCloudHover;\n    this._enableToolTips = get(props, 'tooltip.visible', true);\n    this.options = deepMix(\n      {},\n      {\n        width: 400,\n        height: 400,\n        enableToolTips: true,\n      },\n      props,\n      // replace use config's hover action if needed, and trigger later\n      {\n        onWordCloudHover: this._enableToolTips ? this._toolTipsAction : this._configHoverAction,\n      }\n    );\n  }\n\n  public init() {\n    super.init();\n    this._initToolTips();\n  }\n\n  public render() {\n    super.render();\n    this._render();\n  }\n\n  private _toolTipsAction = (item: WordCloudData, dimension: Dimension, evt: MouseEvent, start: InnerStartFunction) => {\n    if (dimension) {\n      this._toolTips.update({\n        items: [\n          {\n            color: item.color || 'red',\n            name: item.word,\n            value: item.weight,\n          },\n        ],\n        x: evt.offsetX,\n        y: evt.offsetY,\n      });\n      this._toolTips.show();\n    } else {\n      this._toolTips.hide();\n    }\n    this._toolTips.render();\n    this._configHoverAction && this._configHoverAction(item, dimension, evt, start);\n  };\n\n  private _initToolTips() {\n    this._toolTips = new WordCloudTooltips({\n      showTitle: false,\n      visible: false,\n      parent: this.options.container,\n      follow: true,\n      inPanel: false, // must be false\n      items: [],\n    });\n    this._toolTips.init();\n  }\n\n  private _render() {\n    this._targetCanvas = this.canvas.get('el');\n    if (this.options.maskImage) {\n      this._handleMaskImage();\n    } else {\n      // mask image not exist\n      this._start();\n    }\n  }\n\n  private _handleMaskImage() {\n    const image = new Image();\n    image.src = this.options.maskImage + '?' + new Date().getTime();\n    image.crossOrigin = 'Anonymous';\n    image.onload = () => {\n      if (image.naturalHeight + image.naturalWidth === 0 || image.width + image.height === 0) {\n        this._start();\n      } else {\n        // handle no-zero image silhouette\n        this._startWithMaskImage(image);\n      }\n    };\n    image.onerror = () => {\n      console.error('image %s load failed !!!', this.options.maskImage);\n      // load image error, ignore this mask\n      this._start();\n    };\n  }\n\n  private _start() {\n    this._handleG2PlotConfig();\n    const targetCtx = this._targetCanvas.getContext('2d');\n    // it's a trick, because 「g」 use context to scale canvas by pixelRatio,\n    // but here i need scale it back\n    const pixelRatio = this.canvas.get('width') / this.canvas.get('el').width;\n    targetCtx.scale(pixelRatio, pixelRatio);\n    WordCloud(this._targetCanvas, this.options);\n  }\n\n  private _handleG2PlotConfig() {\n    const fontSize = this.options.wordStyle.fontSize || [10, 60];\n    const rotation = this.options.wordStyle.rotation || [-Math.PI / 2, Math.PI / 2];\n    let active, shadowColor, shadowBlur;\n    if (this.options.wordStyle.active) {\n      active = true;\n      shadowColor = this.options.wordStyle.active.shadowColor || '#333';\n      shadowBlur = this.options.wordStyle.active.shadowBlur || 10;\n    } else {\n      active = false;\n    }\n    this.options = deepMix({}, this.options, {\n      minFontSize: fontSize[0],\n      maxFontSize: fontSize[1],\n      minRotation: rotation[0],\n      maxRotation: rotation[1],\n      active,\n      shadowColor,\n      shadowBlur,\n    });\n  }\n\n  private _startWithMaskImage(image: HTMLImageElement) {\n    const { maskImageCanvas, maskImageContext } = this._scaleMaskImageCanvas(this._transformWhite2BlackPixels(image));\n    /* Determine bgPixel by creating\n     another canvas and fill the specified background color. */\n    const bctx = document.createElement('canvas').getContext('2d');\n\n    bctx.fillStyle = this.options.backgroundColor || '#fff';\n    bctx.fillRect(0, 0, 1, 1);\n    const bgPixel = bctx.getImageData(0, 0, 1, 1).data;\n\n    const imageData = maskImageContext.getImageData(0, 0, maskImageCanvas.width, maskImageCanvas.height);\n    const newImageData = maskImageContext.createImageData(imageData);\n    for (let i = 0; i < imageData.data.length; i += 4) {\n      if (imageData.data[i + 3] > 128) {\n        // keep this area's data the same as pixel color\n        newImageData.data[i] = bgPixel[0];\n        newImageData.data[i + 1] = bgPixel[1];\n        newImageData.data[i + 2] = bgPixel[2];\n        newImageData.data[i + 3] = bgPixel[3];\n      } else {\n        // This color must not be the same as the bgPixel.\n        // check wordcloud2.js#1192 's condition\n        newImageData.data[i] = bgPixel[0];\n        newImageData.data[i + 1] = bgPixel[1];\n        newImageData.data[i + 2] = bgPixel[2];\n        newImageData.data[i + 3] = 254; // just for not same as the bg color\n      }\n    }\n\n    maskImageContext.putImageData(newImageData, 0, 0);\n\n    const targetCtx = this._targetCanvas.getContext('2d');\n    targetCtx.drawImage(maskImageCanvas, 0, 0);\n    this.options = deepMix({}, this.options, { clearCanvas: false });\n\n    this._start();\n  }\n\n  private _scaleMaskImageCanvas(maskImageCanvas: HTMLCanvasElement): MaskImage {\n    const maskCanvasScaled = document.createElement('canvas');\n    // get real canvas determined by pixelRatio\n    maskCanvasScaled.width = this.canvas.get('width');\n    maskCanvasScaled.height = this.canvas.get('height');\n    const ctx = maskCanvasScaled.getContext('2d');\n    // keep scale smooth\n    ctx.imageSmoothingEnabled = true;\n    // ctx.mozImageSmoothingEnabled = true;\n    // ctx.webkitImageSmoothingEnabled = true;\n    // ctx.msImageSmoothingEnabled = true;\n    ctx.drawImage(\n      maskImageCanvas,\n      0,\n      0,\n      maskImageCanvas.width,\n      maskImageCanvas.height,\n      0,\n      0,\n      maskCanvasScaled.width,\n      maskCanvasScaled.height\n    );\n    return {\n      maskImageCanvas: maskCanvasScaled,\n      maskImageContext: ctx,\n    };\n  }\n\n  private _transformWhite2BlackPixels(image: HTMLImageElement): HTMLCanvasElement {\n    const maskImageCanvas = document.createElement('canvas');\n    maskImageCanvas.width = image.width;\n    maskImageCanvas.height = image.height;\n    const ctx = maskImageCanvas.getContext('2d');\n    ctx.drawImage(image, 0, 0, image.width, image.height);\n    const imageData = ctx.getImageData(0, 0, maskImageCanvas.width, maskImageCanvas.height);\n    const SINGLE_COMPONENT_SIZE = 4;\n    const BLACK_PIXEL = 0;\n    const FULL_PIXEL = 255;\n    // R - G - B - A\n    for (let i = 0; i < imageData.data.length; i += SINGLE_COMPONENT_SIZE) {\n      const rgb = imageData.data[i] + imageData.data[i + 1] + imageData.data[i + 2];\n      const alpha = imageData.data[i + 3];\n\n      if (alpha < 128 || rgb > 250 * 3) {\n        // white area(not to draw)\n        imageData.data[i] = FULL_PIXEL;\n        imageData.data[i + 1] = FULL_PIXEL;\n        imageData.data[i + 2] = FULL_PIXEL;\n        imageData.data[i + 3] = BLACK_PIXEL;\n      } else {\n        // black area wait to draw(image black silhouette)\n        imageData.data[i] = BLACK_PIXEL;\n        imageData.data[i + 1] = BLACK_PIXEL;\n        imageData.data[i + 2] = BLACK_PIXEL;\n        imageData.data[i + 3] = FULL_PIXEL;\n      }\n    }\n\n    ctx.putImageData(imageData, 0, 0);\n    return maskImageCanvas;\n  }\n}\n"]}