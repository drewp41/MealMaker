{"version":3,"file":"math.js","sourceRoot":"","sources":["../../src/util/math.ts"],"names":[],"mappings":"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","sourcesContent":["import * as matrixUtil from '@antv/matrix-util';\nimport { each, clone } from '@antv/util';\n\nfunction magnitude(v) {\n  let sum = 0;\n  each(v, (value) => {\n    sum += value * value;\n  });\n  return Math.sqrt(sum);\n}\n\nfunction dotProduct2D(va, vb) {\n  return va.x * vb.y + va.y * vb.x;\n}\n\nfunction angleTo(va, vb) {\n  const magA = magnitude(va);\n  const magB = magnitude(vb);\n  const dot = dotProduct2D(va, vb);\n  const angle = Math.acos(dot / magA / magB);\n  return angle;\n}\n\nfunction crossProduct2D(va, vb) {\n  const magA = magnitude(va);\n  const magB = magnitude(vb);\n  const dot = dotProduct2D(va, vb);\n  const angle = Math.acos(dot / magA / magB);\n  return magA * magB * Math.sin(angle);\n}\n\nfunction crossProduct3D(va, vb) {\n  const ax = va.x,\n    ay = va.y,\n    az = va.z;\n  const bx = vb.x,\n    by = vb.y,\n    bz = vb.z;\n\n  const x = ay * bz - az * by;\n  const y = az * bx - ax * bz;\n  const z = ax * by - ay * bx;\n\n  return { x, y, z };\n}\n\nfunction sub2D(va, vb) {\n  return { x: va.x - vb.x, y: va.y - vb.y };\n}\n\nfunction applyMatrix(point, matrix, tag = 1) {\n  const vector = [point.x, point.y, tag];\n  matrixUtil.vec3.transformMat3(vector, vector, matrix);\n  return {\n    x: vector[0],\n    y: vector[1],\n  };\n}\n\nfunction isBetween(value, min, max) {\n  return value >= min && value <= max;\n}\n\nconst tolerance = 0.001;\n\nfunction getLineIntersect(p0, p1, p2, p3) {\n  const E = {\n    x: p2.x - p0.x,\n    y: p2.y - p0.y,\n  };\n  const D0 = {\n    x: p1.x - p0.x,\n    y: p1.y - p0.y,\n  };\n  const D1 = {\n    x: p3.x - p2.x,\n    y: p3.y - p2.y,\n  };\n  const kross = D0.x * D1.y - D0.y * D1.x;\n  const sqrKross = kross * kross;\n  const sqrLen0 = D0.x * D0.x + D0.y * D0.y;\n  const sqrLen1 = D1.x * D1.x + D1.y * D1.y;\n  let point = null;\n  if (sqrKross > tolerance * sqrLen0 * sqrLen1) {\n    const s = (E.x * D1.y - E.y * D1.x) / kross;\n    const t = (E.x * D0.y - E.y * D0.x) / kross;\n    if (isBetween(s, 0, 1) && isBetween(t, 0, 1)) {\n      point = {\n        x: p0.x + s * D0.x,\n        y: p0.y + s * D0.y,\n      };\n    }\n  }\n  return point;\n}\n\nfunction isPointInPolygon(p, polygon) {\n  /** 射线法 */\n  let inside = false;\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n\n    const intersect = yi > p.y !== yj > p.y && p.x <= ((xj - xi) * (p.y - yi)) / (yj - yi) + xi;\n    if (intersect) {\n      inside = !inside;\n    }\n  }\n  return inside;\n}\n\nfunction sqr(v) {\n  return v * v;\n}\n\nfunction dist2(a, b) {\n  return Math.sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));\n}\n\nfunction distBetweenPoints(a, b) {\n  return Math.sqrt(sqr(a.x - b.x) + sqr(a.y - b.y));\n}\n\nfunction distBetweenPointLine(p, p1, p2) {\n  const l2 = dist2(p1, p2);\n  if (l2 === 0) {\n    return dist2(p, p1);\n  }\n  let t = ((p.x - p1.x) * (p2.x - p1.x) + (p.y - p1.y) * (p2.y - p1.y)) / l2;\n  t = Math.max(0, Math.min(1, t));\n  const distSquare = dist2(p, { x: p1.x + t * (p2.x - p1.x), y: p1.y + t * (p2.y - p1.y) });\n  return Math.sqrt(distSquare);\n}\n\n// todo：待优化 https://blog.csdn.net/WilliamSun0122/article/details/77994526\nfunction minDistBetweenPointPolygon(p, polygon) {\n  let min = Infinity;\n  /** vertice to vertice */\n  each(polygon, (v) => {\n    const dist = Math.sqrt(dist2(v, p));\n    if (min > dist) {\n      min = dist;\n    }\n  });\n  /** vertice to edge */\n  for (let i = 0, j = polygon.length - 1; i < polygon.length; j = i++) {\n    const xi = polygon[i].x;\n    const yi = polygon[i].y;\n    const xj = polygon[j].x;\n    const yj = polygon[j].y;\n    const dist = distBetweenPointLine(p, { x: xi, y: yi }, { x: xj, y: yj });\n    if (min > dist) {\n      min = dist;\n    }\n  }\n\n  return min;\n}\n\nfunction isPolygonIntersection(polyA, polyB) {\n  for (const p of polyA) {\n    const inside = isPointInPolygon(p, polyB);\n    if (inside) {\n      return true;\n    }\n  }\n  return false;\n}\n\nfunction minDistBetweenConvexPolygon(polyA, polyB) {\n  if (isPolygonIntersection(polyA, polyB)) {\n    return 0;\n  }\n  let minA = Infinity;\n  let minB = Infinity;\n  each(polyA, (v) => {\n    const localMin = minDistBetweenPointPolygon(v, polyB);\n    if (minA > localMin) {\n      minA = localMin;\n    }\n  });\n  each(polyB, (v) => {\n    const localMin = minDistBetweenPointPolygon(v, polyA);\n    if (minB > localMin) {\n      minB = localMin;\n    }\n  });\n\n  return Math.min(minA, minB);\n}\n\nfunction bboxOnRotate(shape) {\n  const bbox = shape.getBBox();\n  const x = bbox.minX;\n  const y = bbox.minY;\n  /*\n   * step1: 获得旋转后的shape包围盒\n   * 将包围盒对齐到原点，apply旋转矩阵\n   * 移回原来的位置\n   */\n  const bboxWidth = bbox.maxX - bbox.minX;\n  const bboxHeight = bbox.maxY - bbox.minY;\n  // const matrix = shape.getTotalMatrix();\n  const matrix = shape.attr('matrix');\n  let ulMatrix;\n  if (matrix) {\n    ulMatrix = [matrix[0], matrix[1], 0, matrix[3], matrix[4], 0, 0, 0, 1];\n  } else {\n    ulMatrix = [1, 0, 0, 0, 1, 0, 0, 0, 1];\n  }\n  const top_left = applyMatrix({ x: 0, y: 0 }, ulMatrix);\n  top_left.x += x;\n  top_left.y += y;\n  const top_right = applyMatrix({ x: bboxWidth, y: 0 }, ulMatrix);\n  top_right.x += x;\n  top_right.y += y;\n  const bottom_left = applyMatrix({ x: 0, y: bboxHeight }, ulMatrix);\n  bottom_left.x += x;\n  bottom_left.y += y;\n  const bottom_right = applyMatrix({ x: bboxWidth, y: bboxHeight }, ulMatrix);\n  bottom_right.x += x;\n  bottom_right.y += y;\n  /** step2：根据旋转后的画布位置重新计算包围盒，以免图形进行旋转后上下颠倒 */\n  const points = [top_left, top_right, bottom_left, bottom_right];\n  points.sort((a, b) => {\n    return a.y - b.y;\n  });\n  const minY = points[0].y;\n  const maxY = points[points.length - 1].y;\n  const tops = [points[0], points[1]];\n  const bottoms = [points[2], points[3]];\n  const topLeft = tops[0].x < tops[1].x ? tops[0] : tops[1];\n  const topRight = tops[0].x < tops[1].x ? tops[1] : tops[0];\n  const bottomLeft = bottoms[0].x < bottoms[1].x ? bottoms[0] : bottoms[1];\n  const bottomRight = bottoms[0].x < bottoms[1].x ? bottoms[1] : bottoms[0];\n  points.sort((a, b) => {\n    return a.x - b.x;\n  });\n  const minX = points[0].x;\n  const maxX = points[points.length - 1].x;\n  const node = {\n    width: maxX - minX,\n    height: maxY - minY,\n    left: minX,\n    right: maxX,\n    top: minY,\n    bottom: maxY,\n    topLeft,\n    topRight,\n    bottomLeft,\n    bottomRight,\n    centerX: minX + (maxX - minX) / 2,\n    centerY: minY + (maxY - minY) / 2,\n    // shape\n  };\n  return node;\n}\n\n/**\n * 线简化算法\n */\n\nconst THRESHOLD = 2;\n\nfunction lineSimplification(points) {\n  if (points.length < 5) {\n    return points;\n  }\n  return DouglasPeucker(points, THRESHOLD);\n}\n\n// https://en.wikipedia.org/wiki/Ramer%E2%80%93Douglas%E2%80%93Peucker_algorithm\nfunction DouglasPeucker(points, threshold) {\n  let result;\n  let max = -Infinity;\n  let index = 0;\n  const endIndex = points.length - 1;\n  for (let i = 1; i < endIndex; i++) {\n    const point = points[i];\n    const line = { start: points[0], end: points[endIndex] };\n    const dist = distBetweenPointLine(point, line.start, line.end);\n    if (dist > max) {\n      max = dist;\n      index = i;\n    }\n  }\n\n  if (max > threshold) {\n    const list1 = DouglasPeucker(points.slice(0, index + 1), threshold);\n    const list2 = DouglasPeucker(points.slice(index, points.length), threshold);\n    result = list1.concat(list2);\n  } else {\n    result = [points[0], points[points.length - 1]];\n  }\n  return result;\n}\n\n/** 统计的以后迁出去，暂时先放这里 */\nfunction getMedian(array) {\n  const list = clone(array);\n  list.sort((a, b) => {\n    return a - b;\n  });\n\n  const half = Math.floor(list.length / 2);\n\n  if (list.length % 2) {\n    return list[half];\n  }\n\n  return (list[half - 1] + list[half]) / 2.0;\n}\n\nfunction getMean(array) {\n  let sum: number = 0;\n  each(array, (num: number) => {\n    sum += num;\n  });\n  return sum / array.length;\n}\n\nfunction sturges(values) {\n  return Math.ceil(Math.log(values.length) / Math.LN2) + 1;\n}\n\nexport {\n  applyMatrix,\n  isBetween,\n  getLineIntersect,\n  isPointInPolygon,\n  distBetweenPoints,\n  distBetweenPointLine,\n  isPolygonIntersection,\n  minDistBetweenConvexPolygon,\n  bboxOnRotate,\n  dotProduct2D,\n  crossProduct2D,\n  crossProduct3D,\n  sub2D,\n  angleTo,\n  lineSimplification,\n  getMedian,\n  getMean,\n  sturges,\n  dist2,\n};\n\n/**\n * 获取 x/y/width/height指定的BBox边界上的所有点，由step抽样\n * @param x\n * @param y\n * @param width\n * @param height\n * @param step\n */\nexport function getStrokePoints(x: number, y: number, width: number, height: number, step = 2) {\n  const points: Array<[number, number]> = [];\n  // top\n  for (let curX = x; curX <= x + width; curX += step) {\n    points.push([curX, y]);\n  }\n  // right\n  for (let curY = y; curY <= y + height; curY += step) {\n    points.push([x + width, curY]);\n  }\n  // bottom\n  for (let curX = x + width; curX >= x; curX -= step) {\n    points.push([curX, y + height]);\n  }\n  // left\n  for (let curY = y + height; curY >= y; curY -= step) {\n    points.push([x, curY]);\n  }\n  return points;\n}\n"]}