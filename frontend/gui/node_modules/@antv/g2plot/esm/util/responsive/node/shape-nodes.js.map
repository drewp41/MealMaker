{"version":3,"file":"shape-nodes.js","sourceRoot":"","sources":["../../../../src/util/responsive/node/shape-nodes.ts"],"names":[],"mappings":"AAEA,OAAO,EAAE,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAC3C,OAAO,KAAK,QAAQ,MAAM,YAAY,CAAC;AAqBvC;IAKE,oBAAY,GAAa;QADlB,SAAI,GAAW,OAAO,CAAC;QAE5B,IAAI,CAAC,MAAM,GAAG,GAAG,CAAC,MAAM,CAAC;QACzB,IAAI,CAAC,KAAK,GAAG,EAAE,CAAC;QAChB,IAAI,CAAC,YAAY,EAAE,CAAC;QACpB,IAAI,CAAC,aAAa,GAAG,OAAO,CAAC,EAAE,EAAE,IAAI,CAAC,KAAK,CAAC,CAAC;IAC/C,CAAC;IAEM,4BAAO,GAAd,UAAe,KAAK;QAClB,IAAM,IAAI,GAAG,OAAO,CAAC,EAAE,EAAE,QAAQ,CAAC,YAAY,CAAC,KAAK,CAAC,EAAE,EAAE,KAAK,OAAA,EAAE,CAAC,CAAC;QAClE,OAAO,IAAI,CAAC;IACd,CAAC;IAEM,iCAAY,GAAnB;QAAA,iBAaC;QAZC,IAAM,KAAK,GAAG,EAAE,CAAC;QACjB,IAAM,MAAM,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK,EAAE,KAAK;YAC7B,IAAM,IAAI,GAAG,OAAO,CAAC,EAAE,EAAE,KAAI,CAAC,KAAK,CAAC,KAAK,CAAC,EAAE,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC,CAAC;YACjE,IAAI,IAAI,CAAC,KAAK,KAAK,CAAC,IAAI,IAAI,CAAC,MAAM,KAAK,CAAC,EAAE;gBACzC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;gBACjB,MAAM,CAAC,IAAI,CAAC,KAAK,CAAC,CAAC;aACpB;YACD,4BAA4B;QAC9B,CAAC,CAAC,CAAC;QACH,IAAI,CAAC,KAAK,GAAG,KAAK,CAAC;QACnB,IAAI,CAAC,MAAM,GAAG,MAAM,CAAC;IACvB,CAAC;IAEO,iCAAY,GAApB;QAAA,iBAKC;QAJC,IAAI,CAAC,IAAI,CAAC,MAAM,EAAE,UAAC,KAAK;YACtB,IAAM,IAAI,GAAG,KAAI,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;YACjC,KAAI,CAAC,KAAK,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QACxB,CAAC,CAAC,CAAC;IACL,CAAC;IACH,iBAAC;AAAD,CAAC,AAtCD,IAsCC","sourcesContent":["/** 负责将shape数据转为node，使shape根据node数据进行update */\nimport { IShape } from '@antv/g-base';\nimport { deepMix, each } from '@antv/util';\nimport * as MathUtil from '../../math';\n\ninterface NodesCfg {\n  shapes: IShape[];\n}\nexport interface IShapeNode {\n  width: number;\n  height: number;\n  centerX: number;\n  centerY: number;\n  top: number;\n  bottom: number;\n  left: number;\n  right: number;\n  topLeft?: {};\n  topRight?: {};\n  bottomLeft?: {};\n  bottomRight?: {};\n  shape?: IShape;\n}\n\nexport default class ShapeNodes {\n  public shapes: IShape[];\n  public nodes: IShapeNode[];\n  public origion_nodes: IShapeNode[];\n  public type: string = 'shape';\n  constructor(cfg: NodesCfg) {\n    this.shapes = cfg.shapes;\n    this.nodes = [];\n    this._parserNodes();\n    this.origion_nodes = deepMix([], this.nodes);\n  }\n\n  public measure(shape) {\n    const node = deepMix({}, MathUtil.bboxOnRotate(shape), { shape });\n    return node;\n  }\n\n  public measureNodes() {\n    const nodes = [];\n    const shapes = [];\n    each(this.shapes, (shape, index) => {\n      const node = deepMix({}, this.nodes[index], this.measure(shape));\n      if (node.width !== 0 && node.height !== 0) {\n        nodes.push(node);\n        shapes.push(shape);\n      }\n      // this.nodes[index] = node;\n    });\n    this.nodes = nodes;\n    this.shapes = shapes;\n  }\n\n  private _parserNodes() {\n    each(this.shapes, (shape) => {\n      const node = this.measure(shape);\n      this.nodes.push(node);\n    });\n  }\n}\n"]}