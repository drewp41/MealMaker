{"version":3,"file":"nodes-resampling-by-state.js","sourceRoot":"","sources":["../../../../src/util/responsive/rules/nodes-resampling-by-state.ts"],"names":[],"mappings":"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","sourcesContent":["import { IShape } from '@antv/g-base';\nimport { each, clone } from '@antv/util';\nimport textHide from './text-hide';\n\nexport default function nodesResamplingByState(shape: IShape, option, index, cfg) {\n  const nodes = cfg.nodes.nodes;\n  const current = nodes[index];\n  if (current.line) {\n    current.line.remove();\n  }\n\n  const data = cfg.plot.initialProps.data;\n  const field = cfg.plot[cfg.plot.type].label.fields[0];\n  const stateNodes = getStateNodes(data, field, nodes);\n\n  let isState = false;\n  each(stateNodes, (node) => {\n    // @ts-ignore\n    if (node.shape.get('origin') === current.shape.get('origin')) {\n      isState = true;\n    }\n  });\n  if (isState) {\n    if (current.origin_position) {\n      const { x, y } = current.origin_position;\n      shape.attr('x', x);\n      shape.attr('y', y);\n    }\n  } else {\n    textHide(shape);\n  }\n}\n\nfunction getStateNodes(data, field, nodes) {\n  const extract_data = [];\n  each(data, (d) => {\n    extract_data.push(d[field]);\n  });\n  extract_data.sort((a, b) => {\n    return a - b;\n  });\n  const min = extract_data[0];\n  const min_node = getNodeByNumber(nodes, field, min);\n  const max = extract_data[extract_data.length - 1];\n  const max_node = getNodeByNumber(nodes, field, max);\n  const median = getMedian(extract_data);\n  const median_node = getNodeByNumber(nodes, field, median);\n\n  return { min: min_node, max: max_node, median: median_node };\n}\n\nfunction getMedian(array) {\n  const list = clone(array);\n  list.sort((a, b) => {\n    return a - b;\n  });\n\n  const half = Math.floor(list.length / 2);\n\n  if (list.length % 2) {\n    return list[half];\n  }\n\n  return list[half];\n}\n\nfunction getNodeByNumber(nodes, field, num) {\n  for (const node of nodes) {\n    const d = node.shape.get('origin');\n    if (d[field] === num) {\n      return node;\n    }\n  }\n}\n"]}