{"version":3,"file":"digits-abbreviate.js","sourceRoot":"","sources":["../../../../src/util/responsive/rules/digits-abbreviate.ts"],"names":[],"mappings":"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","sourcesContent":["import { IShape } from '@antv/g-base';\nimport { has, each } from '@antv/util';\nimport { getMedian } from '../../math';\n\ninterface DigitsAbbreviateCfg {\n  unit?: 'k' | 'm' | 'b' | 't' | 'auto';\n  formatter?: (val: number) => string;\n  decimal?: number;\n}\nconst unitMapper = {\n  k: { number: 1e3, index: 0 },\n  m: { number: 1e6, index: 1 },\n  b: { number: 1e9, index: 2 },\n  t: { number: 1e12, index: 3 },\n};\n\n// https://gist.github.com/MartinMuzatko/1060fe584d17c7b9ca6e\n// https://jburrows.wordpress.com/2014/11/18/abbreviating-numbers/\n/*tslint:disable*/\n\nexport default function digitsAbbreviate(shape: IShape, option: DigitsAbbreviateCfg, index, cfg) {\n  if (!has(cfg, 'node') || !has(cfg.node, 'node')) {\n    return;\n  }\n  const nodes = cfg.nodes.nodes;\n  const number = parseFloat(shape.get('origin').text);\n  if (number === 0) {\n    return;\n  }\n  if (option.formatter) {\n    shape.attr('text', option.formatter(number));\n    return;\n  }\n  if (option.unit) {\n    const { num, unitname } = abbravateDigitsByUnit(option, number);\n    shape.attr('text', num + unitname);\n  } else {\n    // 自动换算逻辑\n    // 根据中位数得到换算单位\n    const numbers = extractNumbers(nodes);\n    const median = getMedian(numbers);\n    const unitname = getUnitByNumber(median);\n    //根据数值的interval计算换算后保留的浮点数\n    const unitNumber = unitMapper[unitname].number;\n    const interval = getLinearNodesInterval(nodes);\n    const decimal = getDigitsDecimal(interval, unitNumber);\n    const { num } = abbravateDigitsByUnit({ unit: unitname, decimal }, number);\n    shape.attr('text', num + unitname);\n  }\n}\n\nfunction abbravateDigitsByUnit(option, number) {\n  const units = ['k', 'm', 'b', 't'];\n  let num;\n  let unitname;\n  if (option.unit === 'auto') {\n    /** auto formatt k-m-b-t */\n    const order = Math.floor(Math.log(number) / Math.log(1000));\n    unitname = units[order - 1];\n    num = (number / 1000 ** order).toFixed(option.decimal);\n  } else if (option.unit) {\n    const unit = unitMapper[option.unit];\n    unitname = option.unit;\n    num = (number / unit.number).toFixed(option.decimal);\n  }\n  return { num, unitname };\n}\n\nfunction getUnitByNumber(number) {\n  const units = ['k', 'm', 'b', 't'];\n  const order = Math.floor(Math.log(number) / Math.log(1000));\n  return units[order - 1];\n}\n\nfunction extractNumbers(nodes) {\n  const numbers = [];\n  each(nodes, (node) => {\n    const n = node as any;\n    const number = parseFloat(n.shape.get('origin').text);\n    numbers.push(number);\n  });\n  return numbers;\n}\n\nfunction getLinearNodesInterval(nodes) {\n  if (nodes.length >= 2) {\n    const a = parseFloat(nodes[0].shape.get('origin').text);\n    const b = parseFloat(nodes[1].shape.get('origin').text);\n    return Math.abs(a - b);\n  }\n  return 0;\n}\n\nfunction getDigitsDecimal(interval, unitNumber) {\n  const unitBit = Math.floor(Math.log10(unitNumber));\n  if (interval >= unitNumber) {\n    const remainder = interval % unitNumber;\n    if (remainder > 0) {\n      const remainderBit = Math.floor(Math.log10(remainder));\n      return Math.abs(remainderBit - unitBit);\n    }\n  } else {\n    const intervalBit = Math.floor(Math.log10(interval));\n    return Math.abs(intervalBit - unitBit);\n  }\n  return 0;\n}\n"]}