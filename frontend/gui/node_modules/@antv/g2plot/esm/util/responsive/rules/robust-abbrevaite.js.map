{"version":3,"file":"robust-abbrevaite.js","sourceRoot":"","sources":["../../../../src/util/responsive/rules/robust-abbrevaite.ts"],"names":[],"mappings":"AAEA,OAAO,wBAAwB,EAAE,EAAE,MAAM,EAAE,MAAM,8BAA8B,CAAC;AAChF,OAAO,gBAAgB,MAAM,qBAAqB,CAAC;AACnD,OAAO,cAAc,MAAM,mBAAmB,CAAC;AAS/C,MAAM,CAAC,OAAO,UAAU,gBAAgB,CAAC,KAAa,EAAE,MAA2B,EAAE,KAAK,EAAE,GAAG;IAC7F,IAAM,KAAK,GAAG,GAAG,CAAC,KAAK,CAAC,KAAK,CAAC;IAC9B,IAAM,IAAI,GAAG,KAAK,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;IAChC,yBAAyB;IACzB,IAAM,KAAK,GAAG,OAAO,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;IACjC,IAAI,KAAK,EAAE;QACT,gBAAgB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KAC/C;SAAM,IAAI,MAAM,CAAC,IAAI,CAAC,EAAE;QACvB,wBAAwB,CAAC,KAAK,EAAE,MAAM,EAAE,KAAK,EAAE,KAAK,CAAC,CAAC;KACvD;SAAM;QACL,cAAc,CAAC,KAAK,EAAE,MAAM,CAAC,CAAC;KAC/B;AACH,CAAC","sourcesContent":["import { IShape } from '@antv/g-base';\n\nimport datetimeStringAbbrevaite, { isTime } from './datetime-string-abbrevaite';\nimport digitsAbbreviate from './digits-abbreviate';\nimport textAbbreviate from './text-abbreviate';\n\ninterface RobustAbbrevaiteCfg {\n  keep?: string[];\n  abbreviateBy?: 'start' | 'middle' | 'end';\n  unit?: 'k' | 'm' | 'b' | 't' | 'auto';\n  decimal?: number;\n}\n\nexport default function robustAbbrevaite(shape: IShape, option: RobustAbbrevaiteCfg, index, cfg) {\n  const nodes = cfg.nodes.nodes;\n  const text = shape.attr('text');\n  /** 判断text类型： 数字、时间、文本 */\n  const isnum = /^\\d+$/.test(text);\n  if (isnum) {\n    digitsAbbreviate(shape, option, index, nodes);\n  } else if (isTime(text)) {\n    datetimeStringAbbrevaite(shape, option, index, nodes);\n  } else {\n    textAbbreviate(shape, option);\n  }\n}\n"]}