{"version":3,"file":"axis.js","sourceRoot":"","sources":["../../../../src/util/responsive/apply/axis.ts"],"names":[],"mappings":"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","sourcesContent":["import { Axis } from '../../../dependents';\nimport { each } from '@antv/util';\nimport ShapeNodes from '../node/shape-nodes';\nimport Responsive from '../responsive';\nimport ApplyResponsive from './base';\n\nconst SCALE_MAPPER = {\n  cat: 'category',\n  timeCat: 'category',\n  time: 'dateTime',\n  linear: 'linear',\n};\n\nexport default class ApplyResponsiveAxis extends ApplyResponsive {\n  private dim: string;\n  private axisInstance: Axis.Base;\n\n  protected init() {\n    this.axisInstance = this.getAxisInstance();\n    super.init();\n  }\n\n  protected shouldApply() {\n    const { options } = this.plot;\n    if (!this.responsiveTheme.axis) {\n      return false;\n    }\n    if (\n      this.responsiveTheme.axis[this.dim] &&\n      options[`${this.dim}Axis`].visible &&\n      options[`${this.dim}Axis`].label &&\n      options[`${this.dim}Axis`].label.visible\n    ) {\n      return true;\n    }\n    return false;\n  }\n\n  protected apply() {\n    const rawLabels = this.plot.view.backgroundGroup.findAll((el) => {\n      const name = el.get('name');\n      if (name === 'axis-label') {\n        const field = el.get('delegateObject').axis.get('field');\n        if (field === this.plot.options[`${this.dim}Field`]) {\n          return el;\n        }\n      }\n    });\n    const shapes = [];\n    for (let i = 0; i < rawLabels.length; i++) {\n      shapes.push(rawLabels[i]);\n    }\n    const shapeNodes = new ShapeNodes({\n      shapes,\n    });\n    const { constraints, rules } = this.responsiveTheme.axis.x[this.type];\n    new Responsive({\n      nodes: shapeNodes,\n      constraints,\n      region: this.plot.getViewRange(),\n      rules,\n      plot: this.plot,\n      onEnd: (nodes) => {\n        this.updateTicks(nodes.origion_nodes);\n      },\n    });\n  }\n\n  protected getType() {\n    const props = this.plot.options;\n    const axis = `${this.dim}Axis`;\n    const field = `${this.dim}Field`;\n    if (props[axis] && props[axis].type && props[axis].type === 'dateTime') {\n      return 'dateTime';\n    }\n    const scaleType = this.plot.view.getScaleByField([props[field]]).type;\n    return SCALE_MAPPER[scaleType];\n  }\n\n  private getAxisInstance() {\n    const axisIndex = this.dim === 'x' ? 0 : 1;\n    const axis = this.plot.view.getController('axis').getComponents()[axisIndex].component;\n    return axis;\n  }\n\n  private updateTicks(nodes) {\n    const tickLineContainer = this.plot.view.backgroundGroup.findAll((el) => {\n      const name = el.get('name');\n      if (name === 'axis-tickline-group') {\n        const field = el.get('delegateObject').axis.get('field');\n        if (field === this.plot.options[`${this.dim}Field`]) {\n          return el;\n        }\n      }\n    })[0];\n    if (tickLineContainer) {\n      const tickShapes = tickLineContainer.get('children');\n      each(nodes, (n, index) => {\n        if (n.shape.attr('text') === '') {\n          tickShapes[index].attr('opacity', 0);\n        }\n      });\n    }\n    this.plot.canvas.draw();\n  }\n}\n"]}