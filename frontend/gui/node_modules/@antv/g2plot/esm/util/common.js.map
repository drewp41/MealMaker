{"version":3,"file":"common.js","sourceRoot":"","sources":["../../src/util/common.ts"],"names":[],"mappings":";AAAA,OAAO,EAAsB,cAAc,EAAE,MAAM,eAAe,CAAC;AAEnE;;;;GAIG;AACH,MAAM,UAAU,YAAY,CAAC,MAA6C;IACxE,IAAI,CAAC,MAAM;QAAE,OAAO,KAAK,CAAC;IAC1B,IAAI,MAAM,CAAC,OAAO,KAAK,IAAI,IAAI,OAAO,MAAM,CAAC,IAAI,KAAK,QAAQ,IAAI,MAAM,CAAC,IAAI,CAAC,IAAI,EAAE;QAAE,OAAO,IAAI,CAAC;IAClG,OAAO,KAAK,CAAC;AACf,CAAC;AAED;;;;;;;;;;;GAWG;AACH,MAAM,UAAU,SAAS,CAAC,MAAgB,EAAE,MAAgB;IAC1D,IAAM,MAAM,kBAAO,MAAM,CAAC,CAAC;IAC3B,MAAM,CAAC,OAAO,CAAC,UAAC,GAAG,EAAE,KAAK;QACxB,MAAM,CAAC,MAAM,CAAC,GAAG,GAAG,KAAK,EAAE,CAAC,EAAE,IAAI,CAAC,CAAC;IACtC,CAAC,CAAC,CAAC;IACH,OAAO,MAAM,CAAC,IAAI,CAAC,EAAE,CAAC,CAAC;AACzB,CAAC;AAED;;GAEG;AACH,MAAM,UAAU,iBAAiB,CAAC,IAAU;IAC1C,OAAO,IAAI;SACR,aAAa,EAAE;SACf,MAAM,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,IAAI,KAAK,cAAc,CAAC,IAAI,EAA/B,CAA+B,CAAC;SAC/C,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,SAAS,EAAZ,CAAY,CAAgB,CAAC;AAC9C,CAAC;AAED,MAAM,UAAU,mBAAmB,CAAC,IAAU;IAC5C,OAAO,IAAI;SACR,aAAa,EAAE;SACf,MAAM,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,IAAI,KAAK,cAAc,CAAC,MAAM,EAAjC,CAAiC,CAAC;SACjD,GAAG,CAAC,UAAC,EAAE,IAAK,OAAA,EAAE,CAAC,SAAS,EAAZ,CAAY,CAAkB,CAAC;AAChD,CAAC;AAED,MAAM,UAAU,aAAa,CAAC,IAAI;IAChC,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,EAAE;QAChD,IAAI,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAClB,IAAM,MAAI,GAAG,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,CAAC,KAAK,CAAC,GAAG,CAAC,CAAC;YACvC,OAAO,MAAI,CAAC,CAAC,CAAC,KAAK,MAAM,CAAC;SAC3B;IACH,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,eAAe,CAAC,IAAI;IAClC,IAAM,SAAS,GAAG,IAAI,CAAC,eAAe,CAAC,OAAO,CAAC,UAAC,EAAE;QAChD,IAAI,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,EAAE;YAClB,OAAO,EAAE,CAAC,GAAG,CAAC,MAAM,CAAC,KAAK,mBAAmB,CAAC;SAC/C;IACH,CAAC,CAAC,CAAC;IACH,OAAO,SAAS,CAAC;AACnB,CAAC;AAED,MAAM,UAAU,eAAe,CAAI,GAAQ,EAAE,GAAM;IACjD,IAAI,CAAC,GAAG,GAAG,CAAC,MAAM,CAAC;IACnB,OAAO,CAAC,GAAG,CAAC,EAAE;QACZ,IAAI,GAAG,IAAI,GAAG,CAAC,CAAC,GAAG,CAAC,CAAC,EAAE;YACrB,MAAM;SACP;QACD,CAAC,IAAI,CAAC,CAAC;KACR;IACD,OAAO,CAAC,CAAC;AACX,CAAC","sourcesContent":["import { View, Axis, Legend, COMPONENT_TYPE } from '../dependents';\n\n/**\n * 判断text是否可用, title description\n *\n * @param source\n */\nexport function isTextUsable(source?: { visible?: boolean; text?: string }): boolean {\n  if (!source) return false;\n  if (source.visible === true && typeof source.text === 'string' && source.text.trim()) return true;\n  return false;\n}\n\n/**\n * 为字符串添加换行符\n * @param source - 字符串数组 ['a', 'b', 'c']\n * @param breaks - 要添加换行的index\n *\n * @example\n * ```js\n * breakText(['a','b','c'], [1])\n *\n * // a\\nbc\n * ```\n */\nexport function breakText(source: string[], breaks: number[]): string {\n  const result = [...source];\n  breaks.forEach((pos, index) => {\n    result.splice(pos + index, 0, '\\n');\n  });\n  return result.join('');\n}\n\n/**\n * 获取 View 中所有的 Axis 组件\n */\nexport function getAxisComponents(view: View): Axis.Base[] {\n  return view\n    .getComponents()\n    .filter((co) => co.type === COMPONENT_TYPE.AXIS)\n    .map((co) => co.component) as Axis.Base[];\n}\n\nexport function getLegendComponents(view: View): Legend.Base[] {\n  return view\n    .getComponents()\n    .filter((co) => co.type === COMPONENT_TYPE.LEGEND)\n    .map((co) => co.component) as Legend.Base[];\n}\n\nexport function getAxisShapes(view) {\n  const axisShape = view.backgroundGroup.findAll((el) => {\n    if (el.get('name')) {\n      const name = el.get('name').split('-');\n      return name[0] === 'axis';\n    }\n  });\n  return axisShape;\n}\n\nexport function getLegendShapes(view) {\n  const axisShape = view.foregroundGroup.findAll((el) => {\n    if (el.get('name')) {\n      return el.get('name') === 'legend-item-group';\n    }\n  });\n  return axisShape;\n}\n\nexport function sortedLastIndex<T>(arr: T[], val: T): number {\n  let i = arr.length;\n  while (i > 0) {\n    if (val >= arr[i - 1]) {\n      break;\n    }\n    i -= 1;\n  }\n  return i;\n}\n"]}