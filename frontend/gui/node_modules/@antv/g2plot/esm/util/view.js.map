{"version":3,"file":"view.js","sourceRoot":"","sources":["../../src/util/view.ts"],"names":[],"mappings":"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","sourcesContent":["import { head, filter, map, some } from '@antv/util';\nimport { View, Geometry, Element, IShape, IGroup, IElement, MappingDatum, ORIGIN } from '../dependents';\nimport BBox from '../util/bbox';\n\nexport function getAllGeometryByType(view: View, type: string): Geometry[] {\n  return filter(view.geometries, (geometry: Geometry) => geometry.type === type);\n}\n\nexport function getGeometryByType(view: View, type: string): Geometry | undefined {\n  return head(getAllGeometryByType(view, type));\n}\n\nexport function getGeometryShapes(geometry: Geometry): (IShape | IGroup)[] {\n  return map(geometry.elements, (element: Element) => element.shape);\n}\n\n/** 检测是否有和已存在的Shape数据`相等`的情况 */\nexport function checkOriginEqual(\n  cur: IElement,\n  dones: IElement[],\n  compare: (a: MappingDatum, b: MappingDatum) => boolean\n) {\n  return some(dones, (done) => {\n    return compare(done.get(ORIGIN), cur.get(ORIGIN));\n  });\n}\n\n/** 将label调整到panel内 */\nexport function moveInPanel(shape: IElement, panel: BBox) {\n  const box = shape.getBBox();\n  let deltaX = 0;\n  let deltaY = 0;\n\n  if (box.minX < panel.minX) {\n    deltaX = box.minX - panel.minX;\n  } else if (box.maxX > panel.maxX) {\n    deltaX = box.maxX - panel.maxX;\n  }\n  if (deltaX) {\n    shape.attr('x', shape.attr('x') - deltaX);\n  }\n\n  if (box.minY < panel.minY) {\n    deltaY = box.minY - panel.minY;\n  } else if (box.maxY > panel.maxY) {\n    deltaY = box.maxY - panel.maxY;\n  }\n  if (deltaY) {\n    shape.attr('y', shape.attr('y') - deltaY);\n  }\n}\n\n/**\n * 计算两个矩形之间的堆叠区域面积\n */\nexport function getOverlapArea(a: BBox, b: BBox, margin = 0) {\n  const xOverlap = Math.max(\n    0,\n    Math.min(a.x + a.width + margin, b.x + b.width + margin) - Math.max(a.x - margin, b.x - margin)\n  );\n  const yOverlap = Math.max(\n    0,\n    Math.min(a.y + a.height + margin, b.y + b.height + margin) - Math.max(a.y - margin, b.y - margin)\n  );\n\n  return xOverlap * yOverlap;\n}\n\n/** 检测是否和已布局的堆叠 */\nexport function checkShapeOverlap(cur: IElement, dones: IElement[]) {\n  const box = cur.getBBox();\n  return some(dones, (done) => {\n    const target = done.getBBox();\n    return getOverlapArea(box, target, 2) > 0;\n  });\n}\n"]}