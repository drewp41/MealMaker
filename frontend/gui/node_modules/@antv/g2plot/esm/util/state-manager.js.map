{"version":3,"file":"state-manager.js","sourceRoot":"","sources":["../../src/util/state-manager.ts"],"names":[],"mappings":";AAAA;;GAEG;AACH,yBAAyB;AACzB,OAAO,YAAY,MAAM,qBAAqB,CAAC;AAC/C,OAAO,EAAE,IAAI,EAAE,MAAM,YAAY,CAAC;AAKlC;IAA0C,gCAAY;IAKpD;QAAA,YACE,iBAAO,SAGR;QAFC,KAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;;IACxB,CAAC;IAEM,+BAAQ,GAAf,UAAgB,IAAY,EAAE,GAAQ;QACpC,IAAI,CAAC,WAAW,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;QAC7B,IAAI,CAAC,SAAS,EAAE,CAAC;IACnB,CAAC;IAEM,+BAAQ,GAAf,UAAgB,IAAY;QAC1B,OAAO,IAAI,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAC5B,CAAC;IAEM,mCAAY,GAAnB;QACE,OAAO,IAAI,CAAC,OAAO,CAAC;IACtB,CAAC;IAEM,4BAAK,GAAZ;QACE,IAAI,CAAC,OAAO,GAAG,EAAE,CAAC;QAClB,IAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACtB,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;IACH,CAAC;IAEO,gCAAS,GAAjB;QAAA,iBAuBC;QAtBC,IAAM,UAAU,GAAG,IAAI,CAAC,WAAW,CAAC;QAEpC,IAAI,IAAI,CAAC,YAAY,EAAE;YACrB,YAAY,CAAC,IAAI,CAAC,YAAY,CAAC,CAAC;YAChC,IAAI,CAAC,YAAY,GAAG,IAAI,CAAC;SAC1B;QAED,IAAI,CAAC,YAAY,GAAG,UAAU,CAAC;YAC7B,mCAAmC;YACnC,IAAI,CAAC,UAAU,EAAE,UAAC,GAAG,EAAE,IAAI;gBACzB,IAAM,KAAK,GAAG,UAAU,CAAC,IAAI,CAAC,CAAC;gBAC/B,IAAI,CAAC,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,IAAI,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,KAAK,GAAG,EAAE;oBACrD,gBAAgB;oBAChB,KAAI,CAAC,OAAO,CAAC,IAAI,CAAC,GAAG,GAAG,CAAC;oBACzB,uBAAuB;oBACvB,KAAI,CAAC,aAAa,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;iBACjC;YACH,CAAC,CAAC,CAAC;YACH,IAAI;YACJ,cAAc;YACd,KAAI,CAAC,WAAW,GAAG,EAAE,CAAC;QACxB,CAAC,EAAE,EAAE,CAAC,CAAC;IACT,CAAC;IAEO,oCAAa,GAArB,UAAsB,IAAY,EAAE,GAAQ;QAC1C,IAAI,CAAC,IAAI,CAAI,IAAI,YAAS,EAAE;YAC1B,IAAI,MAAA;YACJ,GAAG,KAAA;SACJ,CAAC,CAAC;IACL,CAAC;IACH,mBAAC;AAAD,CAAC,AAhED,CAA0C,YAAY,GAgErD","sourcesContent":["/**\n * 可插拔的状态量管理机\n */\n// todo: 后续还需要加入交互互斥的维护机制\nimport EventEmitter from '@antv/event-emitter';\nimport { each } from '@antv/util';\nimport { LooseMap } from '../interface/types';\n\ntype States = LooseMap;\n\nexport default class StateManager extends EventEmitter {\n  private _states: States;\n  private _stateStack: States;\n  private _changeTimer: any;\n\n  constructor() {\n    super();\n    this._states = {};\n    this._stateStack = {};\n  }\n\n  public setState(name: string, exp: any) {\n    this._stateStack[name] = exp;\n    this._onUpdate();\n  }\n\n  public getState(name: string) {\n    return this._states[name];\n  }\n\n  public getAllStates() {\n    return this._states;\n  }\n\n  public clear() {\n    this._states = {};\n    this._stateStack = {};\n    if (this._changeTimer) {\n      clearTimeout(this._changeTimer);\n      this._changeTimer = null;\n    }\n  }\n\n  private _onUpdate() {\n    const stateStack = this._stateStack;\n\n    if (this._changeTimer) {\n      clearTimeout(this._changeTimer);\n      this._changeTimer = null;\n    }\n\n    this._changeTimer = setTimeout(() => {\n      // for (const name in stateStack) {\n      each(stateStack, (exp, name) => {\n        const state = stateStack[name];\n        if (!this._states[name] || this._states[name] !== exp) {\n          // update states\n          this._states[name] = exp;\n          // dispatch state event\n          this._triggerEvent(name, state);\n        }\n      });\n      // }\n      // clear stack\n      this._stateStack = {};\n    }, 16);\n  }\n\n  private _triggerEvent(name: string, exp: any) {\n    this.emit(`${name}:change`, {\n      name,\n      exp,\n    });\n  }\n}\n"]}