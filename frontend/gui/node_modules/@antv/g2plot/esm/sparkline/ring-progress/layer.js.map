{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/sparkline/ring-progress/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { mix } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { getGeom } from '../../geoms/factory';\nimport ProgressLayer, { ProgressViewConfig } from '../progress/layer';\nimport * as EventParser from './event';\n\nconst DEFAULT_COLOR = ['#55A6F3', '#E8EDF3'];\n\nexport type RingProgressViewConfig = ProgressViewConfig;\nexport interface RingProgressLayerConfig extends RingProgressViewConfig, LayerConfig {}\n\nexport default class RingProgressLayer extends ProgressLayer<RingProgressLayerConfig> {\n  public ring: any;\n  public type: string = 'ringProgrsss';\n\n  public processProps() {\n    let props = this.options;\n    props.data = this.processData();\n    const cfg = {\n      padding: [0, 0, 0, 0],\n      xField: 'value',\n      yField: '1',\n      stackField: 'type',\n      barStyle: props.progressStyle,\n      color: this.parseColorProps(props) || DEFAULT_COLOR,\n    } as any;\n    props = mix(props, cfg);\n  }\n\n  protected coord() {\n    const coordConfig: any = {\n      type: 'theta',\n      cfg: {\n        radius: 1.0,\n        innerRadius: this.getThickness(this.options.size),\n      },\n    };\n    this.setConfig('coordinate', coordConfig);\n  }\n\n  protected annotation() {\n    return;\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    this.ring = getGeom('interval', 'main', {\n      positionFields: [props.yField, props.xField],\n      plot: this,\n    });\n    this.ring.adjust = [\n      {\n        type: 'stack',\n      },\n    ];\n    this.setConfig('geometry', this.ring);\n  }\n\n  protected animation() {\n    this.ring.animate = {\n      appear: {\n        duration: 1000,\n      },\n    };\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private getThickness(value?: number): number {\n    const width = this.width;\n    const height = this.height;\n    const size = Math.min(width, height);\n\n    if (value) {\n      return 1.0 - value / size;\n    }\n\n    if (size >= 60) {\n      return 1.0 - 20 / size;\n    }\n    return 1.0 - 10 / size;\n  }\n}\n\nregisterPlotType('ringProgress', RingProgressLayer);\n"]}