{"version":3,"file":"layer.js","sourceRoot":"","sources":["../../../src/sparkline/tiny-column/layer.ts"],"names":[],"mappings":"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","sourcesContent":["import { mix, each } from '@antv/util';\nimport { registerPlotType } from '../../base/global';\nimport { LayerConfig } from '../../base/layer';\nimport { getGeom } from '../../geoms/factory';\nimport TinyLayer, { TinyViewConfig } from '../tiny-layer';\nimport * as EventParser from './event';\nimport { IStyle } from '../../interface/config';\n\nconst WIDTH_RATIO = 0.6;\n\nconst G2_GEOM_MAP = {\n  column: 'interval',\n};\n\nconst PLOT_GEOM_MAP = {\n  interval: 'column',\n};\n\nexport interface TinyColumnViewConfig extends TinyViewConfig {\n  columnStyle?: IStyle;\n}\nexport interface TinyColumnLayerConfig extends TinyColumnViewConfig, LayerConfig {}\n\nexport default class TinyColumnLayer extends TinyLayer<TinyColumnLayerConfig> {\n  public line: any;\n  public area: any;\n  public type: string = 'tinyColumn';\n\n  public init() {\n    this.processProps();\n    super.init();\n  }\n\n  protected geometryParser(dim: string, type: string): string {\n    if (dim === 'g2') {\n      return G2_GEOM_MAP[type];\n    }\n    return PLOT_GEOM_MAP[type];\n  }\n\n  protected scale() {\n    const { options } = this;\n    const scales = {};\n    /** 配置x-scale */\n    scales[options.xField] = { type: 'cat' };\n    this.setConfig('scales', scales);\n  }\n\n  protected addGeometry() {\n    const props = this.options;\n    const column = getGeom('interval', 'main', {\n      positionFields: [props.xField, props.yField],\n      plot: this,\n    });\n    this.setConfig('geometry', column);\n  }\n\n  protected parseEvents() {\n    super.parseEvents(EventParser);\n  }\n\n  private processProps() {\n    const cfg = {\n      padding: [0, 0, 0, 0],\n      columnSize: this.getSize(),\n    } as any;\n    this.options = mix(this.options, cfg);\n  }\n\n  private getSize() {\n    const props = this.options;\n    const columnNumber = this.getColumnNum(props.data, props.xField);\n    const width = this.width;\n    return (width / columnNumber) * WIDTH_RATIO;\n  }\n\n  private getColumnNum(data, field) {\n    const values = [];\n    each(data, (d) => {\n      const v = d[field];\n      if (values.indexOf(v) < 0) {\n        values.push(v);\n      }\n    });\n    return values.length;\n  }\n}\n\nregisterPlotType('tinyColumn', TinyColumnLayer);\n"]}