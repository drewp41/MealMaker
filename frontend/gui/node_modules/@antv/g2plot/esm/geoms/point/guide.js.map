{"version":3,"file":"guide.js","sourceRoot":"","sources":["../../../src/geoms/point/guide.ts"],"names":[],"mappings":"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","sourcesContent":["import { LooseObject } from '../../dependents';\nimport { each, uniq, keys, isFunction, isString, isArray, has, get, isObject } from '@antv/util';\nimport ElementParser from '../base';\n\nfunction getValuesByField(field, data) {\n  const values = [];\n  each(data, (d) => {\n    const v = d[field];\n    values.push(v);\n  });\n  return uniq(values);\n}\n\nconst COLOR_MAPPER = ['seriesField', 'stackField'];\n\ntype PointShape = string | { fields?: []; callback: () => string };\n\nexport default class GuidePointParser extends ElementParser {\n  public init() {\n    const props = this.plot.options;\n    this.style = props.point.style;\n    if (!props.xField || !props.yField) {\n      return;\n    }\n    this.config = {\n      type: 'point',\n      position: {\n        fields: [props.xField, props.yField],\n      },\n      tooltip: false,\n    };\n    // if (this._needParseAttribute('color')) {\n    this.parseColor();\n    // }\n    if (this._needParseAttribute('size')) {\n      this.parseSize();\n    }\n    if (props.point.shape) {\n      this.parseShape(props.point.shape);\n    }\n    if (props.point.style) {\n      this.parseStyle();\n    }\n  }\n\n  public parseColor() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    const mappingField = this._getColorMappingField(props);\n    if (mappingField) {\n      this._parseColorByField(props, config, mappingField);\n    } else {\n      if (props.point && props.point.color) {\n        config.values = [props.point.color];\n      } else if (props.color) {\n        this._parseColor(props, config);\n      } else {\n        const theme = this.plot.getTheme();\n        config.values = [theme.defaultColor];\n      }\n    }\n    if (keys(config).length > 0) {\n      this.config.color = config;\n    }\n  }\n\n  public parseSize() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    config.values = [props.point.size];\n    this.config.size = config;\n  }\n\n  public parseShape(shapeCfg: PointShape) {\n    const config: LooseObject = {};\n    if (isString(shapeCfg)) {\n      config.values = [shapeCfg];\n    } else if (isObject(shapeCfg)) {\n      config.fields = shapeCfg.fields;\n      config.callback = shapeCfg.callback;\n    }\n    this.config.shape = config;\n  }\n\n  public parseStyle() {\n    const props = this.plot.options;\n    const styleProps = props.point && props.point.style;\n    const config = {\n      fields: null,\n      callback: null,\n      cfg: null,\n    };\n    const field = this._getColorMappingField(props);\n    if (isFunction(styleProps) && field) {\n      config.fields = [field];\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n    this.config.style = config;\n  }\n\n  private _parseColorByField(props, config, field) {\n    config.fields = [field];\n    if (props.point.color) {\n      const count = getValuesByField(field, props.data).length;\n      const values = [];\n      for (let i = 0; i < count; i++) {\n        values.push(props.point.color);\n      }\n      config.values = values;\n    } else if (props.color) {\n      this._parseColor(props, config);\n    }\n  }\n\n  private _parseColor(props, config) {\n    const field = this._getColorMappingField(props);\n    if (isString(props.color)) {\n      config.values = [props.color];\n    } else if (isFunction(props.color)) {\n      config.callback = props.color;\n    } else if (isArray(props.color)) {\n      if (field) {\n        config.values = props.color;\n      } else {\n        if (props.color.length > 0) {\n          config.values = [props.color[0]];\n        }\n      }\n    }\n  }\n\n  private _needParseAttribute(attr) {\n    const props = this.plot.options;\n    const condition = props.point && has(props.point, attr);\n    return condition;\n    // const condition = !this.style || this.style[attr];\n    // return condition;\n  }\n\n  private _getColorMappingField(props) {\n    for (const m of COLOR_MAPPER) {\n      if (get(props, m)) {\n        return [props[m]];\n      }\n    }\n  }\n}\n"]}