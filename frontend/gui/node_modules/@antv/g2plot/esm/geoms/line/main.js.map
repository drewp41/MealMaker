{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../src/geoms/line/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { LooseObject } from '../../dependents';\nimport { isFunction, has, isString, isArray } from '@antv/util';\nimport ElementParser from '../base';\n\nexport default class LineParser extends ElementParser {\n  public init() {\n    const props = this.plot.options;\n    this.config = {\n      type: 'line',\n      position: {\n        fields: [props.xField, props.yField],\n      },\n      connectNulls: props.connectNulls,\n    };\n    if (props.lineSize) {\n      this.parseSize();\n    }\n    if (props.smooth) {\n      this.config.shape = { values: ['smooth'] };\n    }\n    if (props.step) {\n      this.config.shape = { values: [props.step] };\n    }\n    if (props.seriesField || props.color) {\n      this.parseColor();\n    }\n    if (props.lineStyle) {\n      this.parseStyle();\n    }\n  }\n\n  public parseSize() {\n    const sizeProps = this.plot.options.lineSize;\n    const config: LooseObject = {};\n    if (isFunction(sizeProps)) {\n      config.callback = sizeProps;\n    } else {\n      config.values = [sizeProps];\n    }\n    this.config.size = config;\n  }\n\n  public parseColor() {\n    const props = this.plot.options;\n    const config: LooseObject = {};\n    if (props.seriesField) {\n      config.fields = [props.seriesField];\n    }\n    if (has(props, 'color')) {\n      const color = props.color;\n      if (isString(color)) {\n        config.values = [color];\n      } else if (isFunction(color)) {\n        config.callback = color;\n      } else if (isArray(color)) {\n        if (props.seriesField) {\n          config.values = color;\n        } else {\n          if (color.length > 0) {\n            config.values = [color[0]];\n          }\n        }\n      }\n    }\n\n    this.config.color = config;\n  }\n\n  public parseStyle() {\n    const props = this.plot.options;\n    const styleProps = props.lineStyle;\n    const config = {\n      fields: null,\n      callback: null,\n      cfg: null,\n    };\n    if (isFunction(styleProps) && props.seriesField) {\n      config.fields = [props.seriesField];\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n    this.config.style = config;\n  }\n}\n"]}