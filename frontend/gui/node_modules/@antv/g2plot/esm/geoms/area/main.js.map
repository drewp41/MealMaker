{"version":3,"file":"main.js","sourceRoot":"","sources":["../../../src/geoms/area/main.ts"],"names":[],"mappings":"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","sourcesContent":["import { Datum } from '../../dependents';\nimport { has, isString, isFunction, isArray, get } from '@antv/util';\nimport ElementParser from '../base';\n\nexport default class AreaParser extends ElementParser {\n  public init() {\n    const props = this.plot.options;\n    this.config = {\n      type: 'area',\n      position: {\n        fields: [props.xField, props.yField],\n      },\n      connectNulls: props.connectNulls || false,\n    };\n    if (props.smooth) {\n      this.config.shape = { values: ['smooth'] };\n    }\n    if (this._getColorMappingField() || props.color) {\n      this.parseColor();\n    }\n\n    if (props.areaStyle || (props.area && props.area.style)) {\n      this.parseStyle();\n    }\n  }\n\n  public parseColor() {\n    const props = this.plot.options;\n    const config: Datum = {};\n    const colorMappingField = this._getColorMappingField();\n    if (colorMappingField) {\n      config.fields = colorMappingField;\n    }\n    if (has(props, 'color')) {\n      const color = props.color;\n      if (isString(color)) {\n        config.values = [color];\n      } else if (isFunction(color)) {\n        config.callback = color;\n      } else if (isArray(color)) {\n        if (colorMappingField) {\n          config.values = color;\n        } else {\n          if (color.length > 0) {\n            config.values = [color[0]];\n          }\n        }\n      }\n    }\n    this.config.color = config;\n  }\n\n  public parseStyle() {\n    const props = this.plot.options;\n    const styleProps = props.areaStyle ? props.areaStyle : props.area.style;\n    const config: Datum = {};\n    if (isFunction(styleProps) && props.seriesField) {\n      config.fields = [props.seriesField];\n      config.callback = styleProps;\n    } else {\n      config.cfg = styleProps;\n    }\n    this.config.style = config;\n  }\n\n  private _getColorMappingField() {\n    const props = this.plot.options;\n    const colorMapper = ['stackField', 'seriesField'];\n    for (const m of colorMapper) {\n      if (get(props, m)) {\n        return [props[m]];\n      }\n    }\n  }\n}\n"]}