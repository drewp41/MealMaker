{"version":3,"file":"types.js","sourceRoot":"","sources":["../../src/interface/types.ts"],"names":[],"mappings":"","sourcesContent":["export type RecursivePartial<T> = {\n  [P in keyof T]?: T[P] extends Array<infer U>\n    ? Array<RecursivePartial<U>>\n    : T[P] extends object\n    ? RecursivePartial<T[P]>\n    : T[P];\n};\n\nexport type MarginPadding = [number, number, number, number];\n\nexport interface LooseMap<T = any> {\n  [key: string]: T;\n}\n\nexport type Maybe<T> = T | undefined | null;\n"]}