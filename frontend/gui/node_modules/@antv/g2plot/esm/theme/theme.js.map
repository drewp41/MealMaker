{"version":3,"file":"theme.js","sourceRoot":"","sources":["../../src/theme/theme.ts"],"names":[],"mappings":"AAAA,OAAO,EAAE,IAAI,EAAE,GAAG,EAAE,GAAG,EAAE,OAAO,EAAE,MAAM,YAAY,CAAC;AAErD;;GAEG;AACH,IAAM,cAAc,GAAwB,EAAE,CAAC;AAE/C;;;GAGG;AACH,SAAS,qBAAqB,CAAC,IAAY,EAAE,KAAU;IACrD,IAAI,aAAa,GAAW;QAC1B,SAAS,EAAE,WAAW;QACtB,WAAW,EAAE,eAAe;QAC5B,UAAU,EAAE,cAAc;KAC3B,CAAC;IACF,IAAM,OAAO,GAAG,EAAE,CAAC;IACnB,IAAI,IAAI,KAAK,MAAM,EAAE;QACnB,aAAa,GAAG;YACd,SAAS,EAAE,WAAW;YACtB,SAAS,EAAE,WAAW;YACtB,UAAU,EAAE,cAAc;SAC3B,CAAC;KACH;IACD,IAAM,aAAa,GAAG,EAAE,CAAC;IACzB,IAAI,CAAC,KAAK,EAAE,UAAC,KAAK,EAAE,QAAQ;QAC1B,IAAI,GAAG,CAAC,aAAa,EAAE,QAAQ,CAAC,EAAE;YAChC,IAAM,WAAS,GAAG,aAAa,CAAC,QAAQ,CAAC,CAAC;YAC1C,IAAI,CAAC,KAAK,EAAE,UAAC,CAAC,EAAE,CAAC;gBACf,GAAG,CAAC,aAAa,EAAK,WAAS,SAAI,CAAC,CAAC,KAAK,QAAQ,CAAC,CAAC,CAAC,SAAS,CAAC,CAAC,CAAC,CAAC,CAAC,WAAQ,EAAE,CAAC,CAAC,CAAC;YAClF,CAAC,CAAC,CAAC;SACJ;aAAM;YACL,GAAG,CAAC,OAAO,EAAE,QAAQ,EAAE,KAAK,CAAC,CAAC;SAC/B;IACH,CAAC,CAAC,CAAC;IACH,IAAI,CAAC,OAAO,CAAC,aAAa,CAAC,EAAE;QAC3B,GAAG,CAAC,OAAO,EAAE,YAAY,EAAE,aAAa,CAAC,CAAC;KAC3C;IACD,OAAO,OAAO,CAAC;AACjB,CAAC;AAED;;;;GAIG;AACH,MAAM,UAAU,aAAa,CAAC,IAAY,EAAE,KAAa;IACvD,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,GAAG,qBAAqB,CAAC,IAAI,EAAE,KAAK,CAAC,CAAC;AAC1E,CAAC;AAED;;;GAGG;AACH,MAAM,UAAU,QAAQ,CAAC,IAAY;IACnC,OAAO,cAAc,CAAC,IAAI,CAAC,WAAW,EAAE,CAAC,IAAI,EAAE,CAAC;AAClD,CAAC","sourcesContent":["import { each, set, has, isEmpty } from '@antv/util';\n\n/**\n * 所有的 plot theme object，每个图类型只会存在一个 theme\n */\nconst PLOT_THEME_MAP: Record<string, any> = {};\n\n/**\n * 将 主题 转换为 G2 主题配置\n * @param type plotType\n */\nfunction convertThemeToG2Theme(type: string, theme: any) {\n  let styleMapShape: object = {\n    lineStyle: 'line.line',\n    columnStyle: 'interval.rect',\n    pointStyle: 'point.circle', // point 可能是其他shape，如square等\n  };\n  const g2Theme = {};\n  if (type === 'area') {\n    styleMapShape = {\n      areaStyle: 'area.area',\n      lineStyle: 'area.line', // todo area-smooth怎么配置\n      pointStyle: 'point.circle',\n    };\n  }\n  const geometryTheme = {};\n  each(theme, (style, styleKey) => {\n    if (has(styleMapShape, styleKey)) {\n      const shapePath = styleMapShape[styleKey];\n      each(style, (v, k) => {\n        set(geometryTheme, `${shapePath}.${[k === 'normal' ? 'default' : k]}.style`, v);\n      });\n    } else {\n      set(g2Theme, styleKey, style);\n    }\n  });\n  if (!isEmpty(geometryTheme)) {\n    set(g2Theme, 'geometries', geometryTheme);\n  }\n  return g2Theme;\n}\n\n/**\n * 注册新的图表主题\n * @param type\n * @param theme\n */\nexport function registerTheme(type: string, theme: object) {\n  PLOT_THEME_MAP[type.toLowerCase()] = convertThemeToG2Theme(type, theme);\n}\n\n/**\n * 根据类型获取主题\n * @param type plotType, such as line, column, bar, pie, bullet, radar and so on\n */\nexport function getTheme(type: string): any {\n  return PLOT_THEME_MAP[type.toLowerCase()] || {};\n}\n"]}