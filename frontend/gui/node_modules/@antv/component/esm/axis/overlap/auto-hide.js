import { getMaxLabelWidth } from '../../util/label';
// 文本是否旋转
function isRotate(label) {
    var matrix = label.attr('matrix');
    return matrix && matrix[0] !== 1; // 仅在这个场景下判定
}
// autohide 不再考虑超出限制
// function isOutLimit(isVertical: boolean, label: IElement, limitLength: number) {
//   if (!limitLength) {
//     // 如果没限制 limitLength 则直接返回 false
//     return false;
//   }
//   const canvasBBox = label.getCanvasBBox();
//   let isOut = false;
//   if (isVertical) {
//     isOut = canvasBBox.width > limitLength;
//   } else {
//     isOut = canvasBBox.height > limitLength;
//   }
//   return isOut;
// }
// 是否重叠
function isOverlap(isVertical, rotated, preBox, curBox, reversed) {
    if (reversed === void 0) { reversed = false; }
    var overlap = false;
    if (isVertical) {
        // 垂直时检测边高
        overlap = Math.abs(preBox.y - curBox.y) < preBox.height;
    }
    else {
        // 水平时检测
        if (rotated) {
            // 如果旋转了，则检测两者 x 之间的间距是否小于前一个的高度
            var height = reversed ? curBox.height : preBox.height;
            overlap = Math.abs(preBox.x - curBox.x) < height;
        }
        else {
            // 检测两者是否 x 方向重合
            var width = reversed ? curBox.width : preBox.width;
            overlap = Math.abs(preBox.x - curBox.x) < width;
        }
    }
    return overlap;
}
// 保留第一个或者最后一个
function reserveOne(isVertical, labelsGroup, reversed) {
    var labels = labelsGroup.getChildren().slice(); // 复制数组
    if (!labels.length) {
        return false;
    }
    var hasHide = false;
    if (reversed) {
        // 翻转
        labels.reverse();
    }
    var count = labels.length;
    var first = labels[0];
    var rotated = isRotate(first);
    var preBox = first.getBBox();
    for (var i = 1; i < count; i++) {
        var label = labels[i];
        var curBBox = label.getBBox();
        // 不再考虑超出限制，而仅仅根据是否重叠进行隐藏 isOutLimit(isVertical, label, limitLength) ||
        var isHide = isOverlap(isVertical, rotated, preBox, curBBox, reversed);
        if (isHide) {
            label.hide();
            hasHide = true;
        }
        else {
            preBox = curBBox;
        }
    }
    return hasHide;
}
export function getDefault() {
    return equidistance;
}
/**
 * 保证首个 label 可见，即使超过 limitLength 也不隐藏
 * @param {boolean} isVertical  是否垂直
 * @param {IGroup}  labelsGroup label 的分组
 */
export function reserveFirst(isVertical, labelsGroup) {
    return reserveOne(isVertical, labelsGroup, false);
}
/**
 * 保证最后一个 label 可见，即使超过 limitLength 也不隐藏
 * @param {boolean} isVertical  是否垂直
 * @param {IGroup}  labelsGroup label 的分组
 */
export function reserveLast(isVertical, labelsGroup) {
    return reserveOne(isVertical, labelsGroup, true);
}
/**
 * 保证第一个最后一个 label 可见，即使超过 limitLength 也不隐藏
 * @param {boolean} isVertical  是否垂直
 * @param {IGroup}  labelsGroup label 的分组
 */
export function reserveBoth(isVertical, labelsGroup) {
    var labels = labelsGroup.getChildren().slice(); // 复制数组
    if (labels.length <= 2) {
        // 如果数量小于或等于 2 则直接返回
        return false;
    }
    var hasHide = false;
    var count = labels.length;
    var first = labels[0];
    var last = labels[count - 1];
    var rotated = isRotate(first);
    var preBox = first.getBBox();
    var preLabel = first;
    // 按照先保存第一个的逻辑循环一遍，最后一个不参与循环
    for (var i = 1; i < count - 1; i++) {
        var label = labels[i];
        var curBBox = label.getBBox();
        // 废弃 isOutLimit(isVertical, label, limitLength) ||
        var isHide = isOverlap(isVertical, rotated, preBox, curBBox);
        if (isHide) {
            label.hide();
            hasHide = true;
        }
        else {
            preBox = curBBox;
            preLabel = label;
        }
    }
    var lastBBox = last.getBBox();
    var overlap = isOverlap(isVertical, rotated, preBox, lastBBox); // 不检测超出 limit
    if (overlap) {
        // 发生冲突，则隐藏前一个保留后一个
        preLabel.hide();
        hasHide = true;
    }
    return hasHide;
}
/**
 * 保证 label 均匀显示，主要解决文本层叠的问题，对于 limitLength 不处理
 * @param {boolean} isVertical  是否垂直
 * @param {IGroup}  labelsGroup label 的分组
 */
export function equidistance(isVertical, labelsGroup) {
    var labels = labelsGroup.getChildren().slice(); // 复制数组
    if (labels.length < 2) {
        // 如果数量小于 2 则直接返回，等于 2 时可能也会重合
        return false;
    }
    var hasHide = false;
    var first = labels[0];
    var firstBBox = first.getBBox();
    var second = labels[1];
    var rotated = isRotate(first);
    var count = labels.length;
    var interval = 0; // 不重叠的坐标文本间距个数
    if (isVertical) {
        // 垂直的坐标轴计算垂直方向的间距
        var distance = Math.abs(second.attr('y') - first.attr('y'));
        interval = firstBBox.height / distance;
    }
    else {
        // 水平坐标轴
        if (rotated) {
            var distance = Math.abs(second.attr('x') - first.attr('x'));
            interval = firstBBox.width / distance;
        }
        else {
            var maxWidth = getMaxLabelWidth(labels);
            var distance = Math.abs(second.attr('x') - first.attr('x'));
            interval = maxWidth / distance;
        }
    }
    // interval > 1 时需要对 label 进行隐藏
    if (interval > 1) {
        interval = Math.ceil(interval);
        for (var i = 0; i < count; i++) {
            if (i % interval !== 0) {
                // 仅保留被整除的 label
                labels[i].hide();
                hasHide = true;
            }
        }
    }
    return hasHide;
}
//# sourceMappingURL=auto-hide.js.map