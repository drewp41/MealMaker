import { __assign, __extends } from "tslib";
import GroupComponent from '../abstract/group-component';
import { getMatrixByAngle } from '../util/matrix';
import Theme from '../util/theme';
var TextAnnotation = /** @class */ (function (_super) {
    __extends(TextAnnotation, _super);
    function TextAnnotation() {
        return _super !== null && _super.apply(this, arguments) || this;
    }
    /**
     * @protected
     * 默认的配置项
     * @returns {object} 默认的配置项
     */
    TextAnnotation.prototype.getDefaultCfg = function () {
        var cfg = _super.prototype.getDefaultCfg.call(this);
        return __assign(__assign({}, cfg), { name: 'annotation', type: 'text', locationType: 'point', x: 0, y: 0, content: '', rotate: null, style: {}, defaultCfg: {
                style: {
                    fill: Theme.textColor,
                    fontSize: 12,
                    textAlign: 'center',
                    textBaseline: 'middle',
                    fontFamily: Theme.fontFamily,
                },
            } });
    };
    // 复写 setLocation 方法，不需要重新创建 text
    TextAnnotation.prototype.setLocation = function (location) {
        this.set('x', location.x);
        this.set('y', location.y);
        this.resetLocation();
    };
    TextAnnotation.prototype.renderInner = function (group) {
        this.renderText(group);
    };
    TextAnnotation.prototype.renderText = function (group) {
        var _a = this.getLocation(), x = _a.x, y = _a.y;
        var content = this.get('content');
        var style = this.get('style');
        var text = this.addShape(group, {
            type: 'text',
            id: this.getElementId('text'),
            name: 'annotation-text',
            attrs: __assign({ x: x,
                y: y, text: content }, style),
        });
        this.applyRotate(text, x, y);
    };
    TextAnnotation.prototype.applyRotate = function (textShape, x, y) {
        var rotate = this.get('rotate');
        var matrix = null;
        if (rotate) {
            matrix = getMatrixByAngle({ x: x, y: y }, rotate);
        }
        textShape.attr('matrix', matrix);
    };
    TextAnnotation.prototype.resetLocation = function () {
        var textShape = this.getElementByLocalId('text');
        if (textShape) {
            var _a = this.getLocation(), x = _a.x, y = _a.y;
            textShape.attr({
                x: x,
                y: y,
            });
            this.applyRotate(textShape, x, y);
        }
    };
    return TextAnnotation;
}(GroupComponent));
export default TextAnnotation;
//# sourceMappingURL=text.js.map