import { __assign, __extends } from "tslib";
import { get, isArray, isObject } from '@antv/util';
import { getPointAngle } from '../../util/coordinate';
import PolarLabel from './polar';
/** label text和line距离 4px */
var MARGIN = 4;
function getEndPoint(center, angle, r) {
    return {
        x: center.x + r * Math.cos(angle),
        y: center.y + r * Math.sin(angle),
    };
}
function antiCollision(labels, lineHeight, plotRange, center, isRight) {
    // adjust y position of labels to avoid overlapping
    var overlapping = true;
    var start = plotRange.start;
    var end = plotRange.end;
    var startY = Math.min(start.y, end.y);
    var totalHeight = Math.abs(start.y - end.y);
    var i;
    var maxY = 0;
    var minY = Number.MIN_VALUE;
    var boxes = labels.map(function (label) {
        if (label.y > maxY) {
            maxY = label.y;
        }
        if (label.y < minY) {
            minY = label.y;
        }
        return {
            size: lineHeight,
            targets: [label.y - startY],
        };
    });
    minY -= startY;
    if (maxY - startY > totalHeight) {
        totalHeight = maxY - startY;
    }
    while (overlapping) {
        /* eslint no-loop-func: 0 */
        boxes.forEach(function (box) {
            var target = (Math.min.apply(minY, box.targets) + Math.max.apply(minY, box.targets)) / 2;
            box.pos = Math.min(Math.max(minY, target - box.size / 2), totalHeight - box.size);
            // box.pos = Math.max(0, target - box.size / 2);
        });
        // detect overlapping and join boxes
        overlapping = false;
        i = boxes.length;
        while (i--) {
            if (i > 0) {
                var previousBox = boxes[i - 1];
                var box = boxes[i];
                if (previousBox.pos + previousBox.size > box.pos) {
                    // overlapping
                    previousBox.size += box.size;
                    previousBox.targets = previousBox.targets.concat(box.targets);
                    // overflow, shift up
                    if (previousBox.pos + previousBox.size > totalHeight) {
                        previousBox.pos = totalHeight - previousBox.size;
                    }
                    boxes.splice(i, 1); // removing box
                    overlapping = true;
                }
            }
        }
    }
    i = 0;
    // step 4: normalize y and adjust x
    boxes.forEach(function (b) {
        var posInCompositeBox = startY + lineHeight / 2; // middle of the label
        b.targets.forEach(function () {
            labels[i].y = b.pos + posInCompositeBox;
            posInCompositeBox += lineHeight;
            i++;
        });
    });
    // (x - cx)^2 + (y - cy)^2 = totalR^2
    labels.forEach(function (label) {
        var rPow2 = label.r * label.r;
        var dyPow2 = Math.pow(Math.abs(label.y - center.y), 2);
        if (rPow2 < dyPow2) {
            label.x = center.x;
        }
        else {
            var dx = Math.sqrt(rPow2 - dyPow2);
            if (!isRight) {
                // left
                label.x = center.x - dx;
            }
            else {
                // right
                label.x = center.x + dx;
            }
        }
    });
}
/**
 * 饼图 label
 */
var PieLabel = /** @class */ (function (_super) {
    __extends(PieLabel, _super);
    function PieLabel(geometry) {
        var _this = _super.call(this, geometry) || this;
        _this.defaultLabelCfg = get(geometry.theme, 'pieLabels', {});
        return _this;
    }
    PieLabel.prototype.getDefaultOffset = function (offset) {
        return offset || 0;
    };
    PieLabel.prototype.adjustItems = function (items) {
        var offset = items[0] ? items[0].offset : 0;
        if (offset > 0) {
            items = this.distribute(items, offset);
        }
        return _super.prototype.adjustItems.call(this, items);
    };
    // 连接线
    PieLabel.prototype.lineToLabel = function (label) {
        var coordinate = this.coordinate;
        // @ts-ignore
        var r = coordinate.getRadius();
        var distance = label.offset;
        var angle = label.angle;
        var center = coordinate.getCenter();
        // 贴近圆周
        var start = getEndPoint(center, angle, r);
        var inner = getEndPoint(center, angle, r + distance / 2);
        var end = {
            x: label.x - Math.cos(angle) * MARGIN,
            y: label.y - Math.sin(angle) * MARGIN,
        };
        if (!isObject(label.labelLine)) {
            // labelLine: true
            label.labelLine = {};
        }
        label.labelLine.path = ["M " + start.x, start.y + " Q" + inner.x, inner.y + " " + end.x, end.y].join(',');
    };
    PieLabel.prototype.getLabelRotate = function (angle, offset, isLabelLimit) {
        var rotate;
        if (offset < 0) {
            rotate = angle;
            if (rotate > Math.PI / 2) {
                rotate = rotate - Math.PI;
            }
            if (rotate < -Math.PI / 2) {
                rotate = rotate + Math.PI;
            }
        }
        return rotate;
    };
    PieLabel.prototype.getLabelAlign = function (point) {
        var coordinate = this.coordinate;
        var center = coordinate.getCenter();
        var align;
        if (point.angle <= Math.PI / 2 && point.x >= center.x) {
            align = 'left';
        }
        else {
            align = 'right';
        }
        var offset = this.getDefaultOffset(point.offset);
        if (offset <= 0) {
            if (align === 'right') {
                align = 'left';
            }
            else {
                align = 'right';
            }
        }
        return align;
    };
    PieLabel.prototype.getArcPoint = function (point) {
        return point;
    };
    PieLabel.prototype.getPointAngle = function (point) {
        var coordinate = this.coordinate;
        var startPoint = {
            x: isArray(point.x) ? point.x[0] : point.x,
            y: point.y[0],
        };
        var endPoint = {
            x: isArray(point.x) ? point.x[1] : point.x,
            y: point.y[1],
        };
        var angle;
        var startAngle = getPointAngle(coordinate, startPoint);
        if (point.points && point.points[0].y === point.points[1].y) {
            angle = startAngle;
        }
        else {
            var endAngle = getPointAngle(coordinate, endPoint);
            if (startAngle >= endAngle) {
                // 100% pie slice
                endAngle = endAngle + Math.PI * 2;
            }
            angle = startAngle + (endAngle - startAngle) / 2;
        }
        return angle;
    };
    PieLabel.prototype.getCirclePoint = function (angle, offset, p) {
        var coordinate = this.coordinate;
        var center = coordinate.getCenter();
        // @ts-ignore
        var r = coordinate.getRadius() + offset;
        return __assign(__assign({}, getEndPoint(center, angle, r)), { angle: angle,
            r: r });
    };
    // distribute labels
    PieLabel.prototype.distribute = function (labels, offset) {
        var coordinate = this.coordinate;
        // @ts-ignore
        var radius = coordinate.getRadius();
        var lineHeight = get(this.geometry.theme, ['pieLabels', 'labelHeight'], 14);
        var center = coordinate.getCenter();
        var totalR = radius + offset;
        var totalHeight = totalR * 2 + lineHeight * 2;
        var plotRange = {
            start: coordinate.start,
            end: coordinate.end,
        };
        // step 1: separate labels
        var halves = [
            [],
            [],
        ];
        labels.forEach(function (label) {
            if (!label) {
                return;
            }
            if (label.textAlign === 'right') {
                // left
                halves[0].push(label);
            }
            else {
                // right or center will be put on the right side
                halves[1].push(label);
            }
        });
        halves.forEach(function (half, index) {
            // step 2: reduce labels
            var maxLabelsCountForOneSide = totalHeight / lineHeight;
            if (half.length > maxLabelsCountForOneSide) {
                half.sort(function (a, b) {
                    // sort by percentage DESC
                    return b['..percent'] - a['..percent'];
                });
                half.splice(maxLabelsCountForOneSide, half.length - maxLabelsCountForOneSide);
            }
            // step 3: distribute position (x and y)
            half.sort(function (a, b) {
                // sort by y ASC
                return a.y - b.y;
            });
            antiCollision(half, lineHeight, plotRange, center, index);
        });
        return halves[0].concat(halves[1]);
    };
    return PieLabel;
}(PolarLabel));
export default PieLabel;
//# sourceMappingURL=pie.js.map